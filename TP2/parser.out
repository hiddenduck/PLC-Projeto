Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Axiom
Rule 1     Axiom -> Axiom Code
Rule 2     Axiom -> Axiom Function
Rule 3     Axiom -> <empty>
Rule 4     Code -> Code Block
Rule 5     Code -> Block
Rule 6     Block -> Exp ;
Rule 7     Block -> If
Rule 8     Block -> IfElse
Rule 9     Block -> While
Rule 10    Block -> Switch
Rule 11    Body -> { }
Rule 12    Body -> Block
Rule 13    Body -> { Code }
Rule 14    Function -> ID FunScope FunCases Body
Rule 15    FunScope -> :
Rule 16    FunCases -> FunExtra RARROW ID
Rule 17    FunCases -> RARROW ID
Rule 18    FunCases -> FunExtra
Rule 19    FunCases -> <empty>
Rule 20    FunExtra -> FunExtra , ID
Rule 21    FunExtra -> ID
Rule 22    IfScope -> IF
Rule 23    If -> IfScope Exp Body
Rule 24    ElseScope -> ELSE
Rule 25    IfElse -> IfScope Exp Body ElseScope Body
Rule 26    WhileScope -> WHILE
Rule 27    While -> WhileScope ( Exp ) Body
Rule 28    SwitchScope -> SWITCH
Rule 29    Switch -> SwitchScope Conds { Cases }
Rule 30    Conds -> Conds , Cond
Rule 31    Conds -> Cond
Rule 32    Cond -> ID ( AtribOp )
Rule 33    Cond -> ( AtribOp )
Rule 34    Cases -> Cases Case
Rule 35    Cases -> Case
Rule 36    Case -> ID : Body
Rule 37    Case -> : Body
Rule 38    Exp -> Atrib
Rule 39    Exp -> Op
Rule 40    Exp -> Decl
Rule 41    Exp -> DeclArray
Rule 42    Exp -> DeclAtrib
Rule 43    AtribOp -> AtribNum
Rule 44    AtribOp -> Op
Rule 45    Decl -> ID ID
Rule 46    DeclArray -> ID ID DeclArraySize
Rule 47    DeclArraySize -> DeclArraySize [ NUM ]
Rule 48    DeclArraySize -> <empty>
Rule 49    AtribArray -> ID ArraySize LARROW AtribOp
Rule 50    AtribArray -> AtribOp RARROW ID ArraySize
Rule 51    ArraySize -> ArraySize [ AtribOp ]
Rule 52    ArraySize -> <empty>
Rule 53    DeclAtrib -> ID ID LARROW AtribOp
Rule 54    DeclAtrib -> AtribOp RARROW ID ID
Rule 55    AtribNum -> ID LARROW AtribOp
Rule 56    AtribNum -> AtribOp LARROW ID
Rule 57    AtribNum -> AtribArray
Rule 58    Atrib -> ID LARROW AtribOp
Rule 59    Atrib -> AtribOp RARROW ID
Rule 60    Atrib -> ID SWAP ID
Rule 61    Atrib -> AtribArray
Rule 62    Op -> OpUno
Rule 63    Op -> OpBin
Rule 64    OpUno -> NEG AtribOp
Rule 65    OpUno -> AccessArray
Rule 66    OpUno -> SUB AtribOp
Rule 67    AccessArray -> ID ArraySize
Rule 68    OpBin -> OpBin OpLogico TermPlus
Rule 69    OpBin -> TermPlus
Rule 70    TermPlus -> TermPlus OpPlus TermMult
Rule 71    TermPlus -> TermMult
Rule 72    TermMult -> TermMult OpMult TermPow
Rule 73    TermMult -> TermPow
Rule 74    TermPow -> TermPow OpPow Base
Rule 75    TermPow -> Base
Rule 76    Base -> ( AtribOp )
Rule 77    Base -> ID
Rule 78    Base -> NUM
Rule 79    Base -> FunCall
Rule 80    FunCall -> ID ( FunArg )
Rule 81    FunArg -> FunRec
Rule 82    FunArg -> <empty>
Rule 83    FunRec -> FunRec , AtribOp
Rule 84    FunRec -> AtribOp
Rule 85    OpLogico -> AND
Rule 86    OpLogico -> OR
Rule 87    OpLogico -> LESSER
Rule 88    OpLogico -> GREATER
Rule 89    OpLogico -> LEQ
Rule 90    OpLogico -> GEQ
Rule 91    OpLogico -> EQUAL
Rule 92    OpPlus -> ADD
Rule 93    OpPlus -> SUB
Rule 94    OpMult -> MUL
Rule 95    OpMult -> DIV
Rule 96    OpPow -> POW

Terminals, with rules where they appear

(                    : 27 32 33 76 80
)                    : 27 32 33 76 80
,                    : 20 30 83
:                    : 15 36 37
;                    : 6
ADD                  : 92
AND                  : 85
DIV                  : 95
ELSE                 : 24
EQUAL                : 91
GEQ                  : 90
GREATER              : 88
ID                   : 14 16 17 20 21 32 36 45 45 46 46 49 50 53 53 54 54 55 56 58 59 60 60 67 77 80
IF                   : 22
LARROW               : 49 53 55 56 58
LEQ                  : 89
LESSER               : 87
MUL                  : 94
NEG                  : 64
NUM                  : 47 78
OR                   : 86
POW                  : 96
RARROW               : 16 17 50 54 59
SUB                  : 66 93
SWAP                 : 60
SWITCH               : 28
WHILE                : 26
[                    : 47 51
]                    : 47 51
error                : 
{                    : 11 13 29
}                    : 11 13 29

Nonterminals, with rules where they appear

AccessArray          : 65
ArraySize            : 49 50 51 67
Atrib                : 38
AtribArray           : 57 61
AtribNum             : 43
AtribOp              : 32 33 49 50 51 53 54 55 56 58 59 64 66 76 83 84
Axiom                : 1 2 0
Base                 : 74 75
Block                : 4 5 12
Body                 : 14 23 25 25 27 36 37
Case                 : 34 35
Cases                : 29 34
Code                 : 1 4 13
Cond                 : 30 31
Conds                : 29 30
Decl                 : 40
DeclArray            : 41
DeclArraySize        : 46 47
DeclAtrib            : 42
ElseScope            : 25
Exp                  : 6 23 25 27
FunArg               : 80
FunCall              : 79
FunCases             : 14
FunExtra             : 16 18 20
FunRec               : 81 83
FunScope             : 14
Function             : 2
If                   : 7
IfElse               : 8
IfScope              : 23 25
Op                   : 39 44
OpBin                : 63 68
OpLogico             : 68
OpMult               : 72
OpPlus               : 70
OpPow                : 74
OpUno                : 62
Switch               : 10
SwitchScope          : 29
TermMult             : 70 71 72
TermPlus             : 68 69 70
TermPow              : 72 73 74
While                : 9
WhileScope           : 27

Parsing method: LALR

state 0

    (0) S' -> . Axiom
    (1) Axiom -> . Axiom Code
    (2) Axiom -> . Axiom Function
    (3) Axiom -> .

    ID              reduce using rule 3 (Axiom -> .)
    IF              reduce using rule 3 (Axiom -> .)
    WHILE           reduce using rule 3 (Axiom -> .)
    SWITCH          reduce using rule 3 (Axiom -> .)
    NEG             reduce using rule 3 (Axiom -> .)
    SUB             reduce using rule 3 (Axiom -> .)
    (               reduce using rule 3 (Axiom -> .)
    NUM             reduce using rule 3 (Axiom -> .)
    $end            reduce using rule 3 (Axiom -> .)

    Axiom                          shift and go to state 1

state 1

    (0) S' -> Axiom .
    (1) Axiom -> Axiom . Code
    (2) Axiom -> Axiom . Function
    (4) Code -> . Code Block
    (5) Code -> . Block
    (14) Function -> . ID FunScope FunCases Body
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 5
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Code                           shift and go to state 2
    Function                       shift and go to state 3
    Block                          shift and go to state 4
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 2

    (1) Axiom -> Axiom Code .
    (4) Code -> Code . Block
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NEG resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
    $end            reduce using rule 1 (Axiom -> Axiom Code .)
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

  ! ID              [ reduce using rule 1 (Axiom -> Axiom Code .) ]
  ! IF              [ reduce using rule 1 (Axiom -> Axiom Code .) ]
  ! WHILE           [ reduce using rule 1 (Axiom -> Axiom Code .) ]
  ! SWITCH          [ reduce using rule 1 (Axiom -> Axiom Code .) ]
  ! NEG             [ reduce using rule 1 (Axiom -> Axiom Code .) ]
  ! SUB             [ reduce using rule 1 (Axiom -> Axiom Code .) ]
  ! (               [ reduce using rule 1 (Axiom -> Axiom Code .) ]
  ! NUM             [ reduce using rule 1 (Axiom -> Axiom Code .) ]

    Block                          shift and go to state 37
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 3

    (2) Axiom -> Axiom Function .

    ID              reduce using rule 2 (Axiom -> Axiom Function .)
    IF              reduce using rule 2 (Axiom -> Axiom Function .)
    WHILE           reduce using rule 2 (Axiom -> Axiom Function .)
    SWITCH          reduce using rule 2 (Axiom -> Axiom Function .)
    NEG             reduce using rule 2 (Axiom -> Axiom Function .)
    SUB             reduce using rule 2 (Axiom -> Axiom Function .)
    (               reduce using rule 2 (Axiom -> Axiom Function .)
    NUM             reduce using rule 2 (Axiom -> Axiom Function .)
    $end            reduce using rule 2 (Axiom -> Axiom Function .)


state 4

    (5) Code -> Block .

    ID              reduce using rule 5 (Code -> Block .)
    IF              reduce using rule 5 (Code -> Block .)
    WHILE           reduce using rule 5 (Code -> Block .)
    SWITCH          reduce using rule 5 (Code -> Block .)
    NEG             reduce using rule 5 (Code -> Block .)
    SUB             reduce using rule 5 (Code -> Block .)
    (               reduce using rule 5 (Code -> Block .)
    NUM             reduce using rule 5 (Code -> Block .)
    $end            reduce using rule 5 (Code -> Block .)
    }               reduce using rule 5 (Code -> Block .)


state 5

    (14) Function -> ID . FunScope FunCases Body
    (58) Atrib -> ID . LARROW AtribOp
    (60) Atrib -> ID . SWAP ID
    (45) Decl -> ID . ID
    (46) DeclArray -> ID . ID DeclArraySize
    (53) DeclAtrib -> ID . ID LARROW AtribOp
    (49) AtribArray -> ID . ArraySize LARROW AtribOp
    (55) AtribNum -> ID . LARROW AtribOp
    (67) AccessArray -> ID . ArraySize
    (77) Base -> ID .
    (80) FunCall -> ID . ( FunArg )
    (15) FunScope -> . :
    (51) ArraySize -> . ArraySize [ AtribOp ]
    (52) ArraySize -> .

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for LARROW resolved as shift
  ! reduce/reduce conflict for ; resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for RARROW resolved using rule 52 (ArraySize -> .)
    LARROW          shift and go to state 41
    SWAP            shift and go to state 42
    ID              shift and go to state 39
    POW             reduce using rule 77 (Base -> ID .)
    MUL             reduce using rule 77 (Base -> ID .)
    DIV             reduce using rule 77 (Base -> ID .)
    ADD             reduce using rule 77 (Base -> ID .)
    SUB             reduce using rule 77 (Base -> ID .)
    AND             reduce using rule 77 (Base -> ID .)
    OR              reduce using rule 77 (Base -> ID .)
    LESSER          reduce using rule 77 (Base -> ID .)
    GREATER         reduce using rule 77 (Base -> ID .)
    LEQ             reduce using rule 77 (Base -> ID .)
    GEQ             reduce using rule 77 (Base -> ID .)
    EQUAL           reduce using rule 77 (Base -> ID .)
    (               shift and go to state 44
    :               shift and go to state 45
    [               reduce using rule 52 (ArraySize -> .)
    ;               reduce using rule 52 (ArraySize -> .)
    RARROW          reduce using rule 52 (ArraySize -> .)

  ! ;               [ reduce using rule 77 (Base -> ID .) ]
  ! RARROW          [ reduce using rule 77 (Base -> ID .) ]
  ! LARROW          [ reduce using rule 77 (Base -> ID .) ]
  ! LARROW          [ reduce using rule 52 (ArraySize -> .) ]

    FunScope                       shift and go to state 40
    ArraySize                      shift and go to state 43

state 6

    (6) Block -> Exp . ;

    ;               shift and go to state 46


state 7

    (7) Block -> If .

    ID              reduce using rule 7 (Block -> If .)
    IF              reduce using rule 7 (Block -> If .)
    WHILE           reduce using rule 7 (Block -> If .)
    SWITCH          reduce using rule 7 (Block -> If .)
    NEG             reduce using rule 7 (Block -> If .)
    SUB             reduce using rule 7 (Block -> If .)
    (               reduce using rule 7 (Block -> If .)
    NUM             reduce using rule 7 (Block -> If .)
    $end            reduce using rule 7 (Block -> If .)
    ELSE            reduce using rule 7 (Block -> If .)
    }               reduce using rule 7 (Block -> If .)
    :               reduce using rule 7 (Block -> If .)


state 8

    (8) Block -> IfElse .

    ID              reduce using rule 8 (Block -> IfElse .)
    IF              reduce using rule 8 (Block -> IfElse .)
    WHILE           reduce using rule 8 (Block -> IfElse .)
    SWITCH          reduce using rule 8 (Block -> IfElse .)
    NEG             reduce using rule 8 (Block -> IfElse .)
    SUB             reduce using rule 8 (Block -> IfElse .)
    (               reduce using rule 8 (Block -> IfElse .)
    NUM             reduce using rule 8 (Block -> IfElse .)
    $end            reduce using rule 8 (Block -> IfElse .)
    ELSE            reduce using rule 8 (Block -> IfElse .)
    }               reduce using rule 8 (Block -> IfElse .)
    :               reduce using rule 8 (Block -> IfElse .)


state 9

    (9) Block -> While .

    ID              reduce using rule 9 (Block -> While .)
    IF              reduce using rule 9 (Block -> While .)
    WHILE           reduce using rule 9 (Block -> While .)
    SWITCH          reduce using rule 9 (Block -> While .)
    NEG             reduce using rule 9 (Block -> While .)
    SUB             reduce using rule 9 (Block -> While .)
    (               reduce using rule 9 (Block -> While .)
    NUM             reduce using rule 9 (Block -> While .)
    $end            reduce using rule 9 (Block -> While .)
    ELSE            reduce using rule 9 (Block -> While .)
    }               reduce using rule 9 (Block -> While .)
    :               reduce using rule 9 (Block -> While .)


state 10

    (10) Block -> Switch .

    ID              reduce using rule 10 (Block -> Switch .)
    IF              reduce using rule 10 (Block -> Switch .)
    WHILE           reduce using rule 10 (Block -> Switch .)
    SWITCH          reduce using rule 10 (Block -> Switch .)
    NEG             reduce using rule 10 (Block -> Switch .)
    SUB             reduce using rule 10 (Block -> Switch .)
    (               reduce using rule 10 (Block -> Switch .)
    NUM             reduce using rule 10 (Block -> Switch .)
    $end            reduce using rule 10 (Block -> Switch .)
    ELSE            reduce using rule 10 (Block -> Switch .)
    }               reduce using rule 10 (Block -> Switch .)
    :               reduce using rule 10 (Block -> Switch .)


state 11

    (38) Exp -> Atrib .

    ;               reduce using rule 38 (Exp -> Atrib .)
    {               reduce using rule 38 (Exp -> Atrib .)
    ID              reduce using rule 38 (Exp -> Atrib .)
    IF              reduce using rule 38 (Exp -> Atrib .)
    WHILE           reduce using rule 38 (Exp -> Atrib .)
    SWITCH          reduce using rule 38 (Exp -> Atrib .)
    NEG             reduce using rule 38 (Exp -> Atrib .)
    SUB             reduce using rule 38 (Exp -> Atrib .)
    (               reduce using rule 38 (Exp -> Atrib .)
    NUM             reduce using rule 38 (Exp -> Atrib .)
    )               reduce using rule 38 (Exp -> Atrib .)


state 12

    (39) Exp -> Op .
    (44) AtribOp -> Op .

    ;               reduce using rule 39 (Exp -> Op .)
    {               reduce using rule 39 (Exp -> Op .)
    ID              reduce using rule 39 (Exp -> Op .)
    IF              reduce using rule 39 (Exp -> Op .)
    WHILE           reduce using rule 39 (Exp -> Op .)
    SWITCH          reduce using rule 39 (Exp -> Op .)
    NEG             reduce using rule 39 (Exp -> Op .)
    SUB             reduce using rule 39 (Exp -> Op .)
    (               reduce using rule 39 (Exp -> Op .)
    NUM             reduce using rule 39 (Exp -> Op .)
    )               reduce using rule 39 (Exp -> Op .)
    RARROW          reduce using rule 44 (AtribOp -> Op .)
    LARROW          reduce using rule 44 (AtribOp -> Op .)


state 13

    (40) Exp -> Decl .

    ;               reduce using rule 40 (Exp -> Decl .)
    {               reduce using rule 40 (Exp -> Decl .)
    ID              reduce using rule 40 (Exp -> Decl .)
    IF              reduce using rule 40 (Exp -> Decl .)
    WHILE           reduce using rule 40 (Exp -> Decl .)
    SWITCH          reduce using rule 40 (Exp -> Decl .)
    NEG             reduce using rule 40 (Exp -> Decl .)
    SUB             reduce using rule 40 (Exp -> Decl .)
    (               reduce using rule 40 (Exp -> Decl .)
    NUM             reduce using rule 40 (Exp -> Decl .)
    )               reduce using rule 40 (Exp -> Decl .)


state 14

    (41) Exp -> DeclArray .

    ;               reduce using rule 41 (Exp -> DeclArray .)
    {               reduce using rule 41 (Exp -> DeclArray .)
    ID              reduce using rule 41 (Exp -> DeclArray .)
    IF              reduce using rule 41 (Exp -> DeclArray .)
    WHILE           reduce using rule 41 (Exp -> DeclArray .)
    SWITCH          reduce using rule 41 (Exp -> DeclArray .)
    NEG             reduce using rule 41 (Exp -> DeclArray .)
    SUB             reduce using rule 41 (Exp -> DeclArray .)
    (               reduce using rule 41 (Exp -> DeclArray .)
    NUM             reduce using rule 41 (Exp -> DeclArray .)
    )               reduce using rule 41 (Exp -> DeclArray .)


state 15

    (42) Exp -> DeclAtrib .

    ;               reduce using rule 42 (Exp -> DeclAtrib .)
    {               reduce using rule 42 (Exp -> DeclAtrib .)
    ID              reduce using rule 42 (Exp -> DeclAtrib .)
    IF              reduce using rule 42 (Exp -> DeclAtrib .)
    WHILE           reduce using rule 42 (Exp -> DeclAtrib .)
    SWITCH          reduce using rule 42 (Exp -> DeclAtrib .)
    NEG             reduce using rule 42 (Exp -> DeclAtrib .)
    SUB             reduce using rule 42 (Exp -> DeclAtrib .)
    (               reduce using rule 42 (Exp -> DeclAtrib .)
    NUM             reduce using rule 42 (Exp -> DeclAtrib .)
    )               reduce using rule 42 (Exp -> DeclAtrib .)


state 16

    (23) If -> IfScope . Exp Body
    (25) IfElse -> IfScope . Exp Body ElseScope Body
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 38
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Exp                            shift and go to state 47
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 17

    (27) While -> WhileScope . ( Exp ) Body

    (               shift and go to state 48


state 18

    (76) Base -> ( . AtribOp )
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 49
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 19

    (29) Switch -> SwitchScope . Conds { Cases }
    (30) Conds -> . Conds , Cond
    (31) Conds -> . Cond
    (32) Cond -> . ID ( AtribOp )
    (33) Cond -> . ( AtribOp )

    ID              shift and go to state 55
    (               shift and go to state 56

    Conds                          shift and go to state 53
    Cond                           shift and go to state 54

state 20

    (59) Atrib -> AtribOp . RARROW ID
    (54) DeclAtrib -> AtribOp . RARROW ID ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize
    (56) AtribNum -> AtribOp . LARROW ID

    RARROW          shift and go to state 57
    LARROW          shift and go to state 58


state 21

    (61) Atrib -> AtribArray .
    (57) AtribNum -> AtribArray .

    ;               reduce using rule 61 (Atrib -> AtribArray .)
    {               reduce using rule 61 (Atrib -> AtribArray .)
    ID              reduce using rule 61 (Atrib -> AtribArray .)
    IF              reduce using rule 61 (Atrib -> AtribArray .)
    WHILE           reduce using rule 61 (Atrib -> AtribArray .)
    SWITCH          reduce using rule 61 (Atrib -> AtribArray .)
    NEG             reduce using rule 61 (Atrib -> AtribArray .)
    SUB             reduce using rule 61 (Atrib -> AtribArray .)
    (               reduce using rule 61 (Atrib -> AtribArray .)
    NUM             reduce using rule 61 (Atrib -> AtribArray .)
    )               reduce using rule 61 (Atrib -> AtribArray .)
    RARROW          reduce using rule 57 (AtribNum -> AtribArray .)
    LARROW          reduce using rule 57 (AtribNum -> AtribArray .)


state 22

    (62) Op -> OpUno .

    ;               reduce using rule 62 (Op -> OpUno .)
    RARROW          reduce using rule 62 (Op -> OpUno .)
    LARROW          reduce using rule 62 (Op -> OpUno .)
    {               reduce using rule 62 (Op -> OpUno .)
    ID              reduce using rule 62 (Op -> OpUno .)
    IF              reduce using rule 62 (Op -> OpUno .)
    WHILE           reduce using rule 62 (Op -> OpUno .)
    SWITCH          reduce using rule 62 (Op -> OpUno .)
    NEG             reduce using rule 62 (Op -> OpUno .)
    SUB             reduce using rule 62 (Op -> OpUno .)
    (               reduce using rule 62 (Op -> OpUno .)
    NUM             reduce using rule 62 (Op -> OpUno .)
    )               reduce using rule 62 (Op -> OpUno .)
    ,               reduce using rule 62 (Op -> OpUno .)
    ]               reduce using rule 62 (Op -> OpUno .)


state 23

    (63) Op -> OpBin .
    (68) OpBin -> OpBin . OpLogico TermPlus
    (85) OpLogico -> . AND
    (86) OpLogico -> . OR
    (87) OpLogico -> . LESSER
    (88) OpLogico -> . GREATER
    (89) OpLogico -> . LEQ
    (90) OpLogico -> . GEQ
    (91) OpLogico -> . EQUAL

    ;               reduce using rule 63 (Op -> OpBin .)
    RARROW          reduce using rule 63 (Op -> OpBin .)
    LARROW          reduce using rule 63 (Op -> OpBin .)
    {               reduce using rule 63 (Op -> OpBin .)
    ID              reduce using rule 63 (Op -> OpBin .)
    IF              reduce using rule 63 (Op -> OpBin .)
    WHILE           reduce using rule 63 (Op -> OpBin .)
    SWITCH          reduce using rule 63 (Op -> OpBin .)
    NEG             reduce using rule 63 (Op -> OpBin .)
    SUB             reduce using rule 63 (Op -> OpBin .)
    (               reduce using rule 63 (Op -> OpBin .)
    NUM             reduce using rule 63 (Op -> OpBin .)
    )               reduce using rule 63 (Op -> OpBin .)
    ,               reduce using rule 63 (Op -> OpBin .)
    ]               reduce using rule 63 (Op -> OpBin .)
    AND             shift and go to state 60
    OR              shift and go to state 61
    LESSER          shift and go to state 62
    GREATER         shift and go to state 63
    LEQ             shift and go to state 64
    GEQ             shift and go to state 65
    EQUAL           shift and go to state 66

    OpLogico                       shift and go to state 59

state 24

    (22) IfScope -> IF .

    ID              reduce using rule 22 (IfScope -> IF .)
    NEG             reduce using rule 22 (IfScope -> IF .)
    SUB             reduce using rule 22 (IfScope -> IF .)
    (               reduce using rule 22 (IfScope -> IF .)
    NUM             reduce using rule 22 (IfScope -> IF .)


state 25

    (26) WhileScope -> WHILE .

    (               reduce using rule 26 (WhileScope -> WHILE .)


state 26

    (28) SwitchScope -> SWITCH .

    ID              reduce using rule 28 (SwitchScope -> SWITCH .)
    (               reduce using rule 28 (SwitchScope -> SWITCH .)


state 27

    (43) AtribOp -> AtribNum .

    RARROW          reduce using rule 43 (AtribOp -> AtribNum .)
    LARROW          reduce using rule 43 (AtribOp -> AtribNum .)
    )               reduce using rule 43 (AtribOp -> AtribNum .)
    ;               reduce using rule 43 (AtribOp -> AtribNum .)
    {               reduce using rule 43 (AtribOp -> AtribNum .)
    ID              reduce using rule 43 (AtribOp -> AtribNum .)
    IF              reduce using rule 43 (AtribOp -> AtribNum .)
    WHILE           reduce using rule 43 (AtribOp -> AtribNum .)
    SWITCH          reduce using rule 43 (AtribOp -> AtribNum .)
    NEG             reduce using rule 43 (AtribOp -> AtribNum .)
    SUB             reduce using rule 43 (AtribOp -> AtribNum .)
    (               reduce using rule 43 (AtribOp -> AtribNum .)
    NUM             reduce using rule 43 (AtribOp -> AtribNum .)
    ,               reduce using rule 43 (AtribOp -> AtribNum .)
    ]               reduce using rule 43 (AtribOp -> AtribNum .)


state 28

    (64) OpUno -> NEG . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 67
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 29

    (65) OpUno -> AccessArray .

    ;               reduce using rule 65 (OpUno -> AccessArray .)
    RARROW          reduce using rule 65 (OpUno -> AccessArray .)
    LARROW          reduce using rule 65 (OpUno -> AccessArray .)
    {               reduce using rule 65 (OpUno -> AccessArray .)
    ID              reduce using rule 65 (OpUno -> AccessArray .)
    IF              reduce using rule 65 (OpUno -> AccessArray .)
    WHILE           reduce using rule 65 (OpUno -> AccessArray .)
    SWITCH          reduce using rule 65 (OpUno -> AccessArray .)
    NEG             reduce using rule 65 (OpUno -> AccessArray .)
    SUB             reduce using rule 65 (OpUno -> AccessArray .)
    (               reduce using rule 65 (OpUno -> AccessArray .)
    NUM             reduce using rule 65 (OpUno -> AccessArray .)
    )               reduce using rule 65 (OpUno -> AccessArray .)
    ,               reduce using rule 65 (OpUno -> AccessArray .)
    ]               reduce using rule 65 (OpUno -> AccessArray .)


state 30

    (66) OpUno -> SUB . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 68
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 31

    (69) OpBin -> TermPlus .
    (70) TermPlus -> TermPlus . OpPlus TermMult
    (92) OpPlus -> . ADD
    (93) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 69 (OpBin -> TermPlus .)
    OR              reduce using rule 69 (OpBin -> TermPlus .)
    LESSER          reduce using rule 69 (OpBin -> TermPlus .)
    GREATER         reduce using rule 69 (OpBin -> TermPlus .)
    LEQ             reduce using rule 69 (OpBin -> TermPlus .)
    GEQ             reduce using rule 69 (OpBin -> TermPlus .)
    EQUAL           reduce using rule 69 (OpBin -> TermPlus .)
    ;               reduce using rule 69 (OpBin -> TermPlus .)
    RARROW          reduce using rule 69 (OpBin -> TermPlus .)
    LARROW          reduce using rule 69 (OpBin -> TermPlus .)
    {               reduce using rule 69 (OpBin -> TermPlus .)
    ID              reduce using rule 69 (OpBin -> TermPlus .)
    IF              reduce using rule 69 (OpBin -> TermPlus .)
    WHILE           reduce using rule 69 (OpBin -> TermPlus .)
    SWITCH          reduce using rule 69 (OpBin -> TermPlus .)
    NEG             reduce using rule 69 (OpBin -> TermPlus .)
    (               reduce using rule 69 (OpBin -> TermPlus .)
    NUM             reduce using rule 69 (OpBin -> TermPlus .)
    )               reduce using rule 69 (OpBin -> TermPlus .)
    ,               reduce using rule 69 (OpBin -> TermPlus .)
    ]               reduce using rule 69 (OpBin -> TermPlus .)
    ADD             shift and go to state 70
    SUB             shift and go to state 71

  ! SUB             [ reduce using rule 69 (OpBin -> TermPlus .) ]

    OpPlus                         shift and go to state 69

state 32

    (71) TermPlus -> TermMult .
    (72) TermMult -> TermMult . OpMult TermPow
    (94) OpMult -> . MUL
    (95) OpMult -> . DIV

    ADD             reduce using rule 71 (TermPlus -> TermMult .)
    SUB             reduce using rule 71 (TermPlus -> TermMult .)
    AND             reduce using rule 71 (TermPlus -> TermMult .)
    OR              reduce using rule 71 (TermPlus -> TermMult .)
    LESSER          reduce using rule 71 (TermPlus -> TermMult .)
    GREATER         reduce using rule 71 (TermPlus -> TermMult .)
    LEQ             reduce using rule 71 (TermPlus -> TermMult .)
    GEQ             reduce using rule 71 (TermPlus -> TermMult .)
    EQUAL           reduce using rule 71 (TermPlus -> TermMult .)
    ;               reduce using rule 71 (TermPlus -> TermMult .)
    RARROW          reduce using rule 71 (TermPlus -> TermMult .)
    LARROW          reduce using rule 71 (TermPlus -> TermMult .)
    {               reduce using rule 71 (TermPlus -> TermMult .)
    ID              reduce using rule 71 (TermPlus -> TermMult .)
    IF              reduce using rule 71 (TermPlus -> TermMult .)
    WHILE           reduce using rule 71 (TermPlus -> TermMult .)
    SWITCH          reduce using rule 71 (TermPlus -> TermMult .)
    NEG             reduce using rule 71 (TermPlus -> TermMult .)
    (               reduce using rule 71 (TermPlus -> TermMult .)
    NUM             reduce using rule 71 (TermPlus -> TermMult .)
    )               reduce using rule 71 (TermPlus -> TermMult .)
    ,               reduce using rule 71 (TermPlus -> TermMult .)
    ]               reduce using rule 71 (TermPlus -> TermMult .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

    OpMult                         shift and go to state 72

state 33

    (73) TermMult -> TermPow .
    (74) TermPow -> TermPow . OpPow Base
    (96) OpPow -> . POW

    MUL             reduce using rule 73 (TermMult -> TermPow .)
    DIV             reduce using rule 73 (TermMult -> TermPow .)
    ADD             reduce using rule 73 (TermMult -> TermPow .)
    SUB             reduce using rule 73 (TermMult -> TermPow .)
    AND             reduce using rule 73 (TermMult -> TermPow .)
    OR              reduce using rule 73 (TermMult -> TermPow .)
    LESSER          reduce using rule 73 (TermMult -> TermPow .)
    GREATER         reduce using rule 73 (TermMult -> TermPow .)
    LEQ             reduce using rule 73 (TermMult -> TermPow .)
    GEQ             reduce using rule 73 (TermMult -> TermPow .)
    EQUAL           reduce using rule 73 (TermMult -> TermPow .)
    ;               reduce using rule 73 (TermMult -> TermPow .)
    RARROW          reduce using rule 73 (TermMult -> TermPow .)
    LARROW          reduce using rule 73 (TermMult -> TermPow .)
    {               reduce using rule 73 (TermMult -> TermPow .)
    ID              reduce using rule 73 (TermMult -> TermPow .)
    IF              reduce using rule 73 (TermMult -> TermPow .)
    WHILE           reduce using rule 73 (TermMult -> TermPow .)
    SWITCH          reduce using rule 73 (TermMult -> TermPow .)
    NEG             reduce using rule 73 (TermMult -> TermPow .)
    (               reduce using rule 73 (TermMult -> TermPow .)
    NUM             reduce using rule 73 (TermMult -> TermPow .)
    )               reduce using rule 73 (TermMult -> TermPow .)
    ,               reduce using rule 73 (TermMult -> TermPow .)
    ]               reduce using rule 73 (TermMult -> TermPow .)
    POW             shift and go to state 76

    OpPow                          shift and go to state 75

state 34

    (75) TermPow -> Base .

    POW             reduce using rule 75 (TermPow -> Base .)
    MUL             reduce using rule 75 (TermPow -> Base .)
    DIV             reduce using rule 75 (TermPow -> Base .)
    ADD             reduce using rule 75 (TermPow -> Base .)
    SUB             reduce using rule 75 (TermPow -> Base .)
    AND             reduce using rule 75 (TermPow -> Base .)
    OR              reduce using rule 75 (TermPow -> Base .)
    LESSER          reduce using rule 75 (TermPow -> Base .)
    GREATER         reduce using rule 75 (TermPow -> Base .)
    LEQ             reduce using rule 75 (TermPow -> Base .)
    GEQ             reduce using rule 75 (TermPow -> Base .)
    EQUAL           reduce using rule 75 (TermPow -> Base .)
    ;               reduce using rule 75 (TermPow -> Base .)
    RARROW          reduce using rule 75 (TermPow -> Base .)
    LARROW          reduce using rule 75 (TermPow -> Base .)
    {               reduce using rule 75 (TermPow -> Base .)
    ID              reduce using rule 75 (TermPow -> Base .)
    IF              reduce using rule 75 (TermPow -> Base .)
    WHILE           reduce using rule 75 (TermPow -> Base .)
    SWITCH          reduce using rule 75 (TermPow -> Base .)
    NEG             reduce using rule 75 (TermPow -> Base .)
    (               reduce using rule 75 (TermPow -> Base .)
    NUM             reduce using rule 75 (TermPow -> Base .)
    )               reduce using rule 75 (TermPow -> Base .)
    ,               reduce using rule 75 (TermPow -> Base .)
    ]               reduce using rule 75 (TermPow -> Base .)


state 35

    (78) Base -> NUM .

    POW             reduce using rule 78 (Base -> NUM .)
    MUL             reduce using rule 78 (Base -> NUM .)
    DIV             reduce using rule 78 (Base -> NUM .)
    ADD             reduce using rule 78 (Base -> NUM .)
    SUB             reduce using rule 78 (Base -> NUM .)
    AND             reduce using rule 78 (Base -> NUM .)
    OR              reduce using rule 78 (Base -> NUM .)
    LESSER          reduce using rule 78 (Base -> NUM .)
    GREATER         reduce using rule 78 (Base -> NUM .)
    LEQ             reduce using rule 78 (Base -> NUM .)
    GEQ             reduce using rule 78 (Base -> NUM .)
    EQUAL           reduce using rule 78 (Base -> NUM .)
    ;               reduce using rule 78 (Base -> NUM .)
    RARROW          reduce using rule 78 (Base -> NUM .)
    LARROW          reduce using rule 78 (Base -> NUM .)
    {               reduce using rule 78 (Base -> NUM .)
    ID              reduce using rule 78 (Base -> NUM .)
    IF              reduce using rule 78 (Base -> NUM .)
    WHILE           reduce using rule 78 (Base -> NUM .)
    SWITCH          reduce using rule 78 (Base -> NUM .)
    NEG             reduce using rule 78 (Base -> NUM .)
    (               reduce using rule 78 (Base -> NUM .)
    NUM             reduce using rule 78 (Base -> NUM .)
    )               reduce using rule 78 (Base -> NUM .)
    ,               reduce using rule 78 (Base -> NUM .)
    ]               reduce using rule 78 (Base -> NUM .)


state 36

    (79) Base -> FunCall .

    POW             reduce using rule 79 (Base -> FunCall .)
    MUL             reduce using rule 79 (Base -> FunCall .)
    DIV             reduce using rule 79 (Base -> FunCall .)
    ADD             reduce using rule 79 (Base -> FunCall .)
    SUB             reduce using rule 79 (Base -> FunCall .)
    AND             reduce using rule 79 (Base -> FunCall .)
    OR              reduce using rule 79 (Base -> FunCall .)
    LESSER          reduce using rule 79 (Base -> FunCall .)
    GREATER         reduce using rule 79 (Base -> FunCall .)
    LEQ             reduce using rule 79 (Base -> FunCall .)
    GEQ             reduce using rule 79 (Base -> FunCall .)
    EQUAL           reduce using rule 79 (Base -> FunCall .)
    ;               reduce using rule 79 (Base -> FunCall .)
    RARROW          reduce using rule 79 (Base -> FunCall .)
    LARROW          reduce using rule 79 (Base -> FunCall .)
    {               reduce using rule 79 (Base -> FunCall .)
    ID              reduce using rule 79 (Base -> FunCall .)
    IF              reduce using rule 79 (Base -> FunCall .)
    WHILE           reduce using rule 79 (Base -> FunCall .)
    SWITCH          reduce using rule 79 (Base -> FunCall .)
    NEG             reduce using rule 79 (Base -> FunCall .)
    (               reduce using rule 79 (Base -> FunCall .)
    NUM             reduce using rule 79 (Base -> FunCall .)
    )               reduce using rule 79 (Base -> FunCall .)
    ,               reduce using rule 79 (Base -> FunCall .)
    ]               reduce using rule 79 (Base -> FunCall .)


state 37

    (4) Code -> Code Block .

    ID              reduce using rule 4 (Code -> Code Block .)
    IF              reduce using rule 4 (Code -> Code Block .)
    WHILE           reduce using rule 4 (Code -> Code Block .)
    SWITCH          reduce using rule 4 (Code -> Code Block .)
    NEG             reduce using rule 4 (Code -> Code Block .)
    SUB             reduce using rule 4 (Code -> Code Block .)
    (               reduce using rule 4 (Code -> Code Block .)
    NUM             reduce using rule 4 (Code -> Code Block .)
    $end            reduce using rule 4 (Code -> Code Block .)
    }               reduce using rule 4 (Code -> Code Block .)


state 38

    (58) Atrib -> ID . LARROW AtribOp
    (60) Atrib -> ID . SWAP ID
    (45) Decl -> ID . ID
    (46) DeclArray -> ID . ID DeclArraySize
    (53) DeclAtrib -> ID . ID LARROW AtribOp
    (49) AtribArray -> ID . ArraySize LARROW AtribOp
    (55) AtribNum -> ID . LARROW AtribOp
    (67) AccessArray -> ID . ArraySize
    (77) Base -> ID .
    (80) FunCall -> ID . ( FunArg )
    (51) ArraySize -> . ArraySize [ AtribOp ]
    (52) ArraySize -> .

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for LARROW resolved as shift
  ! reduce/reduce conflict for ; resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for RARROW resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for { resolved using rule 52 (ArraySize -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for SWITCH resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for NEG resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for SUB resolved using rule 52 (ArraySize -> .)
  ! shift/reduce conflict for ( resolved as shift
  ! reduce/reduce conflict for NUM resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for ) resolved using rule 52 (ArraySize -> .)
    LARROW          shift and go to state 41
    SWAP            shift and go to state 42
    ID              shift and go to state 39
    POW             reduce using rule 77 (Base -> ID .)
    MUL             reduce using rule 77 (Base -> ID .)
    DIV             reduce using rule 77 (Base -> ID .)
    ADD             reduce using rule 77 (Base -> ID .)
    AND             reduce using rule 77 (Base -> ID .)
    OR              reduce using rule 77 (Base -> ID .)
    LESSER          reduce using rule 77 (Base -> ID .)
    GREATER         reduce using rule 77 (Base -> ID .)
    LEQ             reduce using rule 77 (Base -> ID .)
    GEQ             reduce using rule 77 (Base -> ID .)
    EQUAL           reduce using rule 77 (Base -> ID .)
    (               shift and go to state 44
    [               reduce using rule 52 (ArraySize -> .)
    ;               reduce using rule 52 (ArraySize -> .)
    RARROW          reduce using rule 52 (ArraySize -> .)
    {               reduce using rule 52 (ArraySize -> .)
    IF              reduce using rule 52 (ArraySize -> .)
    WHILE           reduce using rule 52 (ArraySize -> .)
    SWITCH          reduce using rule 52 (ArraySize -> .)
    NEG             reduce using rule 52 (ArraySize -> .)
    SUB             reduce using rule 52 (ArraySize -> .)
    NUM             reduce using rule 52 (ArraySize -> .)
    )               reduce using rule 52 (ArraySize -> .)

  ! SUB             [ reduce using rule 77 (Base -> ID .) ]
  ! ;               [ reduce using rule 77 (Base -> ID .) ]
  ! RARROW          [ reduce using rule 77 (Base -> ID .) ]
  ! LARROW          [ reduce using rule 77 (Base -> ID .) ]
  ! {               [ reduce using rule 77 (Base -> ID .) ]
  ! ID              [ reduce using rule 77 (Base -> ID .) ]
  ! IF              [ reduce using rule 77 (Base -> ID .) ]
  ! WHILE           [ reduce using rule 77 (Base -> ID .) ]
  ! SWITCH          [ reduce using rule 77 (Base -> ID .) ]
  ! NEG             [ reduce using rule 77 (Base -> ID .) ]
  ! (               [ reduce using rule 77 (Base -> ID .) ]
  ! NUM             [ reduce using rule 77 (Base -> ID .) ]
  ! )               [ reduce using rule 77 (Base -> ID .) ]
  ! LARROW          [ reduce using rule 52 (ArraySize -> .) ]
  ! ID              [ reduce using rule 52 (ArraySize -> .) ]
  ! (               [ reduce using rule 52 (ArraySize -> .) ]

    ArraySize                      shift and go to state 43

state 39

    (45) Decl -> ID ID .
    (46) DeclArray -> ID ID . DeclArraySize
    (53) DeclAtrib -> ID ID . LARROW AtribOp
    (47) DeclArraySize -> . DeclArraySize [ NUM ]
    (48) DeclArraySize -> .

  ! reduce/reduce conflict for ; resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for { resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for ID resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for IF resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for NEG resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for SUB resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for ( resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for NUM resolved using rule 45 (Decl -> ID ID .)
  ! reduce/reduce conflict for ) resolved using rule 45 (Decl -> ID ID .)
    ;               reduce using rule 45 (Decl -> ID ID .)
    {               reduce using rule 45 (Decl -> ID ID .)
    ID              reduce using rule 45 (Decl -> ID ID .)
    IF              reduce using rule 45 (Decl -> ID ID .)
    WHILE           reduce using rule 45 (Decl -> ID ID .)
    SWITCH          reduce using rule 45 (Decl -> ID ID .)
    NEG             reduce using rule 45 (Decl -> ID ID .)
    SUB             reduce using rule 45 (Decl -> ID ID .)
    (               reduce using rule 45 (Decl -> ID ID .)
    NUM             reduce using rule 45 (Decl -> ID ID .)
    )               reduce using rule 45 (Decl -> ID ID .)
    LARROW          shift and go to state 78
    [               reduce using rule 48 (DeclArraySize -> .)

  ! ;               [ reduce using rule 48 (DeclArraySize -> .) ]
  ! {               [ reduce using rule 48 (DeclArraySize -> .) ]
  ! ID              [ reduce using rule 48 (DeclArraySize -> .) ]
  ! IF              [ reduce using rule 48 (DeclArraySize -> .) ]
  ! WHILE           [ reduce using rule 48 (DeclArraySize -> .) ]
  ! SWITCH          [ reduce using rule 48 (DeclArraySize -> .) ]
  ! NEG             [ reduce using rule 48 (DeclArraySize -> .) ]
  ! SUB             [ reduce using rule 48 (DeclArraySize -> .) ]
  ! (               [ reduce using rule 48 (DeclArraySize -> .) ]
  ! NUM             [ reduce using rule 48 (DeclArraySize -> .) ]
  ! )               [ reduce using rule 48 (DeclArraySize -> .) ]

    DeclArraySize                  shift and go to state 77

state 40

    (14) Function -> ID FunScope . FunCases Body
    (16) FunCases -> . FunExtra RARROW ID
    (17) FunCases -> . RARROW ID
    (18) FunCases -> . FunExtra
    (19) FunCases -> .
    (20) FunExtra -> . FunExtra , ID
    (21) FunExtra -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RARROW          shift and go to state 82
    {               reduce using rule 19 (FunCases -> .)
    IF              reduce using rule 19 (FunCases -> .)
    WHILE           reduce using rule 19 (FunCases -> .)
    SWITCH          reduce using rule 19 (FunCases -> .)
    NEG             reduce using rule 19 (FunCases -> .)
    SUB             reduce using rule 19 (FunCases -> .)
    (               reduce using rule 19 (FunCases -> .)
    NUM             reduce using rule 19 (FunCases -> .)
    ID              shift and go to state 79

  ! ID              [ reduce using rule 19 (FunCases -> .) ]

    FunCases                       shift and go to state 80
    FunExtra                       shift and go to state 81

state 41

    (58) Atrib -> ID LARROW . AtribOp
    (55) AtribNum -> ID LARROW . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 83
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 42

    (60) Atrib -> ID SWAP . ID

    ID              shift and go to state 84


state 43

    (49) AtribArray -> ID ArraySize . LARROW AtribOp
    (67) AccessArray -> ID ArraySize .
    (51) ArraySize -> ArraySize . [ AtribOp ]

  ! shift/reduce conflict for LARROW resolved as shift
    LARROW          shift and go to state 85
    ;               reduce using rule 67 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 67 (AccessArray -> ID ArraySize .)
    {               reduce using rule 67 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 67 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 67 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 67 (AccessArray -> ID ArraySize .)
    SWITCH          reduce using rule 67 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 67 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 67 (AccessArray -> ID ArraySize .)
    (               reduce using rule 67 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 67 (AccessArray -> ID ArraySize .)
    )               reduce using rule 67 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 67 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 67 (AccessArray -> ID ArraySize .)
    [               shift and go to state 86

  ! LARROW          [ reduce using rule 67 (AccessArray -> ID ArraySize .) ]


state 44

    (80) FunCall -> ID ( . FunArg )
    (81) FunArg -> . FunRec
    (82) FunArg -> .
    (83) FunRec -> . FunRec , AtribOp
    (84) FunRec -> . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    )               reduce using rule 82 (FunArg -> .)
    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    FunArg                         shift and go to state 87
    FunRec                         shift and go to state 88
    AtribOp                        shift and go to state 89
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 45

    (15) FunScope -> : .

    RARROW          reduce using rule 15 (FunScope -> : .)
    ID              reduce using rule 15 (FunScope -> : .)
    {               reduce using rule 15 (FunScope -> : .)
    IF              reduce using rule 15 (FunScope -> : .)
    WHILE           reduce using rule 15 (FunScope -> : .)
    SWITCH          reduce using rule 15 (FunScope -> : .)
    NEG             reduce using rule 15 (FunScope -> : .)
    SUB             reduce using rule 15 (FunScope -> : .)
    (               reduce using rule 15 (FunScope -> : .)
    NUM             reduce using rule 15 (FunScope -> : .)


state 46

    (6) Block -> Exp ; .

    ID              reduce using rule 6 (Block -> Exp ; .)
    IF              reduce using rule 6 (Block -> Exp ; .)
    WHILE           reduce using rule 6 (Block -> Exp ; .)
    SWITCH          reduce using rule 6 (Block -> Exp ; .)
    NEG             reduce using rule 6 (Block -> Exp ; .)
    SUB             reduce using rule 6 (Block -> Exp ; .)
    (               reduce using rule 6 (Block -> Exp ; .)
    NUM             reduce using rule 6 (Block -> Exp ; .)
    $end            reduce using rule 6 (Block -> Exp ; .)
    ELSE            reduce using rule 6 (Block -> Exp ; .)
    }               reduce using rule 6 (Block -> Exp ; .)
    :               reduce using rule 6 (Block -> Exp ; .)


state 47

    (23) If -> IfScope Exp . Body
    (25) IfElse -> IfScope Exp . Body ElseScope Body
    (11) Body -> . { }
    (12) Body -> . Block
    (13) Body -> . { Code }
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    {               shift and go to state 91
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    IfScope                        shift and go to state 16
    Exp                            shift and go to state 6
    Body                           shift and go to state 90
    Block                          shift and go to state 92
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 48

    (27) While -> WhileScope ( . Exp ) Body
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 38
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Exp                            shift and go to state 93
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 49

    (76) Base -> ( AtribOp . )
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 94
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95


state 50

    (44) AtribOp -> Op .

    )               reduce using rule 44 (AtribOp -> Op .)
    LARROW          reduce using rule 44 (AtribOp -> Op .)
    RARROW          reduce using rule 44 (AtribOp -> Op .)
    ;               reduce using rule 44 (AtribOp -> Op .)
    {               reduce using rule 44 (AtribOp -> Op .)
    ID              reduce using rule 44 (AtribOp -> Op .)
    IF              reduce using rule 44 (AtribOp -> Op .)
    WHILE           reduce using rule 44 (AtribOp -> Op .)
    SWITCH          reduce using rule 44 (AtribOp -> Op .)
    NEG             reduce using rule 44 (AtribOp -> Op .)
    SUB             reduce using rule 44 (AtribOp -> Op .)
    (               reduce using rule 44 (AtribOp -> Op .)
    NUM             reduce using rule 44 (AtribOp -> Op .)
    ,               reduce using rule 44 (AtribOp -> Op .)
    ]               reduce using rule 44 (AtribOp -> Op .)


state 51

    (55) AtribNum -> ID . LARROW AtribOp
    (49) AtribArray -> ID . ArraySize LARROW AtribOp
    (67) AccessArray -> ID . ArraySize
    (77) Base -> ID .
    (80) FunCall -> ID . ( FunArg )
    (51) ArraySize -> . ArraySize [ AtribOp ]
    (52) ArraySize -> .

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for LARROW resolved as shift
  ! reduce/reduce conflict for ) resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for RARROW resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for ; resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for { resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for ID resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for IF resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for SWITCH resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for NEG resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for SUB resolved using rule 52 (ArraySize -> .)
  ! shift/reduce conflict for ( resolved as shift
  ! reduce/reduce conflict for NUM resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for , resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for ] resolved using rule 52 (ArraySize -> .)
    LARROW          shift and go to state 96
    POW             reduce using rule 77 (Base -> ID .)
    MUL             reduce using rule 77 (Base -> ID .)
    DIV             reduce using rule 77 (Base -> ID .)
    ADD             reduce using rule 77 (Base -> ID .)
    AND             reduce using rule 77 (Base -> ID .)
    OR              reduce using rule 77 (Base -> ID .)
    LESSER          reduce using rule 77 (Base -> ID .)
    GREATER         reduce using rule 77 (Base -> ID .)
    LEQ             reduce using rule 77 (Base -> ID .)
    GEQ             reduce using rule 77 (Base -> ID .)
    EQUAL           reduce using rule 77 (Base -> ID .)
    (               shift and go to state 44
    [               reduce using rule 52 (ArraySize -> .)
    )               reduce using rule 52 (ArraySize -> .)
    RARROW          reduce using rule 52 (ArraySize -> .)
    ;               reduce using rule 52 (ArraySize -> .)
    {               reduce using rule 52 (ArraySize -> .)
    ID              reduce using rule 52 (ArraySize -> .)
    IF              reduce using rule 52 (ArraySize -> .)
    WHILE           reduce using rule 52 (ArraySize -> .)
    SWITCH          reduce using rule 52 (ArraySize -> .)
    NEG             reduce using rule 52 (ArraySize -> .)
    SUB             reduce using rule 52 (ArraySize -> .)
    NUM             reduce using rule 52 (ArraySize -> .)
    ,               reduce using rule 52 (ArraySize -> .)
    ]               reduce using rule 52 (ArraySize -> .)

  ! SUB             [ reduce using rule 77 (Base -> ID .) ]
  ! )               [ reduce using rule 77 (Base -> ID .) ]
  ! LARROW          [ reduce using rule 77 (Base -> ID .) ]
  ! RARROW          [ reduce using rule 77 (Base -> ID .) ]
  ! ;               [ reduce using rule 77 (Base -> ID .) ]
  ! {               [ reduce using rule 77 (Base -> ID .) ]
  ! ID              [ reduce using rule 77 (Base -> ID .) ]
  ! IF              [ reduce using rule 77 (Base -> ID .) ]
  ! WHILE           [ reduce using rule 77 (Base -> ID .) ]
  ! SWITCH          [ reduce using rule 77 (Base -> ID .) ]
  ! NEG             [ reduce using rule 77 (Base -> ID .) ]
  ! (               [ reduce using rule 77 (Base -> ID .) ]
  ! NUM             [ reduce using rule 77 (Base -> ID .) ]
  ! ,               [ reduce using rule 77 (Base -> ID .) ]
  ! ]               [ reduce using rule 77 (Base -> ID .) ]
  ! LARROW          [ reduce using rule 52 (ArraySize -> .) ]
  ! (               [ reduce using rule 52 (ArraySize -> .) ]

    ArraySize                      shift and go to state 43

state 52

    (57) AtribNum -> AtribArray .

    )               reduce using rule 57 (AtribNum -> AtribArray .)
    LARROW          reduce using rule 57 (AtribNum -> AtribArray .)
    RARROW          reduce using rule 57 (AtribNum -> AtribArray .)
    ;               reduce using rule 57 (AtribNum -> AtribArray .)
    {               reduce using rule 57 (AtribNum -> AtribArray .)
    ID              reduce using rule 57 (AtribNum -> AtribArray .)
    IF              reduce using rule 57 (AtribNum -> AtribArray .)
    WHILE           reduce using rule 57 (AtribNum -> AtribArray .)
    SWITCH          reduce using rule 57 (AtribNum -> AtribArray .)
    NEG             reduce using rule 57 (AtribNum -> AtribArray .)
    SUB             reduce using rule 57 (AtribNum -> AtribArray .)
    (               reduce using rule 57 (AtribNum -> AtribArray .)
    NUM             reduce using rule 57 (AtribNum -> AtribArray .)
    ,               reduce using rule 57 (AtribNum -> AtribArray .)
    ]               reduce using rule 57 (AtribNum -> AtribArray .)


state 53

    (29) Switch -> SwitchScope Conds . { Cases }
    (30) Conds -> Conds . , Cond

    {               shift and go to state 97
    ,               shift and go to state 98


state 54

    (31) Conds -> Cond .

    {               reduce using rule 31 (Conds -> Cond .)
    ,               reduce using rule 31 (Conds -> Cond .)


state 55

    (32) Cond -> ID . ( AtribOp )

    (               shift and go to state 99


state 56

    (33) Cond -> ( . AtribOp )
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 100
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 57

    (59) Atrib -> AtribOp RARROW . ID
    (54) DeclAtrib -> AtribOp RARROW . ID ID
    (50) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 101


state 58

    (56) AtribNum -> AtribOp LARROW . ID

    ID              shift and go to state 102


state 59

    (68) OpBin -> OpBin OpLogico . TermPlus
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    (               shift and go to state 18
    ID              shift and go to state 104
    NUM             shift and go to state 35

    TermPlus                       shift and go to state 103
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 60

    (85) OpLogico -> AND .

    (               reduce using rule 85 (OpLogico -> AND .)
    ID              reduce using rule 85 (OpLogico -> AND .)
    NUM             reduce using rule 85 (OpLogico -> AND .)


state 61

    (86) OpLogico -> OR .

    (               reduce using rule 86 (OpLogico -> OR .)
    ID              reduce using rule 86 (OpLogico -> OR .)
    NUM             reduce using rule 86 (OpLogico -> OR .)


state 62

    (87) OpLogico -> LESSER .

    (               reduce using rule 87 (OpLogico -> LESSER .)
    ID              reduce using rule 87 (OpLogico -> LESSER .)
    NUM             reduce using rule 87 (OpLogico -> LESSER .)


state 63

    (88) OpLogico -> GREATER .

    (               reduce using rule 88 (OpLogico -> GREATER .)
    ID              reduce using rule 88 (OpLogico -> GREATER .)
    NUM             reduce using rule 88 (OpLogico -> GREATER .)


state 64

    (89) OpLogico -> LEQ .

    (               reduce using rule 89 (OpLogico -> LEQ .)
    ID              reduce using rule 89 (OpLogico -> LEQ .)
    NUM             reduce using rule 89 (OpLogico -> LEQ .)


state 65

    (90) OpLogico -> GEQ .

    (               reduce using rule 90 (OpLogico -> GEQ .)
    ID              reduce using rule 90 (OpLogico -> GEQ .)
    NUM             reduce using rule 90 (OpLogico -> GEQ .)


state 66

    (91) OpLogico -> EQUAL .

    (               reduce using rule 91 (OpLogico -> EQUAL .)
    ID              reduce using rule 91 (OpLogico -> EQUAL .)
    NUM             reduce using rule 91 (OpLogico -> EQUAL .)


state 67

    (64) OpUno -> NEG AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 64 (OpUno -> NEG AtribOp .)
    {               reduce using rule 64 (OpUno -> NEG AtribOp .)
    ID              reduce using rule 64 (OpUno -> NEG AtribOp .)
    IF              reduce using rule 64 (OpUno -> NEG AtribOp .)
    WHILE           reduce using rule 64 (OpUno -> NEG AtribOp .)
    SWITCH          reduce using rule 64 (OpUno -> NEG AtribOp .)
    NEG             reduce using rule 64 (OpUno -> NEG AtribOp .)
    SUB             reduce using rule 64 (OpUno -> NEG AtribOp .)
    (               reduce using rule 64 (OpUno -> NEG AtribOp .)
    NUM             reduce using rule 64 (OpUno -> NEG AtribOp .)
    )               reduce using rule 64 (OpUno -> NEG AtribOp .)
    ,               reduce using rule 64 (OpUno -> NEG AtribOp .)
    ]               reduce using rule 64 (OpUno -> NEG AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95

  ! RARROW          [ reduce using rule 64 (OpUno -> NEG AtribOp .) ]
  ! LARROW          [ reduce using rule 64 (OpUno -> NEG AtribOp .) ]


state 68

    (66) OpUno -> SUB AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 66 (OpUno -> SUB AtribOp .)
    {               reduce using rule 66 (OpUno -> SUB AtribOp .)
    ID              reduce using rule 66 (OpUno -> SUB AtribOp .)
    IF              reduce using rule 66 (OpUno -> SUB AtribOp .)
    WHILE           reduce using rule 66 (OpUno -> SUB AtribOp .)
    SWITCH          reduce using rule 66 (OpUno -> SUB AtribOp .)
    NEG             reduce using rule 66 (OpUno -> SUB AtribOp .)
    SUB             reduce using rule 66 (OpUno -> SUB AtribOp .)
    (               reduce using rule 66 (OpUno -> SUB AtribOp .)
    NUM             reduce using rule 66 (OpUno -> SUB AtribOp .)
    )               reduce using rule 66 (OpUno -> SUB AtribOp .)
    ,               reduce using rule 66 (OpUno -> SUB AtribOp .)
    ]               reduce using rule 66 (OpUno -> SUB AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95

  ! RARROW          [ reduce using rule 66 (OpUno -> SUB AtribOp .) ]
  ! LARROW          [ reduce using rule 66 (OpUno -> SUB AtribOp .) ]


state 69

    (70) TermPlus -> TermPlus OpPlus . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    (               shift and go to state 18
    ID              shift and go to state 104
    NUM             shift and go to state 35

    TermMult                       shift and go to state 105
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 70

    (92) OpPlus -> ADD .

    (               reduce using rule 92 (OpPlus -> ADD .)
    ID              reduce using rule 92 (OpPlus -> ADD .)
    NUM             reduce using rule 92 (OpPlus -> ADD .)


state 71

    (93) OpPlus -> SUB .

    (               reduce using rule 93 (OpPlus -> SUB .)
    ID              reduce using rule 93 (OpPlus -> SUB .)
    NUM             reduce using rule 93 (OpPlus -> SUB .)


state 72

    (72) TermMult -> TermMult OpMult . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    (               shift and go to state 18
    ID              shift and go to state 104
    NUM             shift and go to state 35

    TermPow                        shift and go to state 106
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 73

    (94) OpMult -> MUL .

    (               reduce using rule 94 (OpMult -> MUL .)
    ID              reduce using rule 94 (OpMult -> MUL .)
    NUM             reduce using rule 94 (OpMult -> MUL .)


state 74

    (95) OpMult -> DIV .

    (               reduce using rule 95 (OpMult -> DIV .)
    ID              reduce using rule 95 (OpMult -> DIV .)
    NUM             reduce using rule 95 (OpMult -> DIV .)


state 75

    (74) TermPow -> TermPow OpPow . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    (               shift and go to state 18
    ID              shift and go to state 104
    NUM             shift and go to state 35

    Base                           shift and go to state 107
    FunCall                        shift and go to state 36

state 76

    (96) OpPow -> POW .

    (               reduce using rule 96 (OpPow -> POW .)
    ID              reduce using rule 96 (OpPow -> POW .)
    NUM             reduce using rule 96 (OpPow -> POW .)


state 77

    (46) DeclArray -> ID ID DeclArraySize .
    (47) DeclArraySize -> DeclArraySize . [ NUM ]

    ;               reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    {               reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    ID              reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    IF              reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    WHILE           reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    SWITCH          reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    NEG             reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    SUB             reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    (               reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    NUM             reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    )               reduce using rule 46 (DeclArray -> ID ID DeclArraySize .)
    [               shift and go to state 108


state 78

    (53) DeclAtrib -> ID ID LARROW . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 109
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 79

    (21) FunExtra -> ID .

    RARROW          reduce using rule 21 (FunExtra -> ID .)
    ,               reduce using rule 21 (FunExtra -> ID .)
    {               reduce using rule 21 (FunExtra -> ID .)
    ID              reduce using rule 21 (FunExtra -> ID .)
    IF              reduce using rule 21 (FunExtra -> ID .)
    WHILE           reduce using rule 21 (FunExtra -> ID .)
    SWITCH          reduce using rule 21 (FunExtra -> ID .)
    NEG             reduce using rule 21 (FunExtra -> ID .)
    SUB             reduce using rule 21 (FunExtra -> ID .)
    (               reduce using rule 21 (FunExtra -> ID .)
    NUM             reduce using rule 21 (FunExtra -> ID .)


state 80

    (14) Function -> ID FunScope FunCases . Body
    (11) Body -> . { }
    (12) Body -> . Block
    (13) Body -> . { Code }
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    {               shift and go to state 91
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Body                           shift and go to state 110
    Block                          shift and go to state 92
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 81

    (16) FunCases -> FunExtra . RARROW ID
    (18) FunCases -> FunExtra .
    (20) FunExtra -> FunExtra . , ID

    RARROW          shift and go to state 111
    {               reduce using rule 18 (FunCases -> FunExtra .)
    ID              reduce using rule 18 (FunCases -> FunExtra .)
    IF              reduce using rule 18 (FunCases -> FunExtra .)
    WHILE           reduce using rule 18 (FunCases -> FunExtra .)
    SWITCH          reduce using rule 18 (FunCases -> FunExtra .)
    NEG             reduce using rule 18 (FunCases -> FunExtra .)
    SUB             reduce using rule 18 (FunCases -> FunExtra .)
    (               reduce using rule 18 (FunCases -> FunExtra .)
    NUM             reduce using rule 18 (FunCases -> FunExtra .)
    ,               shift and go to state 112


state 82

    (17) FunCases -> RARROW . ID

    ID              shift and go to state 113


state 83

    (58) Atrib -> ID LARROW AtribOp .
    (55) AtribNum -> ID LARROW AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    {               reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    ID              reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    IF              reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    WHILE           reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    SWITCH          reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    NEG             reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    SUB             reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    (               reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    NUM             reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    )               reduce using rule 58 (Atrib -> ID LARROW AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95

  ! RARROW          [ reduce using rule 55 (AtribNum -> ID LARROW AtribOp .) ]
  ! LARROW          [ reduce using rule 55 (AtribNum -> ID LARROW AtribOp .) ]


state 84

    (60) Atrib -> ID SWAP ID .

    ;               reduce using rule 60 (Atrib -> ID SWAP ID .)
    {               reduce using rule 60 (Atrib -> ID SWAP ID .)
    ID              reduce using rule 60 (Atrib -> ID SWAP ID .)
    IF              reduce using rule 60 (Atrib -> ID SWAP ID .)
    WHILE           reduce using rule 60 (Atrib -> ID SWAP ID .)
    SWITCH          reduce using rule 60 (Atrib -> ID SWAP ID .)
    NEG             reduce using rule 60 (Atrib -> ID SWAP ID .)
    SUB             reduce using rule 60 (Atrib -> ID SWAP ID .)
    (               reduce using rule 60 (Atrib -> ID SWAP ID .)
    NUM             reduce using rule 60 (Atrib -> ID SWAP ID .)
    )               reduce using rule 60 (Atrib -> ID SWAP ID .)


state 85

    (49) AtribArray -> ID ArraySize LARROW . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 114
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 86

    (51) ArraySize -> ArraySize [ . AtribOp ]
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 115
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 87

    (80) FunCall -> ID ( FunArg . )

    )               shift and go to state 116


state 88

    (81) FunArg -> FunRec .
    (83) FunRec -> FunRec . , AtribOp

    )               reduce using rule 81 (FunArg -> FunRec .)
    ,               shift and go to state 117


state 89

    (84) FunRec -> AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 84 (FunRec -> AtribOp .)
    )               reduce using rule 84 (FunRec -> AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95


state 90

    (23) If -> IfScope Exp Body .
    (25) IfElse -> IfScope Exp Body . ElseScope Body
    (24) ElseScope -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 23 (If -> IfScope Exp Body .)
    IF              reduce using rule 23 (If -> IfScope Exp Body .)
    WHILE           reduce using rule 23 (If -> IfScope Exp Body .)
    SWITCH          reduce using rule 23 (If -> IfScope Exp Body .)
    NEG             reduce using rule 23 (If -> IfScope Exp Body .)
    SUB             reduce using rule 23 (If -> IfScope Exp Body .)
    (               reduce using rule 23 (If -> IfScope Exp Body .)
    NUM             reduce using rule 23 (If -> IfScope Exp Body .)
    $end            reduce using rule 23 (If -> IfScope Exp Body .)
    }               reduce using rule 23 (If -> IfScope Exp Body .)
    :               reduce using rule 23 (If -> IfScope Exp Body .)
    ELSE            shift and go to state 119

  ! ELSE            [ reduce using rule 23 (If -> IfScope Exp Body .) ]

    ElseScope                      shift and go to state 118

state 91

    (11) Body -> { . }
    (13) Body -> { . Code }
    (4) Code -> . Code Block
    (5) Code -> . Block
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    }               shift and go to state 120
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Code                           shift and go to state 121
    Block                          shift and go to state 4
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 92

    (12) Body -> Block .

    ELSE            reduce using rule 12 (Body -> Block .)
    ID              reduce using rule 12 (Body -> Block .)
    IF              reduce using rule 12 (Body -> Block .)
    WHILE           reduce using rule 12 (Body -> Block .)
    SWITCH          reduce using rule 12 (Body -> Block .)
    NEG             reduce using rule 12 (Body -> Block .)
    SUB             reduce using rule 12 (Body -> Block .)
    (               reduce using rule 12 (Body -> Block .)
    NUM             reduce using rule 12 (Body -> Block .)
    $end            reduce using rule 12 (Body -> Block .)
    }               reduce using rule 12 (Body -> Block .)
    :               reduce using rule 12 (Body -> Block .)


state 93

    (27) While -> WhileScope ( Exp . ) Body

    )               shift and go to state 122


state 94

    (76) Base -> ( AtribOp ) .

    POW             reduce using rule 76 (Base -> ( AtribOp ) .)
    MUL             reduce using rule 76 (Base -> ( AtribOp ) .)
    DIV             reduce using rule 76 (Base -> ( AtribOp ) .)
    ADD             reduce using rule 76 (Base -> ( AtribOp ) .)
    SUB             reduce using rule 76 (Base -> ( AtribOp ) .)
    AND             reduce using rule 76 (Base -> ( AtribOp ) .)
    OR              reduce using rule 76 (Base -> ( AtribOp ) .)
    LESSER          reduce using rule 76 (Base -> ( AtribOp ) .)
    GREATER         reduce using rule 76 (Base -> ( AtribOp ) .)
    LEQ             reduce using rule 76 (Base -> ( AtribOp ) .)
    GEQ             reduce using rule 76 (Base -> ( AtribOp ) .)
    EQUAL           reduce using rule 76 (Base -> ( AtribOp ) .)
    ;               reduce using rule 76 (Base -> ( AtribOp ) .)
    RARROW          reduce using rule 76 (Base -> ( AtribOp ) .)
    LARROW          reduce using rule 76 (Base -> ( AtribOp ) .)
    {               reduce using rule 76 (Base -> ( AtribOp ) .)
    ID              reduce using rule 76 (Base -> ( AtribOp ) .)
    IF              reduce using rule 76 (Base -> ( AtribOp ) .)
    WHILE           reduce using rule 76 (Base -> ( AtribOp ) .)
    SWITCH          reduce using rule 76 (Base -> ( AtribOp ) .)
    NEG             reduce using rule 76 (Base -> ( AtribOp ) .)
    (               reduce using rule 76 (Base -> ( AtribOp ) .)
    NUM             reduce using rule 76 (Base -> ( AtribOp ) .)
    )               reduce using rule 76 (Base -> ( AtribOp ) .)
    ,               reduce using rule 76 (Base -> ( AtribOp ) .)
    ]               reduce using rule 76 (Base -> ( AtribOp ) .)


state 95

    (50) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 123


state 96

    (55) AtribNum -> ID LARROW . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 124
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 97

    (29) Switch -> SwitchScope Conds { . Cases }
    (34) Cases -> . Cases Case
    (35) Cases -> . Case
    (36) Case -> . ID : Body
    (37) Case -> . : Body

    ID              shift and go to state 127
    :               shift and go to state 128

    Cases                          shift and go to state 125
    Case                           shift and go to state 126

state 98

    (30) Conds -> Conds , . Cond
    (32) Cond -> . ID ( AtribOp )
    (33) Cond -> . ( AtribOp )

    ID              shift and go to state 55
    (               shift and go to state 56

    Cond                           shift and go to state 129

state 99

    (32) Cond -> ID ( . AtribOp )
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 130
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 100

    (33) Cond -> ( AtribOp . )
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 131
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95


state 101

    (59) Atrib -> AtribOp RARROW ID .
    (54) DeclAtrib -> AtribOp RARROW ID . ID
    (50) AtribArray -> AtribOp RARROW ID . ArraySize
    (51) ArraySize -> . ArraySize [ AtribOp ]
    (52) ArraySize -> .

  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for ; resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for { resolved using rule 52 (ArraySize -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for SWITCH resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for NEG resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for SUB resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for ( resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for NUM resolved using rule 52 (ArraySize -> .)
  ! reduce/reduce conflict for ) resolved using rule 52 (ArraySize -> .)
    ID              shift and go to state 132
    [               reduce using rule 52 (ArraySize -> .)
    ;               reduce using rule 52 (ArraySize -> .)
    RARROW          reduce using rule 52 (ArraySize -> .)
    LARROW          reduce using rule 52 (ArraySize -> .)
    {               reduce using rule 52 (ArraySize -> .)
    IF              reduce using rule 52 (ArraySize -> .)
    WHILE           reduce using rule 52 (ArraySize -> .)
    SWITCH          reduce using rule 52 (ArraySize -> .)
    NEG             reduce using rule 52 (ArraySize -> .)
    SUB             reduce using rule 52 (ArraySize -> .)
    (               reduce using rule 52 (ArraySize -> .)
    NUM             reduce using rule 52 (ArraySize -> .)
    )               reduce using rule 52 (ArraySize -> .)

  ! ;               [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! {               [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! ID              [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! IF              [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! WHILE           [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! SWITCH          [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! NEG             [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! SUB             [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! (               [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! NUM             [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! )               [ reduce using rule 59 (Atrib -> AtribOp RARROW ID .) ]
  ! ID              [ reduce using rule 52 (ArraySize -> .) ]

    ArraySize                      shift and go to state 133

state 102

    (56) AtribNum -> AtribOp LARROW ID .

    RARROW          reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    LARROW          reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    )               reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    ;               reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    {               reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    ID              reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    IF              reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    WHILE           reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    SWITCH          reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    NEG             reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    SUB             reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    (               reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    NUM             reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    ,               reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)
    ]               reduce using rule 56 (AtribNum -> AtribOp LARROW ID .)


state 103

    (68) OpBin -> OpBin OpLogico TermPlus .
    (70) TermPlus -> TermPlus . OpPlus TermMult
    (92) OpPlus -> . ADD
    (93) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    OR              reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    LESSER          reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    GREATER         reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    LEQ             reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    GEQ             reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    EQUAL           reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    ;               reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    RARROW          reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    LARROW          reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    {               reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    ID              reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    IF              reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    WHILE           reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCH          reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    NEG             reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    (               reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    NUM             reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    )               reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    ,               reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    ]               reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .)
    ADD             shift and go to state 70
    SUB             shift and go to state 71

  ! SUB             [ reduce using rule 68 (OpBin -> OpBin OpLogico TermPlus .) ]

    OpPlus                         shift and go to state 69

state 104

    (77) Base -> ID .
    (80) FunCall -> ID . ( FunArg )

  ! shift/reduce conflict for ( resolved as shift
    POW             reduce using rule 77 (Base -> ID .)
    MUL             reduce using rule 77 (Base -> ID .)
    DIV             reduce using rule 77 (Base -> ID .)
    ADD             reduce using rule 77 (Base -> ID .)
    SUB             reduce using rule 77 (Base -> ID .)
    AND             reduce using rule 77 (Base -> ID .)
    OR              reduce using rule 77 (Base -> ID .)
    LESSER          reduce using rule 77 (Base -> ID .)
    GREATER         reduce using rule 77 (Base -> ID .)
    LEQ             reduce using rule 77 (Base -> ID .)
    GEQ             reduce using rule 77 (Base -> ID .)
    EQUAL           reduce using rule 77 (Base -> ID .)
    ;               reduce using rule 77 (Base -> ID .)
    RARROW          reduce using rule 77 (Base -> ID .)
    LARROW          reduce using rule 77 (Base -> ID .)
    {               reduce using rule 77 (Base -> ID .)
    ID              reduce using rule 77 (Base -> ID .)
    IF              reduce using rule 77 (Base -> ID .)
    WHILE           reduce using rule 77 (Base -> ID .)
    SWITCH          reduce using rule 77 (Base -> ID .)
    NEG             reduce using rule 77 (Base -> ID .)
    NUM             reduce using rule 77 (Base -> ID .)
    )               reduce using rule 77 (Base -> ID .)
    ,               reduce using rule 77 (Base -> ID .)
    ]               reduce using rule 77 (Base -> ID .)
    (               shift and go to state 44

  ! (               [ reduce using rule 77 (Base -> ID .) ]


state 105

    (70) TermPlus -> TermPlus OpPlus TermMult .
    (72) TermMult -> TermMult . OpMult TermPow
    (94) OpMult -> . MUL
    (95) OpMult -> . DIV

    ADD             reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    SUB             reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    AND             reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    OR              reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    LESSER          reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    GREATER         reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    LEQ             reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    GEQ             reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    EQUAL           reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    ;               reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    RARROW          reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    LARROW          reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    {               reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    ID              reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    IF              reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    WHILE           reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCH          reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    NEG             reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    (               reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    NUM             reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    )               reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    ,               reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    ]               reduce using rule 70 (TermPlus -> TermPlus OpPlus TermMult .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

    OpMult                         shift and go to state 72

state 106

    (72) TermMult -> TermMult OpMult TermPow .
    (74) TermPow -> TermPow . OpPow Base
    (96) OpPow -> . POW

    MUL             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    DIV             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    ADD             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    SUB             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    AND             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    OR              reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    LESSER          reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    GREATER         reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    LEQ             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    GEQ             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    EQUAL           reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    ;               reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    RARROW          reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    LARROW          reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    {               reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    ID              reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    IF              reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    WHILE           reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    SWITCH          reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    NEG             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    (               reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    NUM             reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    )               reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    ,               reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    ]               reduce using rule 72 (TermMult -> TermMult OpMult TermPow .)
    POW             shift and go to state 76

    OpPow                          shift and go to state 75

state 107

    (74) TermPow -> TermPow OpPow Base .

    POW             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    MUL             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    DIV             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    ADD             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    SUB             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    AND             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    OR              reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    LESSER          reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    GREATER         reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    LEQ             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    GEQ             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    EQUAL           reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    ;               reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    RARROW          reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    LARROW          reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    {               reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    ID              reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    IF              reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    WHILE           reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    SWITCH          reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    NEG             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    (               reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    NUM             reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    )               reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    ,               reduce using rule 74 (TermPow -> TermPow OpPow Base .)
    ]               reduce using rule 74 (TermPow -> TermPow OpPow Base .)


state 108

    (47) DeclArraySize -> DeclArraySize [ . NUM ]

    NUM             shift and go to state 134


state 109

    (53) DeclAtrib -> ID ID LARROW AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

    ;               reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    {               reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    ID              reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    IF              reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    WHILE           reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    SWITCH          reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    NEG             reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    SUB             reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    (               reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    NUM             reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    )               reduce using rule 53 (DeclAtrib -> ID ID LARROW AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95


state 110

    (14) Function -> ID FunScope FunCases Body .

    ID              reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    IF              reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    WHILE           reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    SWITCH          reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    NEG             reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    SUB             reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    (               reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    NUM             reduce using rule 14 (Function -> ID FunScope FunCases Body .)
    $end            reduce using rule 14 (Function -> ID FunScope FunCases Body .)


state 111

    (16) FunCases -> FunExtra RARROW . ID

    ID              shift and go to state 135


state 112

    (20) FunExtra -> FunExtra , . ID

    ID              shift and go to state 136


state 113

    (17) FunCases -> RARROW ID .

    {               reduce using rule 17 (FunCases -> RARROW ID .)
    ID              reduce using rule 17 (FunCases -> RARROW ID .)
    IF              reduce using rule 17 (FunCases -> RARROW ID .)
    WHILE           reduce using rule 17 (FunCases -> RARROW ID .)
    SWITCH          reduce using rule 17 (FunCases -> RARROW ID .)
    NEG             reduce using rule 17 (FunCases -> RARROW ID .)
    SUB             reduce using rule 17 (FunCases -> RARROW ID .)
    (               reduce using rule 17 (FunCases -> RARROW ID .)
    NUM             reduce using rule 17 (FunCases -> RARROW ID .)


state 114

    (49) AtribArray -> ID ArraySize LARROW AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    {               reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ID              reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    IF              reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    WHILE           reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCH          reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NEG             reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SUB             reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    (               reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NUM             reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    )               reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ,               reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ]               reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95

  ! RARROW          [ reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .) ]
  ! LARROW          [ reduce using rule 49 (AtribArray -> ID ArraySize LARROW AtribOp .) ]


state 115

    (51) ArraySize -> ArraySize [ AtribOp . ]
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 137
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95


state 116

    (80) FunCall -> ID ( FunArg ) .

    POW             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    MUL             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    DIV             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    ADD             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    SUB             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    AND             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    OR              reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    LESSER          reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    GREATER         reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    LEQ             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    GEQ             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    EQUAL           reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    ;               reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    RARROW          reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    LARROW          reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    {               reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    ID              reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    IF              reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    WHILE           reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    SWITCH          reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    NEG             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    (               reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    NUM             reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    )               reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    ,               reduce using rule 80 (FunCall -> ID ( FunArg ) .)
    ]               reduce using rule 80 (FunCall -> ID ( FunArg ) .)


state 117

    (83) FunRec -> FunRec , . AtribOp
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    ID              shift and go to state 51
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    AtribOp                        shift and go to state 138
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 118

    (25) IfElse -> IfScope Exp Body ElseScope . Body
    (11) Body -> . { }
    (12) Body -> . Block
    (13) Body -> . { Code }
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    {               shift and go to state 91
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    IfScope                        shift and go to state 16
    Exp                            shift and go to state 6
    Body                           shift and go to state 139
    Block                          shift and go to state 92
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 119

    (24) ElseScope -> ELSE .

    {               reduce using rule 24 (ElseScope -> ELSE .)
    ID              reduce using rule 24 (ElseScope -> ELSE .)
    IF              reduce using rule 24 (ElseScope -> ELSE .)
    WHILE           reduce using rule 24 (ElseScope -> ELSE .)
    SWITCH          reduce using rule 24 (ElseScope -> ELSE .)
    NEG             reduce using rule 24 (ElseScope -> ELSE .)
    SUB             reduce using rule 24 (ElseScope -> ELSE .)
    (               reduce using rule 24 (ElseScope -> ELSE .)
    NUM             reduce using rule 24 (ElseScope -> ELSE .)


state 120

    (11) Body -> { } .

    ELSE            reduce using rule 11 (Body -> { } .)
    ID              reduce using rule 11 (Body -> { } .)
    IF              reduce using rule 11 (Body -> { } .)
    WHILE           reduce using rule 11 (Body -> { } .)
    SWITCH          reduce using rule 11 (Body -> { } .)
    NEG             reduce using rule 11 (Body -> { } .)
    SUB             reduce using rule 11 (Body -> { } .)
    (               reduce using rule 11 (Body -> { } .)
    NUM             reduce using rule 11 (Body -> { } .)
    $end            reduce using rule 11 (Body -> { } .)
    }               reduce using rule 11 (Body -> { } .)
    :               reduce using rule 11 (Body -> { } .)


state 121

    (13) Body -> { Code . }
    (4) Code -> Code . Block
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    }               shift and go to state 140
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Block                          shift and go to state 37
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 122

    (27) While -> WhileScope ( Exp ) . Body
    (11) Body -> . { }
    (12) Body -> . Block
    (13) Body -> . { Code }
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    {               shift and go to state 91
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    WhileScope                     shift and go to state 17
    Exp                            shift and go to state 6
    Body                           shift and go to state 141
    Block                          shift and go to state 92
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 123

    (50) AtribArray -> AtribOp RARROW ID . ArraySize
    (51) ArraySize -> . ArraySize [ AtribOp ]
    (52) ArraySize -> .

    [               reduce using rule 52 (ArraySize -> .)
    )               reduce using rule 52 (ArraySize -> .)
    LARROW          reduce using rule 52 (ArraySize -> .)
    RARROW          reduce using rule 52 (ArraySize -> .)
    ;               reduce using rule 52 (ArraySize -> .)
    {               reduce using rule 52 (ArraySize -> .)
    ID              reduce using rule 52 (ArraySize -> .)
    IF              reduce using rule 52 (ArraySize -> .)
    WHILE           reduce using rule 52 (ArraySize -> .)
    SWITCH          reduce using rule 52 (ArraySize -> .)
    NEG             reduce using rule 52 (ArraySize -> .)
    SUB             reduce using rule 52 (ArraySize -> .)
    (               reduce using rule 52 (ArraySize -> .)
    NUM             reduce using rule 52 (ArraySize -> .)
    ,               reduce using rule 52 (ArraySize -> .)
    ]               reduce using rule 52 (ArraySize -> .)

    ArraySize                      shift and go to state 133

state 124

    (55) AtribNum -> ID LARROW AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for LARROW resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    )               reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    ;               reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    {               reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    ID              reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    IF              reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    WHILE           reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    SWITCH          reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    NEG             reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    SUB             reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    (               reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    NUM             reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    ,               reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    ]               reduce using rule 55 (AtribNum -> ID LARROW AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95

  ! LARROW          [ reduce using rule 55 (AtribNum -> ID LARROW AtribOp .) ]
  ! RARROW          [ reduce using rule 55 (AtribNum -> ID LARROW AtribOp .) ]


state 125

    (29) Switch -> SwitchScope Conds { Cases . }
    (34) Cases -> Cases . Case
    (36) Case -> . ID : Body
    (37) Case -> . : Body

    }               shift and go to state 142
    ID              shift and go to state 127
    :               shift and go to state 128

    Case                           shift and go to state 143

state 126

    (35) Cases -> Case .

    }               reduce using rule 35 (Cases -> Case .)
    ID              reduce using rule 35 (Cases -> Case .)
    :               reduce using rule 35 (Cases -> Case .)


state 127

    (36) Case -> ID . : Body

    :               shift and go to state 144


state 128

    (37) Case -> : . Body
    (11) Body -> . { }
    (12) Body -> . Block
    (13) Body -> . { Code }
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    {               shift and go to state 91
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Body                           shift and go to state 145
    Block                          shift and go to state 92
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 129

    (30) Conds -> Conds , Cond .

    {               reduce using rule 30 (Conds -> Conds , Cond .)
    ,               reduce using rule 30 (Conds -> Conds , Cond .)


state 130

    (32) Cond -> ID ( AtribOp . )
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 146
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95


state 131

    (33) Cond -> ( AtribOp ) .

    {               reduce using rule 33 (Cond -> ( AtribOp ) .)
    ,               reduce using rule 33 (Cond -> ( AtribOp ) .)


state 132

    (54) DeclAtrib -> AtribOp RARROW ID ID .

    ;               reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    {               reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    ID              reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    IF              reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    WHILE           reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    SWITCH          reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    NEG             reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    SUB             reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    (               reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    NUM             reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)
    )               reduce using rule 54 (DeclAtrib -> AtribOp RARROW ID ID .)


state 133

    (50) AtribArray -> AtribOp RARROW ID ArraySize .
    (51) ArraySize -> ArraySize . [ AtribOp ]

    ;               reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    RARROW          reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    LARROW          reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    {               reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ID              reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    IF              reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    WHILE           reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCH          reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NEG             reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SUB             reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    (               reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NUM             reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    )               reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ,               reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ]               reduce using rule 50 (AtribArray -> AtribOp RARROW ID ArraySize .)
    [               shift and go to state 86


state 134

    (47) DeclArraySize -> DeclArraySize [ NUM . ]

    ]               shift and go to state 147


state 135

    (16) FunCases -> FunExtra RARROW ID .

    {               reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    ID              reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    IF              reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    WHILE           reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    SWITCH          reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    NEG             reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    SUB             reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    (               reduce using rule 16 (FunCases -> FunExtra RARROW ID .)
    NUM             reduce using rule 16 (FunCases -> FunExtra RARROW ID .)


state 136

    (20) FunExtra -> FunExtra , ID .

    RARROW          reduce using rule 20 (FunExtra -> FunExtra , ID .)
    ,               reduce using rule 20 (FunExtra -> FunExtra , ID .)
    {               reduce using rule 20 (FunExtra -> FunExtra , ID .)
    ID              reduce using rule 20 (FunExtra -> FunExtra , ID .)
    IF              reduce using rule 20 (FunExtra -> FunExtra , ID .)
    WHILE           reduce using rule 20 (FunExtra -> FunExtra , ID .)
    SWITCH          reduce using rule 20 (FunExtra -> FunExtra , ID .)
    NEG             reduce using rule 20 (FunExtra -> FunExtra , ID .)
    SUB             reduce using rule 20 (FunExtra -> FunExtra , ID .)
    (               reduce using rule 20 (FunExtra -> FunExtra , ID .)
    NUM             reduce using rule 20 (FunExtra -> FunExtra , ID .)


state 137

    (51) ArraySize -> ArraySize [ AtribOp ] .

    LARROW          reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    [               reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    ;               reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    RARROW          reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    {               reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    ID              reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    IF              reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    WHILE           reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCH          reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    NEG             reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    SUB             reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    (               reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    NUM             reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    )               reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    ,               reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)
    ]               reduce using rule 51 (ArraySize -> ArraySize [ AtribOp ] .)


state 138

    (83) FunRec -> FunRec , AtribOp .
    (56) AtribNum -> AtribOp . LARROW ID
    (50) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 83 (FunRec -> FunRec , AtribOp .)
    )               reduce using rule 83 (FunRec -> FunRec , AtribOp .)
    LARROW          shift and go to state 58
    RARROW          shift and go to state 95


state 139

    (25) IfElse -> IfScope Exp Body ElseScope Body .

    ID              reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    IF              reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    WHILE           reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    SWITCH          reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    NEG             reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    SUB             reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    (               reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    NUM             reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    $end            reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    ELSE            reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    }               reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)
    :               reduce using rule 25 (IfElse -> IfScope Exp Body ElseScope Body .)


state 140

    (13) Body -> { Code } .

    ELSE            reduce using rule 13 (Body -> { Code } .)
    ID              reduce using rule 13 (Body -> { Code } .)
    IF              reduce using rule 13 (Body -> { Code } .)
    WHILE           reduce using rule 13 (Body -> { Code } .)
    SWITCH          reduce using rule 13 (Body -> { Code } .)
    NEG             reduce using rule 13 (Body -> { Code } .)
    SUB             reduce using rule 13 (Body -> { Code } .)
    (               reduce using rule 13 (Body -> { Code } .)
    NUM             reduce using rule 13 (Body -> { Code } .)
    $end            reduce using rule 13 (Body -> { Code } .)
    }               reduce using rule 13 (Body -> { Code } .)
    :               reduce using rule 13 (Body -> { Code } .)


state 141

    (27) While -> WhileScope ( Exp ) Body .

    ID              reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    IF              reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    WHILE           reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    SWITCH          reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    NEG             reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    SUB             reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    (               reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    NUM             reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    $end            reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    ELSE            reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    }               reduce using rule 27 (While -> WhileScope ( Exp ) Body .)
    :               reduce using rule 27 (While -> WhileScope ( Exp ) Body .)


state 142

    (29) Switch -> SwitchScope Conds { Cases } .

    ID              reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    IF              reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    WHILE           reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    SWITCH          reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    NEG             reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    SUB             reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    (               reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    NUM             reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    $end            reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    ELSE            reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    }               reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)
    :               reduce using rule 29 (Switch -> SwitchScope Conds { Cases } .)


state 143

    (34) Cases -> Cases Case .

    }               reduce using rule 34 (Cases -> Cases Case .)
    ID              reduce using rule 34 (Cases -> Cases Case .)
    :               reduce using rule 34 (Cases -> Cases Case .)


state 144

    (36) Case -> ID : . Body
    (11) Body -> . { }
    (12) Body -> . Block
    (13) Body -> . { Code }
    (6) Block -> . Exp ;
    (7) Block -> . If
    (8) Block -> . IfElse
    (9) Block -> . While
    (10) Block -> . Switch
    (38) Exp -> . Atrib
    (39) Exp -> . Op
    (40) Exp -> . Decl
    (41) Exp -> . DeclArray
    (42) Exp -> . DeclAtrib
    (23) If -> . IfScope Exp Body
    (25) IfElse -> . IfScope Exp Body ElseScope Body
    (27) While -> . WhileScope ( Exp ) Body
    (29) Switch -> . SwitchScope Conds { Cases }
    (58) Atrib -> . ID LARROW AtribOp
    (59) Atrib -> . AtribOp RARROW ID
    (60) Atrib -> . ID SWAP ID
    (61) Atrib -> . AtribArray
    (62) Op -> . OpUno
    (63) Op -> . OpBin
    (45) Decl -> . ID ID
    (46) DeclArray -> . ID ID DeclArraySize
    (53) DeclAtrib -> . ID ID LARROW AtribOp
    (54) DeclAtrib -> . AtribOp RARROW ID ID
    (22) IfScope -> . IF
    (26) WhileScope -> . WHILE
    (28) SwitchScope -> . SWITCH
    (43) AtribOp -> . AtribNum
    (44) AtribOp -> . Op
    (49) AtribArray -> . ID ArraySize LARROW AtribOp
    (50) AtribArray -> . AtribOp RARROW ID ArraySize
    (64) OpUno -> . NEG AtribOp
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB AtribOp
    (68) OpBin -> . OpBin OpLogico TermPlus
    (69) OpBin -> . TermPlus
    (55) AtribNum -> . ID LARROW AtribOp
    (56) AtribNum -> . AtribOp LARROW ID
    (57) AtribNum -> . AtribArray
    (67) AccessArray -> . ID ArraySize
    (70) TermPlus -> . TermPlus OpPlus TermMult
    (71) TermPlus -> . TermMult
    (72) TermMult -> . TermMult OpMult TermPow
    (73) TermMult -> . TermPow
    (74) TermPow -> . TermPow OpPow Base
    (75) TermPow -> . Base
    (76) Base -> . ( AtribOp )
    (77) Base -> . ID
    (78) Base -> . NUM
    (79) Base -> . FunCall
    (80) FunCall -> . ID ( FunArg )

    {               shift and go to state 91
    ID              shift and go to state 38
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    NEG             shift and go to state 28
    SUB             shift and go to state 30
    (               shift and go to state 18
    NUM             shift and go to state 35

    Body                           shift and go to state 148
    Block                          shift and go to state 92
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    WhileScope                     shift and go to state 17
    SwitchScope                    shift and go to state 19
    AtribOp                        shift and go to state 20
    AtribArray                     shift and go to state 21
    OpUno                          shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    AccessArray                    shift and go to state 29
    TermPlus                       shift and go to state 31
    TermMult                       shift and go to state 32
    TermPow                        shift and go to state 33
    Base                           shift and go to state 34
    FunCall                        shift and go to state 36

state 145

    (37) Case -> : Body .

    }               reduce using rule 37 (Case -> : Body .)
    ID              reduce using rule 37 (Case -> : Body .)
    :               reduce using rule 37 (Case -> : Body .)


state 146

    (32) Cond -> ID ( AtribOp ) .

    {               reduce using rule 32 (Cond -> ID ( AtribOp ) .)
    ,               reduce using rule 32 (Cond -> ID ( AtribOp ) .)


state 147

    (47) DeclArraySize -> DeclArraySize [ NUM ] .

    [               reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ;               reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    {               reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ID              reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    IF              reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    WHILE           reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    SWITCH          reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    NEG             reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    SUB             reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    (               reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    NUM             reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)
    )               reduce using rule 47 (DeclArraySize -> DeclArraySize [ NUM ] .)


state 148

    (36) Case -> ID : Body .

    }               reduce using rule 36 (Case -> ID : Body .)
    ID              reduce using rule 36 (Case -> ID : Body .)
    :               reduce using rule 36 (Case -> ID : Body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for NEG in state 2 resolved as shift
WARNING: shift/reduce conflict for SUB in state 2 resolved as shift
WARNING: shift/reduce conflict for ( in state 2 resolved as shift
WARNING: shift/reduce conflict for NUM in state 2 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 5 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 5 resolved as shift
WARNING: shift/reduce conflict for SUB in state 31 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for ( in state 38 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for ( in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 43 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 51 resolved as shift
WARNING: shift/reduce conflict for ( in state 51 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 51 resolved as shift
WARNING: shift/reduce conflict for ( in state 51 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 67 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 67 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 68 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 68 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 83 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 83 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for SUB in state 103 resolved as shift
WARNING: shift/reduce conflict for ( in state 104 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 114 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 114 resolved as shift
WARNING: shift/reduce conflict for LARROW in state 124 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 124 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (ArraySize -> <empty>)
WARNING: rejected rule (Base -> ID) in state 5
WARNING: reduce/reduce conflict in state 38 resolved using rule (ArraySize -> <empty>)
WARNING: rejected rule (Base -> ID) in state 38
WARNING: reduce/reduce conflict in state 39 resolved using rule (Decl -> ID ID)
WARNING: rejected rule (DeclArraySize -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 51 resolved using rule (ArraySize -> <empty>)
WARNING: rejected rule (Base -> ID) in state 51
WARNING: reduce/reduce conflict in state 101 resolved using rule (ArraySize -> <empty>)
WARNING: rejected rule (Atrib -> AtribOp RARROW ID) in state 101
WARNING: Rule (Atrib -> AtribOp RARROW ID) is never reduced

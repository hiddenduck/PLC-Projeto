Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Start
Rule 1     Start -> Axiom
Rule 2     Start -> <empty>
Rule 3     Axiom -> Axiom Block
Rule 4     Axiom -> Axiom Function
Rule 5     Axiom -> <empty>
Rule 6     Code -> Code Block
Rule 7     Code -> Block
Rule 8     Block -> Exp ;
Rule 9     Block -> If
Rule 10    Block -> IfElse
Rule 11    Block -> While
Rule 12    Block -> Switch
Rule 13    Body -> { }
Rule 14    Body -> Block
Rule 15    Body -> { Code }
Rule 16    Function -> ID FunScope FunCases Body
Rule 17    FunScope -> :
Rule 18    FunCases -> FunExtra RARROW ID
Rule 19    FunCases -> RARROW ID
Rule 20    FunCases -> FunExtra
Rule 21    FunCases -> <empty>
Rule 22    FunExtra -> FunExtra , ID
Rule 23    FunExtra -> ID
Rule 24    IfScope -> IF
Rule 25    If -> IfScope AtribOp Body
Rule 26    ElseScope -> ELSE
Rule 27    IfElse -> IfScope AtribOp Body ElseScope Body
Rule 28    WhileScope -> WHILE
Rule 29    While -> WhileScope ( AtribOp ) Body
Rule 30    SwitchScope -> SWITCH
Rule 31    Switch -> SwitchScope Conds { Cases }
Rule 32    Conds -> Conds , Cond
Rule 33    Conds -> Cond
Rule 34    Cond -> ID ( AtribOp )
Rule 35    Cond -> ( AtribOp )
Rule 36    Cases -> Cases Case
Rule 37    Cases -> Case
Rule 38    Case -> ID : Body
Rule 39    Case -> : Body
Rule 40    Exp -> Atrib
Rule 41    Exp -> Op
Rule 42    Exp -> Decl
Rule 43    Exp -> DeclArray
Rule 44    Exp -> DeclAtrib
Rule 45    AtribOp -> AtribNum
Rule 46    AtribOp -> Op
Rule 47    Decl -> ID ID
Rule 48    DeclArray -> ID ID DeclArraySize
Rule 49    DeclArraySize -> DeclArraySize [ NUM ]
Rule 50    DeclArraySize -> [ NUM ]
Rule 51    AtribArray -> ID ArraySize LARROW AtribOp
Rule 52    AtribArray -> AtribOp RARROW ID ArraySize
Rule 53    ArraySize -> ArraySize [ AtribOp ]
Rule 54    ArraySize -> [ AtribOp ]
Rule 55    DeclAtrib -> ID ID LARROW AtribOp
Rule 56    DeclAtrib -> AtribOp RARROW ID ID
Rule 57    AtribNum -> ID LARROW AtribOp
Rule 58    AtribNum -> AtribOp RARROW ID
Rule 59    AtribNum -> AtribArray
Rule 60    Atrib -> ID LARROW AtribOp
Rule 61    Atrib -> AtribOp RARROW ID
Rule 62    Atrib -> ID SWAP ID
Rule 63    Atrib -> AtribArray
Rule 64    Op -> OpBin
Rule 65    OpUno -> NEG Base
Rule 66    OpUno -> AccessArray
Rule 67    OpUno -> SUB Base
Rule 68    OpUno -> Base ?
Rule 69    AccessArray -> ID ArraySize
Rule 70    OpBin -> OpBin OpLogico TermPlus
Rule 71    OpBin -> TermPlus
Rule 72    TermPlus -> TermPlus OpPlus TermMult
Rule 73    TermPlus -> TermMult
Rule 74    TermMult -> TermMult OpMult TermPow
Rule 75    TermMult -> TermPow
Rule 76    TermPow -> TermPow OpPow Base
Rule 77    TermPow -> Base
Rule 78    Base -> OpUno
Rule 79    Base -> ( AtribOp )
Rule 80    Base -> ID
Rule 81    Base -> NUM
Rule 82    Base -> FunCall
Rule 83    Base -> ¿
Rule 84    FunCall -> ID ( FunArg )
Rule 85    FunArg -> FunRec
Rule 86    FunArg -> <empty>
Rule 87    FunRec -> FunRec , AtribOp
Rule 88    FunRec -> AtribOp
Rule 89    OpLogico -> AND
Rule 90    OpLogico -> OR
Rule 91    OpLogico -> LESSER
Rule 92    OpLogico -> GREATER
Rule 93    OpLogico -> LEQ
Rule 94    OpLogico -> GEQ
Rule 95    OpLogico -> EQUAL
Rule 96    OpPlus -> ADD
Rule 97    OpPlus -> SUB
Rule 98    OpMult -> MUL
Rule 99    OpMult -> DIV
Rule 100   OpPow -> POW

Terminals, with rules where they appear

(                    : 29 34 35 79 84
)                    : 29 34 35 79 84
,                    : 22 32 87
:                    : 17 38 39
;                    : 8
?                    : 68
ADD                  : 96
AND                  : 89
DIV                  : 99
ELSE                 : 26
EQUAL                : 95
GEQ                  : 94
GREATER              : 92
ID                   : 16 18 19 22 23 34 38 47 47 48 48 51 52 55 55 56 56 57 58 60 61 62 62 69 80 84
IF                   : 24
LARROW               : 51 55 57 60
LEQ                  : 93
LESSER               : 91
MUL                  : 98
NEG                  : 65
NUM                  : 49 50 81
OR                   : 90
POW                  : 100
RARROW               : 18 19 52 56 58 61
SUB                  : 67 97
SWAP                 : 62
SWITCH               : 30
WHILE                : 28
[                    : 49 50 53 54
]                    : 49 50 53 54
error                : 
{                    : 13 15 31
}                    : 13 15 31
¿                    : 83

Nonterminals, with rules where they appear

AccessArray          : 66
ArraySize            : 51 52 53 69
Atrib                : 40
AtribArray           : 59 63
AtribNum             : 45
AtribOp              : 25 27 29 34 35 51 52 53 54 55 56 57 58 60 61 79 87 88
Axiom                : 1 3 4
Base                 : 65 67 68 76 77
Block                : 3 6 7 14
Body                 : 16 25 27 27 29 38 39
Case                 : 36 37
Cases                : 31 36
Code                 : 6 15
Cond                 : 32 33
Conds                : 31 32
Decl                 : 42
DeclArray            : 43
DeclArraySize        : 48 49
DeclAtrib            : 44
ElseScope            : 27
Exp                  : 8
FunArg               : 84
FunCall              : 82
FunCases             : 16
FunExtra             : 18 20 22
FunRec               : 85 87
FunScope             : 16
Function             : 4
If                   : 9
IfElse               : 10
IfScope              : 25 27
Op                   : 41 46
OpBin                : 64 70
OpLogico             : 70
OpMult               : 74
OpPlus               : 72
OpPow                : 76
OpUno                : 78
Start                : 0
Switch               : 12
SwitchScope          : 31
TermMult             : 72 73 74
TermPlus             : 70 71 72
TermPow              : 74 75 76
While                : 11
WhileScope           : 29

Parsing method: LALR

state 0

    (0) S' -> . Start
    (1) Start -> . Axiom
    (2) Start -> .
    (3) Axiom -> . Axiom Block
    (4) Axiom -> . Axiom Function
    (5) Axiom -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (Start -> .)
    $end            reduce using rule 2 (Start -> .)
    ID              reduce using rule 5 (Axiom -> .)
    IF              reduce using rule 5 (Axiom -> .)
    WHILE           reduce using rule 5 (Axiom -> .)
    SWITCH          reduce using rule 5 (Axiom -> .)
    (               reduce using rule 5 (Axiom -> .)
    NUM             reduce using rule 5 (Axiom -> .)
    ¿               reduce using rule 5 (Axiom -> .)
    NEG             reduce using rule 5 (Axiom -> .)
    SUB             reduce using rule 5 (Axiom -> .)

  ! $end            [ reduce using rule 5 (Axiom -> .) ]

    Start                          shift and go to state 1
    Axiom                          shift and go to state 2

state 1

    (0) S' -> Start .



state 2

    (1) Start -> Axiom .
    (3) Axiom -> Axiom . Block
    (4) Axiom -> Axiom . Function
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (16) Function -> . ID FunScope FunCases Body
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    $end            reduce using rule 1 (Start -> Axiom .)
    ID              shift and go to state 10
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Block                          shift and go to state 3
    Function                       shift and go to state 4
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 3

    (3) Axiom -> Axiom Block .

    ID              reduce using rule 3 (Axiom -> Axiom Block .)
    IF              reduce using rule 3 (Axiom -> Axiom Block .)
    WHILE           reduce using rule 3 (Axiom -> Axiom Block .)
    SWITCH          reduce using rule 3 (Axiom -> Axiom Block .)
    (               reduce using rule 3 (Axiom -> Axiom Block .)
    NUM             reduce using rule 3 (Axiom -> Axiom Block .)
    ¿               reduce using rule 3 (Axiom -> Axiom Block .)
    NEG             reduce using rule 3 (Axiom -> Axiom Block .)
    SUB             reduce using rule 3 (Axiom -> Axiom Block .)
    $end            reduce using rule 3 (Axiom -> Axiom Block .)


state 4

    (4) Axiom -> Axiom Function .

    ID              reduce using rule 4 (Axiom -> Axiom Function .)
    IF              reduce using rule 4 (Axiom -> Axiom Function .)
    WHILE           reduce using rule 4 (Axiom -> Axiom Function .)
    SWITCH          reduce using rule 4 (Axiom -> Axiom Function .)
    (               reduce using rule 4 (Axiom -> Axiom Function .)
    NUM             reduce using rule 4 (Axiom -> Axiom Function .)
    ¿               reduce using rule 4 (Axiom -> Axiom Function .)
    NEG             reduce using rule 4 (Axiom -> Axiom Function .)
    SUB             reduce using rule 4 (Axiom -> Axiom Function .)
    $end            reduce using rule 4 (Axiom -> Axiom Function .)


state 5

    (8) Block -> Exp . ;

    ;               shift and go to state 38


state 6

    (9) Block -> If .

    ID              reduce using rule 9 (Block -> If .)
    IF              reduce using rule 9 (Block -> If .)
    WHILE           reduce using rule 9 (Block -> If .)
    SWITCH          reduce using rule 9 (Block -> If .)
    (               reduce using rule 9 (Block -> If .)
    NUM             reduce using rule 9 (Block -> If .)
    ¿               reduce using rule 9 (Block -> If .)
    NEG             reduce using rule 9 (Block -> If .)
    SUB             reduce using rule 9 (Block -> If .)
    $end            reduce using rule 9 (Block -> If .)
    ELSE            reduce using rule 9 (Block -> If .)
    }               reduce using rule 9 (Block -> If .)
    :               reduce using rule 9 (Block -> If .)


state 7

    (10) Block -> IfElse .

    ID              reduce using rule 10 (Block -> IfElse .)
    IF              reduce using rule 10 (Block -> IfElse .)
    WHILE           reduce using rule 10 (Block -> IfElse .)
    SWITCH          reduce using rule 10 (Block -> IfElse .)
    (               reduce using rule 10 (Block -> IfElse .)
    NUM             reduce using rule 10 (Block -> IfElse .)
    ¿               reduce using rule 10 (Block -> IfElse .)
    NEG             reduce using rule 10 (Block -> IfElse .)
    SUB             reduce using rule 10 (Block -> IfElse .)
    $end            reduce using rule 10 (Block -> IfElse .)
    ELSE            reduce using rule 10 (Block -> IfElse .)
    }               reduce using rule 10 (Block -> IfElse .)
    :               reduce using rule 10 (Block -> IfElse .)


state 8

    (11) Block -> While .

    ID              reduce using rule 11 (Block -> While .)
    IF              reduce using rule 11 (Block -> While .)
    WHILE           reduce using rule 11 (Block -> While .)
    SWITCH          reduce using rule 11 (Block -> While .)
    (               reduce using rule 11 (Block -> While .)
    NUM             reduce using rule 11 (Block -> While .)
    ¿               reduce using rule 11 (Block -> While .)
    NEG             reduce using rule 11 (Block -> While .)
    SUB             reduce using rule 11 (Block -> While .)
    $end            reduce using rule 11 (Block -> While .)
    ELSE            reduce using rule 11 (Block -> While .)
    }               reduce using rule 11 (Block -> While .)
    :               reduce using rule 11 (Block -> While .)


state 9

    (12) Block -> Switch .

    ID              reduce using rule 12 (Block -> Switch .)
    IF              reduce using rule 12 (Block -> Switch .)
    WHILE           reduce using rule 12 (Block -> Switch .)
    SWITCH          reduce using rule 12 (Block -> Switch .)
    (               reduce using rule 12 (Block -> Switch .)
    NUM             reduce using rule 12 (Block -> Switch .)
    ¿               reduce using rule 12 (Block -> Switch .)
    NEG             reduce using rule 12 (Block -> Switch .)
    SUB             reduce using rule 12 (Block -> Switch .)
    $end            reduce using rule 12 (Block -> Switch .)
    ELSE            reduce using rule 12 (Block -> Switch .)
    }               reduce using rule 12 (Block -> Switch .)
    :               reduce using rule 12 (Block -> Switch .)


state 10

    (16) Function -> ID . FunScope FunCases Body
    (60) Atrib -> ID . LARROW AtribOp
    (62) Atrib -> ID . SWAP ID
    (47) Decl -> ID . ID
    (48) DeclArray -> ID . ID DeclArraySize
    (55) DeclAtrib -> ID . ID LARROW AtribOp
    (51) AtribArray -> ID . ArraySize LARROW AtribOp
    (57) AtribNum -> ID . LARROW AtribOp
    (80) Base -> ID .
    (84) FunCall -> ID . ( FunArg )
    (69) AccessArray -> ID . ArraySize
    (17) FunScope -> . :
    (53) ArraySize -> . ArraySize [ AtribOp ]
    (54) ArraySize -> . [ AtribOp ]

    LARROW          shift and go to state 41
    SWAP            shift and go to state 42
    ID              shift and go to state 39
    ?               reduce using rule 80 (Base -> ID .)
    POW             reduce using rule 80 (Base -> ID .)
    MUL             reduce using rule 80 (Base -> ID .)
    DIV             reduce using rule 80 (Base -> ID .)
    ADD             reduce using rule 80 (Base -> ID .)
    SUB             reduce using rule 80 (Base -> ID .)
    AND             reduce using rule 80 (Base -> ID .)
    OR              reduce using rule 80 (Base -> ID .)
    LESSER          reduce using rule 80 (Base -> ID .)
    GREATER         reduce using rule 80 (Base -> ID .)
    LEQ             reduce using rule 80 (Base -> ID .)
    GEQ             reduce using rule 80 (Base -> ID .)
    EQUAL           reduce using rule 80 (Base -> ID .)
    ;               reduce using rule 80 (Base -> ID .)
    RARROW          reduce using rule 80 (Base -> ID .)
    (               shift and go to state 44
    :               shift and go to state 45
    [               shift and go to state 46

    FunScope                       shift and go to state 40
    ArraySize                      shift and go to state 43

state 11

    (40) Exp -> Atrib .

    ;               reduce using rule 40 (Exp -> Atrib .)


state 12

    (41) Exp -> Op .
    (46) AtribOp -> Op .

    ;               reduce using rule 41 (Exp -> Op .)
    RARROW          reduce using rule 46 (AtribOp -> Op .)


state 13

    (42) Exp -> Decl .

    ;               reduce using rule 42 (Exp -> Decl .)


state 14

    (43) Exp -> DeclArray .

    ;               reduce using rule 43 (Exp -> DeclArray .)


state 15

    (44) Exp -> DeclAtrib .

    ;               reduce using rule 44 (Exp -> DeclAtrib .)


state 16

    (25) If -> IfScope . AtribOp Body
    (27) IfElse -> IfScope . AtribOp Body ElseScope Body
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 47
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 17

    (61) Atrib -> AtribOp . RARROW ID
    (56) DeclAtrib -> AtribOp . RARROW ID ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize
    (58) AtribNum -> AtribOp . RARROW ID

    RARROW          shift and go to state 51


state 18

    (29) While -> WhileScope . ( AtribOp ) Body

    (               shift and go to state 52


state 19

    (79) Base -> ( . AtribOp )
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 53
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 20

    (31) Switch -> SwitchScope . Conds { Cases }
    (32) Conds -> . Conds , Cond
    (33) Conds -> . Cond
    (34) Cond -> . ID ( AtribOp )
    (35) Cond -> . ( AtribOp )

    ID              shift and go to state 56
    (               shift and go to state 57

    Conds                          shift and go to state 54
    Cond                           shift and go to state 55

state 21

    (63) Atrib -> AtribArray .
    (59) AtribNum -> AtribArray .

    ;               reduce using rule 63 (Atrib -> AtribArray .)
    RARROW          reduce using rule 59 (AtribNum -> AtribArray .)


state 22

    (64) Op -> OpBin .
    (70) OpBin -> OpBin . OpLogico TermPlus
    (89) OpLogico -> . AND
    (90) OpLogico -> . OR
    (91) OpLogico -> . LESSER
    (92) OpLogico -> . GREATER
    (93) OpLogico -> . LEQ
    (94) OpLogico -> . GEQ
    (95) OpLogico -> . EQUAL

    ;               reduce using rule 64 (Op -> OpBin .)
    RARROW          reduce using rule 64 (Op -> OpBin .)
    {               reduce using rule 64 (Op -> OpBin .)
    ID              reduce using rule 64 (Op -> OpBin .)
    IF              reduce using rule 64 (Op -> OpBin .)
    WHILE           reduce using rule 64 (Op -> OpBin .)
    SWITCH          reduce using rule 64 (Op -> OpBin .)
    (               reduce using rule 64 (Op -> OpBin .)
    NUM             reduce using rule 64 (Op -> OpBin .)
    ¿               reduce using rule 64 (Op -> OpBin .)
    NEG             reduce using rule 64 (Op -> OpBin .)
    SUB             reduce using rule 64 (Op -> OpBin .)
    )               reduce using rule 64 (Op -> OpBin .)
    ,               reduce using rule 64 (Op -> OpBin .)
    ]               reduce using rule 64 (Op -> OpBin .)
    AND             shift and go to state 59
    OR              shift and go to state 60
    LESSER          shift and go to state 61
    GREATER         shift and go to state 62
    LEQ             shift and go to state 63
    GEQ             shift and go to state 64
    EQUAL           shift and go to state 65

    OpLogico                       shift and go to state 58

state 23

    (24) IfScope -> IF .

    ID              reduce using rule 24 (IfScope -> IF .)
    (               reduce using rule 24 (IfScope -> IF .)
    NUM             reduce using rule 24 (IfScope -> IF .)
    ¿               reduce using rule 24 (IfScope -> IF .)
    NEG             reduce using rule 24 (IfScope -> IF .)
    SUB             reduce using rule 24 (IfScope -> IF .)


state 24

    (28) WhileScope -> WHILE .

    (               reduce using rule 28 (WhileScope -> WHILE .)


state 25

    (30) SwitchScope -> SWITCH .

    ID              reduce using rule 30 (SwitchScope -> SWITCH .)
    (               reduce using rule 30 (SwitchScope -> SWITCH .)


state 26

    (45) AtribOp -> AtribNum .

    RARROW          reduce using rule 45 (AtribOp -> AtribNum .)
    {               reduce using rule 45 (AtribOp -> AtribNum .)
    ID              reduce using rule 45 (AtribOp -> AtribNum .)
    IF              reduce using rule 45 (AtribOp -> AtribNum .)
    WHILE           reduce using rule 45 (AtribOp -> AtribNum .)
    SWITCH          reduce using rule 45 (AtribOp -> AtribNum .)
    (               reduce using rule 45 (AtribOp -> AtribNum .)
    NUM             reduce using rule 45 (AtribOp -> AtribNum .)
    ¿               reduce using rule 45 (AtribOp -> AtribNum .)
    NEG             reduce using rule 45 (AtribOp -> AtribNum .)
    SUB             reduce using rule 45 (AtribOp -> AtribNum .)
    )               reduce using rule 45 (AtribOp -> AtribNum .)
    ;               reduce using rule 45 (AtribOp -> AtribNum .)
    ,               reduce using rule 45 (AtribOp -> AtribNum .)
    ]               reduce using rule 45 (AtribOp -> AtribNum .)


state 27

    (71) OpBin -> TermPlus .
    (72) TermPlus -> TermPlus . OpPlus TermMult
    (96) OpPlus -> . ADD
    (97) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 71 (OpBin -> TermPlus .)
    OR              reduce using rule 71 (OpBin -> TermPlus .)
    LESSER          reduce using rule 71 (OpBin -> TermPlus .)
    GREATER         reduce using rule 71 (OpBin -> TermPlus .)
    LEQ             reduce using rule 71 (OpBin -> TermPlus .)
    GEQ             reduce using rule 71 (OpBin -> TermPlus .)
    EQUAL           reduce using rule 71 (OpBin -> TermPlus .)
    ;               reduce using rule 71 (OpBin -> TermPlus .)
    RARROW          reduce using rule 71 (OpBin -> TermPlus .)
    {               reduce using rule 71 (OpBin -> TermPlus .)
    ID              reduce using rule 71 (OpBin -> TermPlus .)
    IF              reduce using rule 71 (OpBin -> TermPlus .)
    WHILE           reduce using rule 71 (OpBin -> TermPlus .)
    SWITCH          reduce using rule 71 (OpBin -> TermPlus .)
    (               reduce using rule 71 (OpBin -> TermPlus .)
    NUM             reduce using rule 71 (OpBin -> TermPlus .)
    ¿               reduce using rule 71 (OpBin -> TermPlus .)
    NEG             reduce using rule 71 (OpBin -> TermPlus .)
    )               reduce using rule 71 (OpBin -> TermPlus .)
    ,               reduce using rule 71 (OpBin -> TermPlus .)
    ]               reduce using rule 71 (OpBin -> TermPlus .)
    ADD             shift and go to state 67
    SUB             shift and go to state 68

  ! SUB             [ reduce using rule 71 (OpBin -> TermPlus .) ]

    OpPlus                         shift and go to state 66

state 28

    (73) TermPlus -> TermMult .
    (74) TermMult -> TermMult . OpMult TermPow
    (98) OpMult -> . MUL
    (99) OpMult -> . DIV

    ADD             reduce using rule 73 (TermPlus -> TermMult .)
    SUB             reduce using rule 73 (TermPlus -> TermMult .)
    AND             reduce using rule 73 (TermPlus -> TermMult .)
    OR              reduce using rule 73 (TermPlus -> TermMult .)
    LESSER          reduce using rule 73 (TermPlus -> TermMult .)
    GREATER         reduce using rule 73 (TermPlus -> TermMult .)
    LEQ             reduce using rule 73 (TermPlus -> TermMult .)
    GEQ             reduce using rule 73 (TermPlus -> TermMult .)
    EQUAL           reduce using rule 73 (TermPlus -> TermMult .)
    ;               reduce using rule 73 (TermPlus -> TermMult .)
    RARROW          reduce using rule 73 (TermPlus -> TermMult .)
    {               reduce using rule 73 (TermPlus -> TermMult .)
    ID              reduce using rule 73 (TermPlus -> TermMult .)
    IF              reduce using rule 73 (TermPlus -> TermMult .)
    WHILE           reduce using rule 73 (TermPlus -> TermMult .)
    SWITCH          reduce using rule 73 (TermPlus -> TermMult .)
    (               reduce using rule 73 (TermPlus -> TermMult .)
    NUM             reduce using rule 73 (TermPlus -> TermMult .)
    ¿               reduce using rule 73 (TermPlus -> TermMult .)
    NEG             reduce using rule 73 (TermPlus -> TermMult .)
    )               reduce using rule 73 (TermPlus -> TermMult .)
    ,               reduce using rule 73 (TermPlus -> TermMult .)
    ]               reduce using rule 73 (TermPlus -> TermMult .)
    MUL             shift and go to state 70
    DIV             shift and go to state 71

    OpMult                         shift and go to state 69

state 29

    (75) TermMult -> TermPow .
    (76) TermPow -> TermPow . OpPow Base
    (100) OpPow -> . POW

    MUL             reduce using rule 75 (TermMult -> TermPow .)
    DIV             reduce using rule 75 (TermMult -> TermPow .)
    ADD             reduce using rule 75 (TermMult -> TermPow .)
    SUB             reduce using rule 75 (TermMult -> TermPow .)
    AND             reduce using rule 75 (TermMult -> TermPow .)
    OR              reduce using rule 75 (TermMult -> TermPow .)
    LESSER          reduce using rule 75 (TermMult -> TermPow .)
    GREATER         reduce using rule 75 (TermMult -> TermPow .)
    LEQ             reduce using rule 75 (TermMult -> TermPow .)
    GEQ             reduce using rule 75 (TermMult -> TermPow .)
    EQUAL           reduce using rule 75 (TermMult -> TermPow .)
    ;               reduce using rule 75 (TermMult -> TermPow .)
    RARROW          reduce using rule 75 (TermMult -> TermPow .)
    {               reduce using rule 75 (TermMult -> TermPow .)
    ID              reduce using rule 75 (TermMult -> TermPow .)
    IF              reduce using rule 75 (TermMult -> TermPow .)
    WHILE           reduce using rule 75 (TermMult -> TermPow .)
    SWITCH          reduce using rule 75 (TermMult -> TermPow .)
    (               reduce using rule 75 (TermMult -> TermPow .)
    NUM             reduce using rule 75 (TermMult -> TermPow .)
    ¿               reduce using rule 75 (TermMult -> TermPow .)
    NEG             reduce using rule 75 (TermMult -> TermPow .)
    )               reduce using rule 75 (TermMult -> TermPow .)
    ,               reduce using rule 75 (TermMult -> TermPow .)
    ]               reduce using rule 75 (TermMult -> TermPow .)
    POW             shift and go to state 73

    OpPow                          shift and go to state 72

state 30

    (77) TermPow -> Base .
    (68) OpUno -> Base . ?

    POW             reduce using rule 77 (TermPow -> Base .)
    MUL             reduce using rule 77 (TermPow -> Base .)
    DIV             reduce using rule 77 (TermPow -> Base .)
    ADD             reduce using rule 77 (TermPow -> Base .)
    SUB             reduce using rule 77 (TermPow -> Base .)
    AND             reduce using rule 77 (TermPow -> Base .)
    OR              reduce using rule 77 (TermPow -> Base .)
    LESSER          reduce using rule 77 (TermPow -> Base .)
    GREATER         reduce using rule 77 (TermPow -> Base .)
    LEQ             reduce using rule 77 (TermPow -> Base .)
    GEQ             reduce using rule 77 (TermPow -> Base .)
    EQUAL           reduce using rule 77 (TermPow -> Base .)
    ;               reduce using rule 77 (TermPow -> Base .)
    RARROW          reduce using rule 77 (TermPow -> Base .)
    {               reduce using rule 77 (TermPow -> Base .)
    ID              reduce using rule 77 (TermPow -> Base .)
    IF              reduce using rule 77 (TermPow -> Base .)
    WHILE           reduce using rule 77 (TermPow -> Base .)
    SWITCH          reduce using rule 77 (TermPow -> Base .)
    (               reduce using rule 77 (TermPow -> Base .)
    NUM             reduce using rule 77 (TermPow -> Base .)
    ¿               reduce using rule 77 (TermPow -> Base .)
    NEG             reduce using rule 77 (TermPow -> Base .)
    )               reduce using rule 77 (TermPow -> Base .)
    ,               reduce using rule 77 (TermPow -> Base .)
    ]               reduce using rule 77 (TermPow -> Base .)
    ?               shift and go to state 74


state 31

    (78) Base -> OpUno .

    ?               reduce using rule 78 (Base -> OpUno .)
    POW             reduce using rule 78 (Base -> OpUno .)
    MUL             reduce using rule 78 (Base -> OpUno .)
    DIV             reduce using rule 78 (Base -> OpUno .)
    ADD             reduce using rule 78 (Base -> OpUno .)
    SUB             reduce using rule 78 (Base -> OpUno .)
    AND             reduce using rule 78 (Base -> OpUno .)
    OR              reduce using rule 78 (Base -> OpUno .)
    LESSER          reduce using rule 78 (Base -> OpUno .)
    GREATER         reduce using rule 78 (Base -> OpUno .)
    LEQ             reduce using rule 78 (Base -> OpUno .)
    GEQ             reduce using rule 78 (Base -> OpUno .)
    EQUAL           reduce using rule 78 (Base -> OpUno .)
    ;               reduce using rule 78 (Base -> OpUno .)
    RARROW          reduce using rule 78 (Base -> OpUno .)
    {               reduce using rule 78 (Base -> OpUno .)
    ID              reduce using rule 78 (Base -> OpUno .)
    IF              reduce using rule 78 (Base -> OpUno .)
    WHILE           reduce using rule 78 (Base -> OpUno .)
    SWITCH          reduce using rule 78 (Base -> OpUno .)
    (               reduce using rule 78 (Base -> OpUno .)
    NUM             reduce using rule 78 (Base -> OpUno .)
    ¿               reduce using rule 78 (Base -> OpUno .)
    NEG             reduce using rule 78 (Base -> OpUno .)
    )               reduce using rule 78 (Base -> OpUno .)
    ,               reduce using rule 78 (Base -> OpUno .)
    ]               reduce using rule 78 (Base -> OpUno .)


state 32

    (81) Base -> NUM .

    ?               reduce using rule 81 (Base -> NUM .)
    POW             reduce using rule 81 (Base -> NUM .)
    MUL             reduce using rule 81 (Base -> NUM .)
    DIV             reduce using rule 81 (Base -> NUM .)
    ADD             reduce using rule 81 (Base -> NUM .)
    SUB             reduce using rule 81 (Base -> NUM .)
    AND             reduce using rule 81 (Base -> NUM .)
    OR              reduce using rule 81 (Base -> NUM .)
    LESSER          reduce using rule 81 (Base -> NUM .)
    GREATER         reduce using rule 81 (Base -> NUM .)
    LEQ             reduce using rule 81 (Base -> NUM .)
    GEQ             reduce using rule 81 (Base -> NUM .)
    EQUAL           reduce using rule 81 (Base -> NUM .)
    ;               reduce using rule 81 (Base -> NUM .)
    RARROW          reduce using rule 81 (Base -> NUM .)
    {               reduce using rule 81 (Base -> NUM .)
    ID              reduce using rule 81 (Base -> NUM .)
    IF              reduce using rule 81 (Base -> NUM .)
    WHILE           reduce using rule 81 (Base -> NUM .)
    SWITCH          reduce using rule 81 (Base -> NUM .)
    (               reduce using rule 81 (Base -> NUM .)
    NUM             reduce using rule 81 (Base -> NUM .)
    ¿               reduce using rule 81 (Base -> NUM .)
    NEG             reduce using rule 81 (Base -> NUM .)
    )               reduce using rule 81 (Base -> NUM .)
    ,               reduce using rule 81 (Base -> NUM .)
    ]               reduce using rule 81 (Base -> NUM .)


state 33

    (82) Base -> FunCall .

    ?               reduce using rule 82 (Base -> FunCall .)
    POW             reduce using rule 82 (Base -> FunCall .)
    MUL             reduce using rule 82 (Base -> FunCall .)
    DIV             reduce using rule 82 (Base -> FunCall .)
    ADD             reduce using rule 82 (Base -> FunCall .)
    SUB             reduce using rule 82 (Base -> FunCall .)
    AND             reduce using rule 82 (Base -> FunCall .)
    OR              reduce using rule 82 (Base -> FunCall .)
    LESSER          reduce using rule 82 (Base -> FunCall .)
    GREATER         reduce using rule 82 (Base -> FunCall .)
    LEQ             reduce using rule 82 (Base -> FunCall .)
    GEQ             reduce using rule 82 (Base -> FunCall .)
    EQUAL           reduce using rule 82 (Base -> FunCall .)
    ;               reduce using rule 82 (Base -> FunCall .)
    RARROW          reduce using rule 82 (Base -> FunCall .)
    {               reduce using rule 82 (Base -> FunCall .)
    ID              reduce using rule 82 (Base -> FunCall .)
    IF              reduce using rule 82 (Base -> FunCall .)
    WHILE           reduce using rule 82 (Base -> FunCall .)
    SWITCH          reduce using rule 82 (Base -> FunCall .)
    (               reduce using rule 82 (Base -> FunCall .)
    NUM             reduce using rule 82 (Base -> FunCall .)
    ¿               reduce using rule 82 (Base -> FunCall .)
    NEG             reduce using rule 82 (Base -> FunCall .)
    )               reduce using rule 82 (Base -> FunCall .)
    ,               reduce using rule 82 (Base -> FunCall .)
    ]               reduce using rule 82 (Base -> FunCall .)


state 34

    (83) Base -> ¿ .

    ?               reduce using rule 83 (Base -> ¿ .)
    POW             reduce using rule 83 (Base -> ¿ .)
    MUL             reduce using rule 83 (Base -> ¿ .)
    DIV             reduce using rule 83 (Base -> ¿ .)
    ADD             reduce using rule 83 (Base -> ¿ .)
    SUB             reduce using rule 83 (Base -> ¿ .)
    AND             reduce using rule 83 (Base -> ¿ .)
    OR              reduce using rule 83 (Base -> ¿ .)
    LESSER          reduce using rule 83 (Base -> ¿ .)
    GREATER         reduce using rule 83 (Base -> ¿ .)
    LEQ             reduce using rule 83 (Base -> ¿ .)
    GEQ             reduce using rule 83 (Base -> ¿ .)
    EQUAL           reduce using rule 83 (Base -> ¿ .)
    ;               reduce using rule 83 (Base -> ¿ .)
    RARROW          reduce using rule 83 (Base -> ¿ .)
    {               reduce using rule 83 (Base -> ¿ .)
    ID              reduce using rule 83 (Base -> ¿ .)
    IF              reduce using rule 83 (Base -> ¿ .)
    WHILE           reduce using rule 83 (Base -> ¿ .)
    SWITCH          reduce using rule 83 (Base -> ¿ .)
    (               reduce using rule 83 (Base -> ¿ .)
    NUM             reduce using rule 83 (Base -> ¿ .)
    ¿               reduce using rule 83 (Base -> ¿ .)
    NEG             reduce using rule 83 (Base -> ¿ .)
    )               reduce using rule 83 (Base -> ¿ .)
    ,               reduce using rule 83 (Base -> ¿ .)
    ]               reduce using rule 83 (Base -> ¿ .)


state 35

    (65) OpUno -> NEG . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    (               shift and go to state 19
    ID              shift and go to state 76
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Base                           shift and go to state 75
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 36

    (66) OpUno -> AccessArray .

    ?               reduce using rule 66 (OpUno -> AccessArray .)
    POW             reduce using rule 66 (OpUno -> AccessArray .)
    MUL             reduce using rule 66 (OpUno -> AccessArray .)
    DIV             reduce using rule 66 (OpUno -> AccessArray .)
    ADD             reduce using rule 66 (OpUno -> AccessArray .)
    SUB             reduce using rule 66 (OpUno -> AccessArray .)
    AND             reduce using rule 66 (OpUno -> AccessArray .)
    OR              reduce using rule 66 (OpUno -> AccessArray .)
    LESSER          reduce using rule 66 (OpUno -> AccessArray .)
    GREATER         reduce using rule 66 (OpUno -> AccessArray .)
    LEQ             reduce using rule 66 (OpUno -> AccessArray .)
    GEQ             reduce using rule 66 (OpUno -> AccessArray .)
    EQUAL           reduce using rule 66 (OpUno -> AccessArray .)
    ;               reduce using rule 66 (OpUno -> AccessArray .)
    RARROW          reduce using rule 66 (OpUno -> AccessArray .)
    {               reduce using rule 66 (OpUno -> AccessArray .)
    ID              reduce using rule 66 (OpUno -> AccessArray .)
    IF              reduce using rule 66 (OpUno -> AccessArray .)
    WHILE           reduce using rule 66 (OpUno -> AccessArray .)
    SWITCH          reduce using rule 66 (OpUno -> AccessArray .)
    (               reduce using rule 66 (OpUno -> AccessArray .)
    NUM             reduce using rule 66 (OpUno -> AccessArray .)
    ¿               reduce using rule 66 (OpUno -> AccessArray .)
    NEG             reduce using rule 66 (OpUno -> AccessArray .)
    )               reduce using rule 66 (OpUno -> AccessArray .)
    ,               reduce using rule 66 (OpUno -> AccessArray .)
    ]               reduce using rule 66 (OpUno -> AccessArray .)


state 37

    (67) OpUno -> SUB . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    (               shift and go to state 19
    ID              shift and go to state 76
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Base                           shift and go to state 77
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 38

    (8) Block -> Exp ; .

    ID              reduce using rule 8 (Block -> Exp ; .)
    IF              reduce using rule 8 (Block -> Exp ; .)
    WHILE           reduce using rule 8 (Block -> Exp ; .)
    SWITCH          reduce using rule 8 (Block -> Exp ; .)
    (               reduce using rule 8 (Block -> Exp ; .)
    NUM             reduce using rule 8 (Block -> Exp ; .)
    ¿               reduce using rule 8 (Block -> Exp ; .)
    NEG             reduce using rule 8 (Block -> Exp ; .)
    SUB             reduce using rule 8 (Block -> Exp ; .)
    $end            reduce using rule 8 (Block -> Exp ; .)
    ELSE            reduce using rule 8 (Block -> Exp ; .)
    }               reduce using rule 8 (Block -> Exp ; .)
    :               reduce using rule 8 (Block -> Exp ; .)


state 39

    (47) Decl -> ID ID .
    (48) DeclArray -> ID ID . DeclArraySize
    (55) DeclAtrib -> ID ID . LARROW AtribOp
    (49) DeclArraySize -> . DeclArraySize [ NUM ]
    (50) DeclArraySize -> . [ NUM ]

    ;               reduce using rule 47 (Decl -> ID ID .)
    LARROW          shift and go to state 79
    [               shift and go to state 80

    DeclArraySize                  shift and go to state 78

state 40

    (16) Function -> ID FunScope . FunCases Body
    (18) FunCases -> . FunExtra RARROW ID
    (19) FunCases -> . RARROW ID
    (20) FunCases -> . FunExtra
    (21) FunCases -> .
    (22) FunExtra -> . FunExtra , ID
    (23) FunExtra -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RARROW          shift and go to state 84
    {               reduce using rule 21 (FunCases -> .)
    IF              reduce using rule 21 (FunCases -> .)
    WHILE           reduce using rule 21 (FunCases -> .)
    SWITCH          reduce using rule 21 (FunCases -> .)
    (               reduce using rule 21 (FunCases -> .)
    NUM             reduce using rule 21 (FunCases -> .)
    ¿               reduce using rule 21 (FunCases -> .)
    NEG             reduce using rule 21 (FunCases -> .)
    SUB             reduce using rule 21 (FunCases -> .)
    ID              shift and go to state 81

  ! ID              [ reduce using rule 21 (FunCases -> .) ]

    FunCases                       shift and go to state 82
    FunExtra                       shift and go to state 83

state 41

    (60) Atrib -> ID LARROW . AtribOp
    (57) AtribNum -> ID LARROW . AtribOp
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 85
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 42

    (62) Atrib -> ID SWAP . ID

    ID              shift and go to state 86


state 43

    (51) AtribArray -> ID ArraySize . LARROW AtribOp
    (69) AccessArray -> ID ArraySize .
    (53) ArraySize -> ArraySize . [ AtribOp ]

    LARROW          shift and go to state 87
    ?               reduce using rule 69 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 69 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 69 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 69 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 69 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 69 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 69 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 69 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 69 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 69 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 69 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 69 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 69 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 69 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 69 (AccessArray -> ID ArraySize .)
    {               reduce using rule 69 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 69 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 69 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 69 (AccessArray -> ID ArraySize .)
    SWITCH          reduce using rule 69 (AccessArray -> ID ArraySize .)
    (               reduce using rule 69 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 69 (AccessArray -> ID ArraySize .)
    ¿               reduce using rule 69 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 69 (AccessArray -> ID ArraySize .)
    )               reduce using rule 69 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 69 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 69 (AccessArray -> ID ArraySize .)
    [               shift and go to state 88


state 44

    (84) FunCall -> ID ( . FunArg )
    (85) FunArg -> . FunRec
    (86) FunArg -> .
    (87) FunRec -> . FunRec , AtribOp
    (88) FunRec -> . AtribOp
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    )               reduce using rule 86 (FunArg -> .)
    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    FunArg                         shift and go to state 89
    FunRec                         shift and go to state 90
    AtribOp                        shift and go to state 91
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 45

    (17) FunScope -> : .

    RARROW          reduce using rule 17 (FunScope -> : .)
    ID              reduce using rule 17 (FunScope -> : .)
    {               reduce using rule 17 (FunScope -> : .)
    IF              reduce using rule 17 (FunScope -> : .)
    WHILE           reduce using rule 17 (FunScope -> : .)
    SWITCH          reduce using rule 17 (FunScope -> : .)
    (               reduce using rule 17 (FunScope -> : .)
    NUM             reduce using rule 17 (FunScope -> : .)
    ¿               reduce using rule 17 (FunScope -> : .)
    NEG             reduce using rule 17 (FunScope -> : .)
    SUB             reduce using rule 17 (FunScope -> : .)


state 46

    (54) ArraySize -> [ . AtribOp ]
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 92
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 47

    (25) If -> IfScope AtribOp . Body
    (27) IfElse -> IfScope AtribOp . Body ElseScope Body
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize
    (13) Body -> . { }
    (14) Body -> . Block
    (15) Body -> . { Code }
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    RARROW          shift and go to state 94
    {               shift and go to state 96
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    Body                           shift and go to state 93
    Block                          shift and go to state 97
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 48

    (46) AtribOp -> Op .

    RARROW          reduce using rule 46 (AtribOp -> Op .)
    {               reduce using rule 46 (AtribOp -> Op .)
    ID              reduce using rule 46 (AtribOp -> Op .)
    IF              reduce using rule 46 (AtribOp -> Op .)
    WHILE           reduce using rule 46 (AtribOp -> Op .)
    SWITCH          reduce using rule 46 (AtribOp -> Op .)
    (               reduce using rule 46 (AtribOp -> Op .)
    NUM             reduce using rule 46 (AtribOp -> Op .)
    ¿               reduce using rule 46 (AtribOp -> Op .)
    NEG             reduce using rule 46 (AtribOp -> Op .)
    SUB             reduce using rule 46 (AtribOp -> Op .)
    )               reduce using rule 46 (AtribOp -> Op .)
    ;               reduce using rule 46 (AtribOp -> Op .)
    ,               reduce using rule 46 (AtribOp -> Op .)
    ]               reduce using rule 46 (AtribOp -> Op .)


state 49

    (57) AtribNum -> ID . LARROW AtribOp
    (51) AtribArray -> ID . ArraySize LARROW AtribOp
    (80) Base -> ID .
    (84) FunCall -> ID . ( FunArg )
    (69) AccessArray -> ID . ArraySize
    (53) ArraySize -> . ArraySize [ AtribOp ]
    (54) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    LARROW          shift and go to state 98
    ?               reduce using rule 80 (Base -> ID .)
    POW             reduce using rule 80 (Base -> ID .)
    MUL             reduce using rule 80 (Base -> ID .)
    DIV             reduce using rule 80 (Base -> ID .)
    ADD             reduce using rule 80 (Base -> ID .)
    SUB             reduce using rule 80 (Base -> ID .)
    AND             reduce using rule 80 (Base -> ID .)
    OR              reduce using rule 80 (Base -> ID .)
    LESSER          reduce using rule 80 (Base -> ID .)
    GREATER         reduce using rule 80 (Base -> ID .)
    LEQ             reduce using rule 80 (Base -> ID .)
    GEQ             reduce using rule 80 (Base -> ID .)
    EQUAL           reduce using rule 80 (Base -> ID .)
    RARROW          reduce using rule 80 (Base -> ID .)
    {               reduce using rule 80 (Base -> ID .)
    ID              reduce using rule 80 (Base -> ID .)
    IF              reduce using rule 80 (Base -> ID .)
    WHILE           reduce using rule 80 (Base -> ID .)
    SWITCH          reduce using rule 80 (Base -> ID .)
    NUM             reduce using rule 80 (Base -> ID .)
    ¿               reduce using rule 80 (Base -> ID .)
    NEG             reduce using rule 80 (Base -> ID .)
    )               reduce using rule 80 (Base -> ID .)
    ;               reduce using rule 80 (Base -> ID .)
    ,               reduce using rule 80 (Base -> ID .)
    ]               reduce using rule 80 (Base -> ID .)
    (               shift and go to state 44
    [               shift and go to state 46

  ! (               [ reduce using rule 80 (Base -> ID .) ]

    ArraySize                      shift and go to state 43

state 50

    (59) AtribNum -> AtribArray .

    RARROW          reduce using rule 59 (AtribNum -> AtribArray .)
    {               reduce using rule 59 (AtribNum -> AtribArray .)
    ID              reduce using rule 59 (AtribNum -> AtribArray .)
    IF              reduce using rule 59 (AtribNum -> AtribArray .)
    WHILE           reduce using rule 59 (AtribNum -> AtribArray .)
    SWITCH          reduce using rule 59 (AtribNum -> AtribArray .)
    (               reduce using rule 59 (AtribNum -> AtribArray .)
    NUM             reduce using rule 59 (AtribNum -> AtribArray .)
    ¿               reduce using rule 59 (AtribNum -> AtribArray .)
    NEG             reduce using rule 59 (AtribNum -> AtribArray .)
    SUB             reduce using rule 59 (AtribNum -> AtribArray .)
    )               reduce using rule 59 (AtribNum -> AtribArray .)
    ;               reduce using rule 59 (AtribNum -> AtribArray .)
    ,               reduce using rule 59 (AtribNum -> AtribArray .)
    ]               reduce using rule 59 (AtribNum -> AtribArray .)


state 51

    (61) Atrib -> AtribOp RARROW . ID
    (56) DeclAtrib -> AtribOp RARROW . ID ID
    (52) AtribArray -> AtribOp RARROW . ID ArraySize
    (58) AtribNum -> AtribOp RARROW . ID

    ID              shift and go to state 99


state 52

    (29) While -> WhileScope ( . AtribOp ) Body
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 100
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 53

    (79) Base -> ( AtribOp . )
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 101
    RARROW          shift and go to state 94


state 54

    (31) Switch -> SwitchScope Conds . { Cases }
    (32) Conds -> Conds . , Cond

    {               shift and go to state 102
    ,               shift and go to state 103


state 55

    (33) Conds -> Cond .

    {               reduce using rule 33 (Conds -> Cond .)
    ,               reduce using rule 33 (Conds -> Cond .)


state 56

    (34) Cond -> ID . ( AtribOp )

    (               shift and go to state 104


state 57

    (35) Cond -> ( . AtribOp )
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 105
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 58

    (70) OpBin -> OpBin OpLogico . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    (               shift and go to state 19
    ID              shift and go to state 76
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    TermPlus                       shift and go to state 106
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 59

    (89) OpLogico -> AND .

    (               reduce using rule 89 (OpLogico -> AND .)
    ID              reduce using rule 89 (OpLogico -> AND .)
    NUM             reduce using rule 89 (OpLogico -> AND .)
    ¿               reduce using rule 89 (OpLogico -> AND .)
    NEG             reduce using rule 89 (OpLogico -> AND .)
    SUB             reduce using rule 89 (OpLogico -> AND .)


state 60

    (90) OpLogico -> OR .

    (               reduce using rule 90 (OpLogico -> OR .)
    ID              reduce using rule 90 (OpLogico -> OR .)
    NUM             reduce using rule 90 (OpLogico -> OR .)
    ¿               reduce using rule 90 (OpLogico -> OR .)
    NEG             reduce using rule 90 (OpLogico -> OR .)
    SUB             reduce using rule 90 (OpLogico -> OR .)


state 61

    (91) OpLogico -> LESSER .

    (               reduce using rule 91 (OpLogico -> LESSER .)
    ID              reduce using rule 91 (OpLogico -> LESSER .)
    NUM             reduce using rule 91 (OpLogico -> LESSER .)
    ¿               reduce using rule 91 (OpLogico -> LESSER .)
    NEG             reduce using rule 91 (OpLogico -> LESSER .)
    SUB             reduce using rule 91 (OpLogico -> LESSER .)


state 62

    (92) OpLogico -> GREATER .

    (               reduce using rule 92 (OpLogico -> GREATER .)
    ID              reduce using rule 92 (OpLogico -> GREATER .)
    NUM             reduce using rule 92 (OpLogico -> GREATER .)
    ¿               reduce using rule 92 (OpLogico -> GREATER .)
    NEG             reduce using rule 92 (OpLogico -> GREATER .)
    SUB             reduce using rule 92 (OpLogico -> GREATER .)


state 63

    (93) OpLogico -> LEQ .

    (               reduce using rule 93 (OpLogico -> LEQ .)
    ID              reduce using rule 93 (OpLogico -> LEQ .)
    NUM             reduce using rule 93 (OpLogico -> LEQ .)
    ¿               reduce using rule 93 (OpLogico -> LEQ .)
    NEG             reduce using rule 93 (OpLogico -> LEQ .)
    SUB             reduce using rule 93 (OpLogico -> LEQ .)


state 64

    (94) OpLogico -> GEQ .

    (               reduce using rule 94 (OpLogico -> GEQ .)
    ID              reduce using rule 94 (OpLogico -> GEQ .)
    NUM             reduce using rule 94 (OpLogico -> GEQ .)
    ¿               reduce using rule 94 (OpLogico -> GEQ .)
    NEG             reduce using rule 94 (OpLogico -> GEQ .)
    SUB             reduce using rule 94 (OpLogico -> GEQ .)


state 65

    (95) OpLogico -> EQUAL .

    (               reduce using rule 95 (OpLogico -> EQUAL .)
    ID              reduce using rule 95 (OpLogico -> EQUAL .)
    NUM             reduce using rule 95 (OpLogico -> EQUAL .)
    ¿               reduce using rule 95 (OpLogico -> EQUAL .)
    NEG             reduce using rule 95 (OpLogico -> EQUAL .)
    SUB             reduce using rule 95 (OpLogico -> EQUAL .)


state 66

    (72) TermPlus -> TermPlus OpPlus . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    (               shift and go to state 19
    ID              shift and go to state 76
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    TermMult                       shift and go to state 107
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 67

    (96) OpPlus -> ADD .

    (               reduce using rule 96 (OpPlus -> ADD .)
    ID              reduce using rule 96 (OpPlus -> ADD .)
    NUM             reduce using rule 96 (OpPlus -> ADD .)
    ¿               reduce using rule 96 (OpPlus -> ADD .)
    NEG             reduce using rule 96 (OpPlus -> ADD .)
    SUB             reduce using rule 96 (OpPlus -> ADD .)


state 68

    (97) OpPlus -> SUB .

    (               reduce using rule 97 (OpPlus -> SUB .)
    ID              reduce using rule 97 (OpPlus -> SUB .)
    NUM             reduce using rule 97 (OpPlus -> SUB .)
    ¿               reduce using rule 97 (OpPlus -> SUB .)
    NEG             reduce using rule 97 (OpPlus -> SUB .)
    SUB             reduce using rule 97 (OpPlus -> SUB .)


state 69

    (74) TermMult -> TermMult OpMult . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    (               shift and go to state 19
    ID              shift and go to state 76
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    TermPow                        shift and go to state 108
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 70

    (98) OpMult -> MUL .

    (               reduce using rule 98 (OpMult -> MUL .)
    ID              reduce using rule 98 (OpMult -> MUL .)
    NUM             reduce using rule 98 (OpMult -> MUL .)
    ¿               reduce using rule 98 (OpMult -> MUL .)
    NEG             reduce using rule 98 (OpMult -> MUL .)
    SUB             reduce using rule 98 (OpMult -> MUL .)


state 71

    (99) OpMult -> DIV .

    (               reduce using rule 99 (OpMult -> DIV .)
    ID              reduce using rule 99 (OpMult -> DIV .)
    NUM             reduce using rule 99 (OpMult -> DIV .)
    ¿               reduce using rule 99 (OpMult -> DIV .)
    NEG             reduce using rule 99 (OpMult -> DIV .)
    SUB             reduce using rule 99 (OpMult -> DIV .)


state 72

    (76) TermPow -> TermPow OpPow . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    (               shift and go to state 19
    ID              shift and go to state 76
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Base                           shift and go to state 109
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 73

    (100) OpPow -> POW .

    (               reduce using rule 100 (OpPow -> POW .)
    ID              reduce using rule 100 (OpPow -> POW .)
    NUM             reduce using rule 100 (OpPow -> POW .)
    ¿               reduce using rule 100 (OpPow -> POW .)
    NEG             reduce using rule 100 (OpPow -> POW .)
    SUB             reduce using rule 100 (OpPow -> POW .)


state 74

    (68) OpUno -> Base ? .

    ?               reduce using rule 68 (OpUno -> Base ? .)
    POW             reduce using rule 68 (OpUno -> Base ? .)
    MUL             reduce using rule 68 (OpUno -> Base ? .)
    DIV             reduce using rule 68 (OpUno -> Base ? .)
    ADD             reduce using rule 68 (OpUno -> Base ? .)
    SUB             reduce using rule 68 (OpUno -> Base ? .)
    AND             reduce using rule 68 (OpUno -> Base ? .)
    OR              reduce using rule 68 (OpUno -> Base ? .)
    LESSER          reduce using rule 68 (OpUno -> Base ? .)
    GREATER         reduce using rule 68 (OpUno -> Base ? .)
    LEQ             reduce using rule 68 (OpUno -> Base ? .)
    GEQ             reduce using rule 68 (OpUno -> Base ? .)
    EQUAL           reduce using rule 68 (OpUno -> Base ? .)
    ;               reduce using rule 68 (OpUno -> Base ? .)
    RARROW          reduce using rule 68 (OpUno -> Base ? .)
    {               reduce using rule 68 (OpUno -> Base ? .)
    ID              reduce using rule 68 (OpUno -> Base ? .)
    IF              reduce using rule 68 (OpUno -> Base ? .)
    WHILE           reduce using rule 68 (OpUno -> Base ? .)
    SWITCH          reduce using rule 68 (OpUno -> Base ? .)
    (               reduce using rule 68 (OpUno -> Base ? .)
    NUM             reduce using rule 68 (OpUno -> Base ? .)
    ¿               reduce using rule 68 (OpUno -> Base ? .)
    NEG             reduce using rule 68 (OpUno -> Base ? .)
    )               reduce using rule 68 (OpUno -> Base ? .)
    ,               reduce using rule 68 (OpUno -> Base ? .)
    ]               reduce using rule 68 (OpUno -> Base ? .)


state 75

    (65) OpUno -> NEG Base .
    (68) OpUno -> Base . ?

  ! shift/reduce conflict for ? resolved as shift
    POW             reduce using rule 65 (OpUno -> NEG Base .)
    MUL             reduce using rule 65 (OpUno -> NEG Base .)
    DIV             reduce using rule 65 (OpUno -> NEG Base .)
    ADD             reduce using rule 65 (OpUno -> NEG Base .)
    SUB             reduce using rule 65 (OpUno -> NEG Base .)
    AND             reduce using rule 65 (OpUno -> NEG Base .)
    OR              reduce using rule 65 (OpUno -> NEG Base .)
    LESSER          reduce using rule 65 (OpUno -> NEG Base .)
    GREATER         reduce using rule 65 (OpUno -> NEG Base .)
    LEQ             reduce using rule 65 (OpUno -> NEG Base .)
    GEQ             reduce using rule 65 (OpUno -> NEG Base .)
    EQUAL           reduce using rule 65 (OpUno -> NEG Base .)
    ;               reduce using rule 65 (OpUno -> NEG Base .)
    RARROW          reduce using rule 65 (OpUno -> NEG Base .)
    {               reduce using rule 65 (OpUno -> NEG Base .)
    ID              reduce using rule 65 (OpUno -> NEG Base .)
    IF              reduce using rule 65 (OpUno -> NEG Base .)
    WHILE           reduce using rule 65 (OpUno -> NEG Base .)
    SWITCH          reduce using rule 65 (OpUno -> NEG Base .)
    (               reduce using rule 65 (OpUno -> NEG Base .)
    NUM             reduce using rule 65 (OpUno -> NEG Base .)
    ¿               reduce using rule 65 (OpUno -> NEG Base .)
    NEG             reduce using rule 65 (OpUno -> NEG Base .)
    )               reduce using rule 65 (OpUno -> NEG Base .)
    ,               reduce using rule 65 (OpUno -> NEG Base .)
    ]               reduce using rule 65 (OpUno -> NEG Base .)
    ?               shift and go to state 74

  ! ?               [ reduce using rule 65 (OpUno -> NEG Base .) ]


state 76

    (80) Base -> ID .
    (84) FunCall -> ID . ( FunArg )
    (69) AccessArray -> ID . ArraySize
    (53) ArraySize -> . ArraySize [ AtribOp ]
    (54) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    ?               reduce using rule 80 (Base -> ID .)
    POW             reduce using rule 80 (Base -> ID .)
    MUL             reduce using rule 80 (Base -> ID .)
    DIV             reduce using rule 80 (Base -> ID .)
    ADD             reduce using rule 80 (Base -> ID .)
    SUB             reduce using rule 80 (Base -> ID .)
    AND             reduce using rule 80 (Base -> ID .)
    OR              reduce using rule 80 (Base -> ID .)
    LESSER          reduce using rule 80 (Base -> ID .)
    GREATER         reduce using rule 80 (Base -> ID .)
    LEQ             reduce using rule 80 (Base -> ID .)
    GEQ             reduce using rule 80 (Base -> ID .)
    EQUAL           reduce using rule 80 (Base -> ID .)
    ;               reduce using rule 80 (Base -> ID .)
    RARROW          reduce using rule 80 (Base -> ID .)
    {               reduce using rule 80 (Base -> ID .)
    ID              reduce using rule 80 (Base -> ID .)
    IF              reduce using rule 80 (Base -> ID .)
    WHILE           reduce using rule 80 (Base -> ID .)
    SWITCH          reduce using rule 80 (Base -> ID .)
    NUM             reduce using rule 80 (Base -> ID .)
    ¿               reduce using rule 80 (Base -> ID .)
    NEG             reduce using rule 80 (Base -> ID .)
    )               reduce using rule 80 (Base -> ID .)
    ,               reduce using rule 80 (Base -> ID .)
    ]               reduce using rule 80 (Base -> ID .)
    (               shift and go to state 44
    [               shift and go to state 46

  ! (               [ reduce using rule 80 (Base -> ID .) ]

    ArraySize                      shift and go to state 110

state 77

    (67) OpUno -> SUB Base .
    (68) OpUno -> Base . ?

  ! shift/reduce conflict for ? resolved as shift
    POW             reduce using rule 67 (OpUno -> SUB Base .)
    MUL             reduce using rule 67 (OpUno -> SUB Base .)
    DIV             reduce using rule 67 (OpUno -> SUB Base .)
    ADD             reduce using rule 67 (OpUno -> SUB Base .)
    SUB             reduce using rule 67 (OpUno -> SUB Base .)
    AND             reduce using rule 67 (OpUno -> SUB Base .)
    OR              reduce using rule 67 (OpUno -> SUB Base .)
    LESSER          reduce using rule 67 (OpUno -> SUB Base .)
    GREATER         reduce using rule 67 (OpUno -> SUB Base .)
    LEQ             reduce using rule 67 (OpUno -> SUB Base .)
    GEQ             reduce using rule 67 (OpUno -> SUB Base .)
    EQUAL           reduce using rule 67 (OpUno -> SUB Base .)
    ;               reduce using rule 67 (OpUno -> SUB Base .)
    RARROW          reduce using rule 67 (OpUno -> SUB Base .)
    {               reduce using rule 67 (OpUno -> SUB Base .)
    ID              reduce using rule 67 (OpUno -> SUB Base .)
    IF              reduce using rule 67 (OpUno -> SUB Base .)
    WHILE           reduce using rule 67 (OpUno -> SUB Base .)
    SWITCH          reduce using rule 67 (OpUno -> SUB Base .)
    (               reduce using rule 67 (OpUno -> SUB Base .)
    NUM             reduce using rule 67 (OpUno -> SUB Base .)
    ¿               reduce using rule 67 (OpUno -> SUB Base .)
    NEG             reduce using rule 67 (OpUno -> SUB Base .)
    )               reduce using rule 67 (OpUno -> SUB Base .)
    ,               reduce using rule 67 (OpUno -> SUB Base .)
    ]               reduce using rule 67 (OpUno -> SUB Base .)
    ?               shift and go to state 74

  ! ?               [ reduce using rule 67 (OpUno -> SUB Base .) ]


state 78

    (48) DeclArray -> ID ID DeclArraySize .
    (49) DeclArraySize -> DeclArraySize . [ NUM ]

    ;               reduce using rule 48 (DeclArray -> ID ID DeclArraySize .)
    [               shift and go to state 111


state 79

    (55) DeclAtrib -> ID ID LARROW . AtribOp
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 112
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 80

    (50) DeclArraySize -> [ . NUM ]

    NUM             shift and go to state 113


state 81

    (23) FunExtra -> ID .

    RARROW          reduce using rule 23 (FunExtra -> ID .)
    ,               reduce using rule 23 (FunExtra -> ID .)
    {               reduce using rule 23 (FunExtra -> ID .)
    ID              reduce using rule 23 (FunExtra -> ID .)
    IF              reduce using rule 23 (FunExtra -> ID .)
    WHILE           reduce using rule 23 (FunExtra -> ID .)
    SWITCH          reduce using rule 23 (FunExtra -> ID .)
    (               reduce using rule 23 (FunExtra -> ID .)
    NUM             reduce using rule 23 (FunExtra -> ID .)
    ¿               reduce using rule 23 (FunExtra -> ID .)
    NEG             reduce using rule 23 (FunExtra -> ID .)
    SUB             reduce using rule 23 (FunExtra -> ID .)


state 82

    (16) Function -> ID FunScope FunCases . Body
    (13) Body -> . { }
    (14) Body -> . Block
    (15) Body -> . { Code }
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    {               shift and go to state 96
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Body                           shift and go to state 114
    Block                          shift and go to state 97
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 83

    (18) FunCases -> FunExtra . RARROW ID
    (20) FunCases -> FunExtra .
    (22) FunExtra -> FunExtra . , ID

    RARROW          shift and go to state 115
    {               reduce using rule 20 (FunCases -> FunExtra .)
    ID              reduce using rule 20 (FunCases -> FunExtra .)
    IF              reduce using rule 20 (FunCases -> FunExtra .)
    WHILE           reduce using rule 20 (FunCases -> FunExtra .)
    SWITCH          reduce using rule 20 (FunCases -> FunExtra .)
    (               reduce using rule 20 (FunCases -> FunExtra .)
    NUM             reduce using rule 20 (FunCases -> FunExtra .)
    ¿               reduce using rule 20 (FunCases -> FunExtra .)
    NEG             reduce using rule 20 (FunCases -> FunExtra .)
    SUB             reduce using rule 20 (FunCases -> FunExtra .)
    ,               shift and go to state 116


state 84

    (19) FunCases -> RARROW . ID

    ID              shift and go to state 117


state 85

    (60) Atrib -> ID LARROW AtribOp .
    (57) AtribNum -> ID LARROW AtribOp .
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 60 (Atrib -> ID LARROW AtribOp .)
    RARROW          shift and go to state 94

  ! RARROW          [ reduce using rule 57 (AtribNum -> ID LARROW AtribOp .) ]


state 86

    (62) Atrib -> ID SWAP ID .

    ;               reduce using rule 62 (Atrib -> ID SWAP ID .)


state 87

    (51) AtribArray -> ID ArraySize LARROW . AtribOp
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 118
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 88

    (53) ArraySize -> ArraySize [ . AtribOp ]
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 119
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 89

    (84) FunCall -> ID ( FunArg . )

    )               shift and go to state 120


state 90

    (85) FunArg -> FunRec .
    (87) FunRec -> FunRec . , AtribOp

    )               reduce using rule 85 (FunArg -> FunRec .)
    ,               shift and go to state 121


state 91

    (88) FunRec -> AtribOp .
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 88 (FunRec -> AtribOp .)
    )               reduce using rule 88 (FunRec -> AtribOp .)
    RARROW          shift and go to state 94


state 92

    (54) ArraySize -> [ AtribOp . ]
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 122
    RARROW          shift and go to state 94


state 93

    (25) If -> IfScope AtribOp Body .
    (27) IfElse -> IfScope AtribOp Body . ElseScope Body
    (26) ElseScope -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 25 (If -> IfScope AtribOp Body .)
    IF              reduce using rule 25 (If -> IfScope AtribOp Body .)
    WHILE           reduce using rule 25 (If -> IfScope AtribOp Body .)
    SWITCH          reduce using rule 25 (If -> IfScope AtribOp Body .)
    (               reduce using rule 25 (If -> IfScope AtribOp Body .)
    NUM             reduce using rule 25 (If -> IfScope AtribOp Body .)
    ¿               reduce using rule 25 (If -> IfScope AtribOp Body .)
    NEG             reduce using rule 25 (If -> IfScope AtribOp Body .)
    SUB             reduce using rule 25 (If -> IfScope AtribOp Body .)
    $end            reduce using rule 25 (If -> IfScope AtribOp Body .)
    }               reduce using rule 25 (If -> IfScope AtribOp Body .)
    :               reduce using rule 25 (If -> IfScope AtribOp Body .)
    ELSE            shift and go to state 124

  ! ELSE            [ reduce using rule 25 (If -> IfScope AtribOp Body .) ]

    ElseScope                      shift and go to state 123

state 94

    (58) AtribNum -> AtribOp RARROW . ID
    (52) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 125


state 95

    (60) Atrib -> ID . LARROW AtribOp
    (62) Atrib -> ID . SWAP ID
    (47) Decl -> ID . ID
    (48) DeclArray -> ID . ID DeclArraySize
    (55) DeclAtrib -> ID . ID LARROW AtribOp
    (51) AtribArray -> ID . ArraySize LARROW AtribOp
    (57) AtribNum -> ID . LARROW AtribOp
    (80) Base -> ID .
    (84) FunCall -> ID . ( FunArg )
    (69) AccessArray -> ID . ArraySize
    (53) ArraySize -> . ArraySize [ AtribOp ]
    (54) ArraySize -> . [ AtribOp ]

    LARROW          shift and go to state 41
    SWAP            shift and go to state 42
    ID              shift and go to state 39
    ?               reduce using rule 80 (Base -> ID .)
    POW             reduce using rule 80 (Base -> ID .)
    MUL             reduce using rule 80 (Base -> ID .)
    DIV             reduce using rule 80 (Base -> ID .)
    ADD             reduce using rule 80 (Base -> ID .)
    SUB             reduce using rule 80 (Base -> ID .)
    AND             reduce using rule 80 (Base -> ID .)
    OR              reduce using rule 80 (Base -> ID .)
    LESSER          reduce using rule 80 (Base -> ID .)
    GREATER         reduce using rule 80 (Base -> ID .)
    LEQ             reduce using rule 80 (Base -> ID .)
    GEQ             reduce using rule 80 (Base -> ID .)
    EQUAL           reduce using rule 80 (Base -> ID .)
    ;               reduce using rule 80 (Base -> ID .)
    RARROW          reduce using rule 80 (Base -> ID .)
    (               shift and go to state 44
    [               shift and go to state 46

    ArraySize                      shift and go to state 43

state 96

    (13) Body -> { . }
    (15) Body -> { . Code }
    (6) Code -> . Code Block
    (7) Code -> . Block
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    }               shift and go to state 126
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Code                           shift and go to state 127
    Block                          shift and go to state 128
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 97

    (14) Body -> Block .

    ELSE            reduce using rule 14 (Body -> Block .)
    ID              reduce using rule 14 (Body -> Block .)
    IF              reduce using rule 14 (Body -> Block .)
    WHILE           reduce using rule 14 (Body -> Block .)
    SWITCH          reduce using rule 14 (Body -> Block .)
    (               reduce using rule 14 (Body -> Block .)
    NUM             reduce using rule 14 (Body -> Block .)
    ¿               reduce using rule 14 (Body -> Block .)
    NEG             reduce using rule 14 (Body -> Block .)
    SUB             reduce using rule 14 (Body -> Block .)
    $end            reduce using rule 14 (Body -> Block .)
    }               reduce using rule 14 (Body -> Block .)
    :               reduce using rule 14 (Body -> Block .)


state 98

    (57) AtribNum -> ID LARROW . AtribOp
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 129
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 99

    (61) Atrib -> AtribOp RARROW ID .
    (56) DeclAtrib -> AtribOp RARROW ID . ID
    (52) AtribArray -> AtribOp RARROW ID . ArraySize
    (58) AtribNum -> AtribOp RARROW ID .
    (53) ArraySize -> . ArraySize [ AtribOp ]
    (54) ArraySize -> . [ AtribOp ]

    ;               reduce using rule 61 (Atrib -> AtribOp RARROW ID .)
    ID              shift and go to state 130
    RARROW          reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 46

    ArraySize                      shift and go to state 131

state 100

    (29) While -> WhileScope ( AtribOp . ) Body
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 132
    RARROW          shift and go to state 94


state 101

    (79) Base -> ( AtribOp ) .

    ?               reduce using rule 79 (Base -> ( AtribOp ) .)
    POW             reduce using rule 79 (Base -> ( AtribOp ) .)
    MUL             reduce using rule 79 (Base -> ( AtribOp ) .)
    DIV             reduce using rule 79 (Base -> ( AtribOp ) .)
    ADD             reduce using rule 79 (Base -> ( AtribOp ) .)
    SUB             reduce using rule 79 (Base -> ( AtribOp ) .)
    AND             reduce using rule 79 (Base -> ( AtribOp ) .)
    OR              reduce using rule 79 (Base -> ( AtribOp ) .)
    LESSER          reduce using rule 79 (Base -> ( AtribOp ) .)
    GREATER         reduce using rule 79 (Base -> ( AtribOp ) .)
    LEQ             reduce using rule 79 (Base -> ( AtribOp ) .)
    GEQ             reduce using rule 79 (Base -> ( AtribOp ) .)
    EQUAL           reduce using rule 79 (Base -> ( AtribOp ) .)
    ;               reduce using rule 79 (Base -> ( AtribOp ) .)
    RARROW          reduce using rule 79 (Base -> ( AtribOp ) .)
    {               reduce using rule 79 (Base -> ( AtribOp ) .)
    ID              reduce using rule 79 (Base -> ( AtribOp ) .)
    IF              reduce using rule 79 (Base -> ( AtribOp ) .)
    WHILE           reduce using rule 79 (Base -> ( AtribOp ) .)
    SWITCH          reduce using rule 79 (Base -> ( AtribOp ) .)
    (               reduce using rule 79 (Base -> ( AtribOp ) .)
    NUM             reduce using rule 79 (Base -> ( AtribOp ) .)
    ¿               reduce using rule 79 (Base -> ( AtribOp ) .)
    NEG             reduce using rule 79 (Base -> ( AtribOp ) .)
    )               reduce using rule 79 (Base -> ( AtribOp ) .)
    ,               reduce using rule 79 (Base -> ( AtribOp ) .)
    ]               reduce using rule 79 (Base -> ( AtribOp ) .)


state 102

    (31) Switch -> SwitchScope Conds { . Cases }
    (36) Cases -> . Cases Case
    (37) Cases -> . Case
    (38) Case -> . ID : Body
    (39) Case -> . : Body

    ID              shift and go to state 135
    :               shift and go to state 136

    Cases                          shift and go to state 133
    Case                           shift and go to state 134

state 103

    (32) Conds -> Conds , . Cond
    (34) Cond -> . ID ( AtribOp )
    (35) Cond -> . ( AtribOp )

    ID              shift and go to state 56
    (               shift and go to state 57

    Cond                           shift and go to state 137

state 104

    (34) Cond -> ID ( . AtribOp )
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 138
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 105

    (35) Cond -> ( AtribOp . )
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 139
    RARROW          shift and go to state 94


state 106

    (70) OpBin -> OpBin OpLogico TermPlus .
    (72) TermPlus -> TermPlus . OpPlus TermMult
    (96) OpPlus -> . ADD
    (97) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    OR              reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    LESSER          reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    GREATER         reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    LEQ             reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    GEQ             reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    EQUAL           reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    ;               reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    RARROW          reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    {               reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    ID              reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    IF              reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    WHILE           reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCH          reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    (               reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    NUM             reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    ¿               reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    NEG             reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    )               reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    ,               reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    ]               reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .)
    ADD             shift and go to state 67
    SUB             shift and go to state 68

  ! SUB             [ reduce using rule 70 (OpBin -> OpBin OpLogico TermPlus .) ]

    OpPlus                         shift and go to state 66

state 107

    (72) TermPlus -> TermPlus OpPlus TermMult .
    (74) TermMult -> TermMult . OpMult TermPow
    (98) OpMult -> . MUL
    (99) OpMult -> . DIV

    ADD             reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    SUB             reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    AND             reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    OR              reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    LESSER          reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    GREATER         reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    LEQ             reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    GEQ             reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    EQUAL           reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    ;               reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    RARROW          reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    {               reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    ID              reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    IF              reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    WHILE           reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCH          reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    (               reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    NUM             reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    ¿               reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    NEG             reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    )               reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    ,               reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    ]               reduce using rule 72 (TermPlus -> TermPlus OpPlus TermMult .)
    MUL             shift and go to state 70
    DIV             shift and go to state 71

    OpMult                         shift and go to state 69

state 108

    (74) TermMult -> TermMult OpMult TermPow .
    (76) TermPow -> TermPow . OpPow Base
    (100) OpPow -> . POW

    MUL             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    DIV             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    ADD             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    SUB             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    AND             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    OR              reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    LESSER          reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    GREATER         reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    LEQ             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    GEQ             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    EQUAL           reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    ;               reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    RARROW          reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    {               reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    ID              reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    IF              reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    WHILE           reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    SWITCH          reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    (               reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    NUM             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    ¿               reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    NEG             reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    )               reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    ,               reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    ]               reduce using rule 74 (TermMult -> TermMult OpMult TermPow .)
    POW             shift and go to state 73

    OpPow                          shift and go to state 72

state 109

    (76) TermPow -> TermPow OpPow Base .
    (68) OpUno -> Base . ?

    POW             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    MUL             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    DIV             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    ADD             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    SUB             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    AND             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    OR              reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    LESSER          reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    GREATER         reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    LEQ             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    GEQ             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    EQUAL           reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    ;               reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    RARROW          reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    {               reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    ID              reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    IF              reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    WHILE           reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    SWITCH          reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    (               reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    NUM             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    ¿               reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    NEG             reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    )               reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    ,               reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    ]               reduce using rule 76 (TermPow -> TermPow OpPow Base .)
    ?               shift and go to state 74


state 110

    (69) AccessArray -> ID ArraySize .
    (53) ArraySize -> ArraySize . [ AtribOp ]

    ?               reduce using rule 69 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 69 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 69 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 69 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 69 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 69 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 69 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 69 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 69 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 69 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 69 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 69 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 69 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 69 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 69 (AccessArray -> ID ArraySize .)
    {               reduce using rule 69 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 69 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 69 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 69 (AccessArray -> ID ArraySize .)
    SWITCH          reduce using rule 69 (AccessArray -> ID ArraySize .)
    (               reduce using rule 69 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 69 (AccessArray -> ID ArraySize .)
    ¿               reduce using rule 69 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 69 (AccessArray -> ID ArraySize .)
    )               reduce using rule 69 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 69 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 69 (AccessArray -> ID ArraySize .)
    [               shift and go to state 88


state 111

    (49) DeclArraySize -> DeclArraySize [ . NUM ]

    NUM             shift and go to state 140


state 112

    (55) DeclAtrib -> ID ID LARROW AtribOp .
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    ;               reduce using rule 55 (DeclAtrib -> ID ID LARROW AtribOp .)
    RARROW          shift and go to state 94


state 113

    (50) DeclArraySize -> [ NUM . ]

    ]               shift and go to state 141


state 114

    (16) Function -> ID FunScope FunCases Body .

    ID              reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    IF              reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    WHILE           reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    SWITCH          reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    (               reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    NUM             reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    ¿               reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    NEG             reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    SUB             reduce using rule 16 (Function -> ID FunScope FunCases Body .)
    $end            reduce using rule 16 (Function -> ID FunScope FunCases Body .)


state 115

    (18) FunCases -> FunExtra RARROW . ID

    ID              shift and go to state 142


state 116

    (22) FunExtra -> FunExtra , . ID

    ID              shift and go to state 143


state 117

    (19) FunCases -> RARROW ID .

    {               reduce using rule 19 (FunCases -> RARROW ID .)
    ID              reduce using rule 19 (FunCases -> RARROW ID .)
    IF              reduce using rule 19 (FunCases -> RARROW ID .)
    WHILE           reduce using rule 19 (FunCases -> RARROW ID .)
    SWITCH          reduce using rule 19 (FunCases -> RARROW ID .)
    (               reduce using rule 19 (FunCases -> RARROW ID .)
    NUM             reduce using rule 19 (FunCases -> RARROW ID .)
    ¿               reduce using rule 19 (FunCases -> RARROW ID .)
    NEG             reduce using rule 19 (FunCases -> RARROW ID .)
    SUB             reduce using rule 19 (FunCases -> RARROW ID .)


state 118

    (51) AtribArray -> ID ArraySize LARROW AtribOp .
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    {               reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ID              reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    IF              reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    WHILE           reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCH          reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    (               reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NUM             reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ¿               reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NEG             reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SUB             reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    )               reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ,               reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ]               reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .)
    RARROW          shift and go to state 94

  ! RARROW          [ reduce using rule 51 (AtribArray -> ID ArraySize LARROW AtribOp .) ]


state 119

    (53) ArraySize -> ArraySize [ AtribOp . ]
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 144
    RARROW          shift and go to state 94


state 120

    (84) FunCall -> ID ( FunArg ) .

    ?               reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    POW             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    MUL             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    DIV             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    ADD             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    SUB             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    AND             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    OR              reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    LESSER          reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    GREATER         reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    LEQ             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    GEQ             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    EQUAL           reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    ;               reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    RARROW          reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    {               reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    ID              reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    IF              reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    WHILE           reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    SWITCH          reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    (               reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    NUM             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    ¿               reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    NEG             reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    )               reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    ,               reduce using rule 84 (FunCall -> ID ( FunArg ) .)
    ]               reduce using rule 84 (FunCall -> ID ( FunArg ) .)


state 121

    (87) FunRec -> FunRec , . AtribOp
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (64) Op -> . OpBin
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    ID              shift and go to state 49
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 145
    AtribNum                       shift and go to state 26
    Op                             shift and go to state 48
    AtribArray                     shift and go to state 50
    OpBin                          shift and go to state 22
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 122

    (54) ArraySize -> [ AtribOp ] .

    LARROW          reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    [               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    ?               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    POW             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    MUL             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    DIV             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    ADD             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    SUB             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    AND             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    OR              reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    LESSER          reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    GREATER         reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    LEQ             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    GEQ             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    EQUAL           reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    ;               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    RARROW          reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    {               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    ID              reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    IF              reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    WHILE           reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    SWITCH          reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    (               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    NUM             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    ¿               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    NEG             reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    )               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    ,               reduce using rule 54 (ArraySize -> [ AtribOp ] .)
    ]               reduce using rule 54 (ArraySize -> [ AtribOp ] .)


state 123

    (27) IfElse -> IfScope AtribOp Body ElseScope . Body
    (13) Body -> . { }
    (14) Body -> . Block
    (15) Body -> . { Code }
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    {               shift and go to state 96
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    Body                           shift and go to state 146
    Block                          shift and go to state 97
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 124

    (26) ElseScope -> ELSE .

    {               reduce using rule 26 (ElseScope -> ELSE .)
    ID              reduce using rule 26 (ElseScope -> ELSE .)
    IF              reduce using rule 26 (ElseScope -> ELSE .)
    WHILE           reduce using rule 26 (ElseScope -> ELSE .)
    SWITCH          reduce using rule 26 (ElseScope -> ELSE .)
    (               reduce using rule 26 (ElseScope -> ELSE .)
    NUM             reduce using rule 26 (ElseScope -> ELSE .)
    ¿               reduce using rule 26 (ElseScope -> ELSE .)
    NEG             reduce using rule 26 (ElseScope -> ELSE .)
    SUB             reduce using rule 26 (ElseScope -> ELSE .)


state 125

    (58) AtribNum -> AtribOp RARROW ID .
    (52) AtribArray -> AtribOp RARROW ID . ArraySize
    (53) ArraySize -> . ArraySize [ AtribOp ]
    (54) ArraySize -> . [ AtribOp ]

    RARROW          reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    {               reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    ID              reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    IF              reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    WHILE           reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    SWITCH          reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    (               reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    NUM             reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    ¿               reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    NEG             reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    SUB             reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    )               reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    ;               reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    ,               reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    ]               reduce using rule 58 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 46

    ArraySize                      shift and go to state 131

state 126

    (13) Body -> { } .

    ELSE            reduce using rule 13 (Body -> { } .)
    ID              reduce using rule 13 (Body -> { } .)
    IF              reduce using rule 13 (Body -> { } .)
    WHILE           reduce using rule 13 (Body -> { } .)
    SWITCH          reduce using rule 13 (Body -> { } .)
    (               reduce using rule 13 (Body -> { } .)
    NUM             reduce using rule 13 (Body -> { } .)
    ¿               reduce using rule 13 (Body -> { } .)
    NEG             reduce using rule 13 (Body -> { } .)
    SUB             reduce using rule 13 (Body -> { } .)
    $end            reduce using rule 13 (Body -> { } .)
    }               reduce using rule 13 (Body -> { } .)
    :               reduce using rule 13 (Body -> { } .)


state 127

    (15) Body -> { Code . }
    (6) Code -> Code . Block
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    }               shift and go to state 147
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Block                          shift and go to state 148
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 128

    (7) Code -> Block .

    }               reduce using rule 7 (Code -> Block .)
    ID              reduce using rule 7 (Code -> Block .)
    IF              reduce using rule 7 (Code -> Block .)
    WHILE           reduce using rule 7 (Code -> Block .)
    SWITCH          reduce using rule 7 (Code -> Block .)
    (               reduce using rule 7 (Code -> Block .)
    NUM             reduce using rule 7 (Code -> Block .)
    ¿               reduce using rule 7 (Code -> Block .)
    NEG             reduce using rule 7 (Code -> Block .)
    SUB             reduce using rule 7 (Code -> Block .)


state 129

    (57) AtribNum -> ID LARROW AtribOp .
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    {               reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    ID              reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    IF              reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    WHILE           reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    SWITCH          reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    (               reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    NUM             reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    ¿               reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    NEG             reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    SUB             reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    )               reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    ;               reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    ,               reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    ]               reduce using rule 57 (AtribNum -> ID LARROW AtribOp .)
    RARROW          shift and go to state 94

  ! RARROW          [ reduce using rule 57 (AtribNum -> ID LARROW AtribOp .) ]


state 130

    (56) DeclAtrib -> AtribOp RARROW ID ID .

    ;               reduce using rule 56 (DeclAtrib -> AtribOp RARROW ID ID .)


state 131

    (52) AtribArray -> AtribOp RARROW ID ArraySize .
    (53) ArraySize -> ArraySize . [ AtribOp ]

    ;               reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    RARROW          reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    {               reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ID              reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    IF              reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    WHILE           reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCH          reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    (               reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NUM             reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ¿               reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NEG             reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SUB             reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    )               reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ,               reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ]               reduce using rule 52 (AtribArray -> AtribOp RARROW ID ArraySize .)
    [               shift and go to state 88


state 132

    (29) While -> WhileScope ( AtribOp ) . Body
    (13) Body -> . { }
    (14) Body -> . Block
    (15) Body -> . { Code }
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    {               shift and go to state 96
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    WhileScope                     shift and go to state 18
    AtribOp                        shift and go to state 17
    Body                           shift and go to state 149
    Block                          shift and go to state 97
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 133

    (31) Switch -> SwitchScope Conds { Cases . }
    (36) Cases -> Cases . Case
    (38) Case -> . ID : Body
    (39) Case -> . : Body

    }               shift and go to state 150
    ID              shift and go to state 135
    :               shift and go to state 136

    Case                           shift and go to state 151

state 134

    (37) Cases -> Case .

    }               reduce using rule 37 (Cases -> Case .)
    ID              reduce using rule 37 (Cases -> Case .)
    :               reduce using rule 37 (Cases -> Case .)


state 135

    (38) Case -> ID . : Body

    :               shift and go to state 152


state 136

    (39) Case -> : . Body
    (13) Body -> . { }
    (14) Body -> . Block
    (15) Body -> . { Code }
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    {               shift and go to state 96
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Body                           shift and go to state 153
    Block                          shift and go to state 97
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 137

    (32) Conds -> Conds , Cond .

    {               reduce using rule 32 (Conds -> Conds , Cond .)
    ,               reduce using rule 32 (Conds -> Conds , Cond .)


state 138

    (34) Cond -> ID ( AtribOp . )
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 154
    RARROW          shift and go to state 94


state 139

    (35) Cond -> ( AtribOp ) .

    {               reduce using rule 35 (Cond -> ( AtribOp ) .)
    ,               reduce using rule 35 (Cond -> ( AtribOp ) .)


state 140

    (49) DeclArraySize -> DeclArraySize [ NUM . ]

    ]               shift and go to state 155


state 141

    (50) DeclArraySize -> [ NUM ] .

    [               reduce using rule 50 (DeclArraySize -> [ NUM ] .)
    ;               reduce using rule 50 (DeclArraySize -> [ NUM ] .)


state 142

    (18) FunCases -> FunExtra RARROW ID .

    {               reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    ID              reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    IF              reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    WHILE           reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    SWITCH          reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    (               reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    NUM             reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    ¿               reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    NEG             reduce using rule 18 (FunCases -> FunExtra RARROW ID .)
    SUB             reduce using rule 18 (FunCases -> FunExtra RARROW ID .)


state 143

    (22) FunExtra -> FunExtra , ID .

    RARROW          reduce using rule 22 (FunExtra -> FunExtra , ID .)
    ,               reduce using rule 22 (FunExtra -> FunExtra , ID .)
    {               reduce using rule 22 (FunExtra -> FunExtra , ID .)
    ID              reduce using rule 22 (FunExtra -> FunExtra , ID .)
    IF              reduce using rule 22 (FunExtra -> FunExtra , ID .)
    WHILE           reduce using rule 22 (FunExtra -> FunExtra , ID .)
    SWITCH          reduce using rule 22 (FunExtra -> FunExtra , ID .)
    (               reduce using rule 22 (FunExtra -> FunExtra , ID .)
    NUM             reduce using rule 22 (FunExtra -> FunExtra , ID .)
    ¿               reduce using rule 22 (FunExtra -> FunExtra , ID .)
    NEG             reduce using rule 22 (FunExtra -> FunExtra , ID .)
    SUB             reduce using rule 22 (FunExtra -> FunExtra , ID .)


state 144

    (53) ArraySize -> ArraySize [ AtribOp ] .

    LARROW          reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    [               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    ?               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    POW             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    MUL             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    DIV             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    ADD             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    SUB             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    AND             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    OR              reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    LESSER          reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    GREATER         reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    LEQ             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    GEQ             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    EQUAL           reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    ;               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    RARROW          reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    {               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    ID              reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    IF              reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    WHILE           reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCH          reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    (               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    NUM             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    ¿               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    NEG             reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    )               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    ,               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)
    ]               reduce using rule 53 (ArraySize -> ArraySize [ AtribOp ] .)


state 145

    (87) FunRec -> FunRec , AtribOp .
    (58) AtribNum -> AtribOp . RARROW ID
    (52) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 87 (FunRec -> FunRec , AtribOp .)
    )               reduce using rule 87 (FunRec -> FunRec , AtribOp .)
    RARROW          shift and go to state 94


state 146

    (27) IfElse -> IfScope AtribOp Body ElseScope Body .

    ID              reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    IF              reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    WHILE           reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCH          reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    (               reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NUM             reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ¿               reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NEG             reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SUB             reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    $end            reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ELSE            reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    }               reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    :               reduce using rule 27 (IfElse -> IfScope AtribOp Body ElseScope Body .)


state 147

    (15) Body -> { Code } .

    ELSE            reduce using rule 15 (Body -> { Code } .)
    ID              reduce using rule 15 (Body -> { Code } .)
    IF              reduce using rule 15 (Body -> { Code } .)
    WHILE           reduce using rule 15 (Body -> { Code } .)
    SWITCH          reduce using rule 15 (Body -> { Code } .)
    (               reduce using rule 15 (Body -> { Code } .)
    NUM             reduce using rule 15 (Body -> { Code } .)
    ¿               reduce using rule 15 (Body -> { Code } .)
    NEG             reduce using rule 15 (Body -> { Code } .)
    SUB             reduce using rule 15 (Body -> { Code } .)
    $end            reduce using rule 15 (Body -> { Code } .)
    }               reduce using rule 15 (Body -> { Code } .)
    :               reduce using rule 15 (Body -> { Code } .)


state 148

    (6) Code -> Code Block .

    }               reduce using rule 6 (Code -> Code Block .)
    ID              reduce using rule 6 (Code -> Code Block .)
    IF              reduce using rule 6 (Code -> Code Block .)
    WHILE           reduce using rule 6 (Code -> Code Block .)
    SWITCH          reduce using rule 6 (Code -> Code Block .)
    (               reduce using rule 6 (Code -> Code Block .)
    NUM             reduce using rule 6 (Code -> Code Block .)
    ¿               reduce using rule 6 (Code -> Code Block .)
    NEG             reduce using rule 6 (Code -> Code Block .)
    SUB             reduce using rule 6 (Code -> Code Block .)


state 149

    (29) While -> WhileScope ( AtribOp ) Body .

    ID              reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    IF              reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    WHILE           reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    SWITCH          reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    (               reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    NUM             reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    ¿               reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    NEG             reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    SUB             reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    $end            reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    ELSE            reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    }               reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)
    :               reduce using rule 29 (While -> WhileScope ( AtribOp ) Body .)


state 150

    (31) Switch -> SwitchScope Conds { Cases } .

    ID              reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    IF              reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    WHILE           reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    SWITCH          reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    (               reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    NUM             reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    ¿               reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    NEG             reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    SUB             reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    $end            reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    ELSE            reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    }               reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)
    :               reduce using rule 31 (Switch -> SwitchScope Conds { Cases } .)


state 151

    (36) Cases -> Cases Case .

    }               reduce using rule 36 (Cases -> Cases Case .)
    ID              reduce using rule 36 (Cases -> Cases Case .)
    :               reduce using rule 36 (Cases -> Cases Case .)


state 152

    (38) Case -> ID : . Body
    (13) Body -> . { }
    (14) Body -> . Block
    (15) Body -> . { Code }
    (8) Block -> . Exp ;
    (9) Block -> . If
    (10) Block -> . IfElse
    (11) Block -> . While
    (12) Block -> . Switch
    (40) Exp -> . Atrib
    (41) Exp -> . Op
    (42) Exp -> . Decl
    (43) Exp -> . DeclArray
    (44) Exp -> . DeclAtrib
    (25) If -> . IfScope AtribOp Body
    (27) IfElse -> . IfScope AtribOp Body ElseScope Body
    (29) While -> . WhileScope ( AtribOp ) Body
    (31) Switch -> . SwitchScope Conds { Cases }
    (60) Atrib -> . ID LARROW AtribOp
    (61) Atrib -> . AtribOp RARROW ID
    (62) Atrib -> . ID SWAP ID
    (63) Atrib -> . AtribArray
    (64) Op -> . OpBin
    (47) Decl -> . ID ID
    (48) DeclArray -> . ID ID DeclArraySize
    (55) DeclAtrib -> . ID ID LARROW AtribOp
    (56) DeclAtrib -> . AtribOp RARROW ID ID
    (24) IfScope -> . IF
    (28) WhileScope -> . WHILE
    (30) SwitchScope -> . SWITCH
    (45) AtribOp -> . AtribNum
    (46) AtribOp -> . Op
    (51) AtribArray -> . ID ArraySize LARROW AtribOp
    (52) AtribArray -> . AtribOp RARROW ID ArraySize
    (70) OpBin -> . OpBin OpLogico TermPlus
    (71) OpBin -> . TermPlus
    (57) AtribNum -> . ID LARROW AtribOp
    (58) AtribNum -> . AtribOp RARROW ID
    (59) AtribNum -> . AtribArray
    (72) TermPlus -> . TermPlus OpPlus TermMult
    (73) TermPlus -> . TermMult
    (74) TermMult -> . TermMult OpMult TermPow
    (75) TermMult -> . TermPow
    (76) TermPow -> . TermPow OpPow Base
    (77) TermPow -> . Base
    (78) Base -> . OpUno
    (79) Base -> . ( AtribOp )
    (80) Base -> . ID
    (81) Base -> . NUM
    (82) Base -> . FunCall
    (83) Base -> . ¿
    (65) OpUno -> . NEG Base
    (66) OpUno -> . AccessArray
    (67) OpUno -> . SUB Base
    (68) OpUno -> . Base ?
    (84) FunCall -> . ID ( FunArg )
    (69) AccessArray -> . ID ArraySize

    {               shift and go to state 96
    ID              shift and go to state 95
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    SWITCH          shift and go to state 25
    (               shift and go to state 19
    NUM             shift and go to state 32
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Body                           shift and go to state 156
    Block                          shift and go to state 97
    Exp                            shift and go to state 5
    If                             shift and go to state 6
    IfElse                         shift and go to state 7
    While                          shift and go to state 8
    Switch                         shift and go to state 9
    Atrib                          shift and go to state 11
    Op                             shift and go to state 12
    Decl                           shift and go to state 13
    DeclArray                      shift and go to state 14
    DeclAtrib                      shift and go to state 15
    IfScope                        shift and go to state 16
    AtribOp                        shift and go to state 17
    WhileScope                     shift and go to state 18
    SwitchScope                    shift and go to state 20
    AtribArray                     shift and go to state 21
    OpBin                          shift and go to state 22
    AtribNum                       shift and go to state 26
    TermPlus                       shift and go to state 27
    TermMult                       shift and go to state 28
    TermPow                        shift and go to state 29
    Base                           shift and go to state 30
    OpUno                          shift and go to state 31
    FunCall                        shift and go to state 33
    AccessArray                    shift and go to state 36

state 153

    (39) Case -> : Body .

    }               reduce using rule 39 (Case -> : Body .)
    ID              reduce using rule 39 (Case -> : Body .)
    :               reduce using rule 39 (Case -> : Body .)


state 154

    (34) Cond -> ID ( AtribOp ) .

    {               reduce using rule 34 (Cond -> ID ( AtribOp ) .)
    ,               reduce using rule 34 (Cond -> ID ( AtribOp ) .)


state 155

    (49) DeclArraySize -> DeclArraySize [ NUM ] .

    [               reduce using rule 49 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ;               reduce using rule 49 (DeclArraySize -> DeclArraySize [ NUM ] .)


state 156

    (38) Case -> ID : Body .

    }               reduce using rule 38 (Case -> ID : Body .)
    ID              reduce using rule 38 (Case -> ID : Body .)
    :               reduce using rule 38 (Case -> ID : Body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUB in state 27 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for ( in state 49 resolved as shift
WARNING: shift/reduce conflict for ? in state 75 resolved as shift
WARNING: shift/reduce conflict for ( in state 76 resolved as shift
WARNING: shift/reduce conflict for ? in state 77 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 85 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 93 resolved as shift
WARNING: shift/reduce conflict for SUB in state 106 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 118 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 129 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (Start -> <empty>)
WARNING: rejected rule (Axiom -> <empty>) in state 0

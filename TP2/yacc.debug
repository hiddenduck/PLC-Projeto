Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Start
Rule 1     Start -> Axiom
Rule 2     Axiom -> Axiom Code
Rule 3     Axiom -> Axiom Function
Rule 4     Axiom -> <empty>
Rule 5     Code -> Code Block
Rule 6     Code -> Block
Rule 7     Block -> Exp ;
Rule 8     Block -> If
Rule 9     Block -> IfElse
Rule 10    Block -> While
Rule 11    Block -> Switch
Rule 12    Body -> { }
Rule 13    Body -> Block
Rule 14    Body -> { Code }
Rule 15    Function -> ID FunScope FunCases Body
Rule 16    FunScope -> :
Rule 17    FunCases -> FunExtra RARROW ID
Rule 18    FunCases -> RARROW ID
Rule 19    FunCases -> FunExtra
Rule 20    FunCases -> <empty>
Rule 21    FunExtra -> FunExtra , ID
Rule 22    FunExtra -> ID
Rule 23    IfScope -> IF
Rule 24    If -> IfScope AtribOp Body
Rule 25    ElseScope -> ELSE
Rule 26    IfElse -> IfScope AtribOp Body ElseScope Body
Rule 27    WhileScope -> WHILE
Rule 28    While -> WhileScope ( AtribOp ) Body
Rule 29    SwitchScope -> SWITCH
Rule 30    Switch -> SwitchScope Conds { Cases }
Rule 31    Conds -> Conds , Cond
Rule 32    Conds -> Cond
Rule 33    Cond -> ID ( AtribOp )
Rule 34    Cond -> ( AtribOp )
Rule 35    Cases -> Cases Case
Rule 36    Cases -> Case
Rule 37    Case -> ID : Body
Rule 38    Case -> : Body
Rule 39    Exp -> Atrib
Rule 40    Exp -> Op
Rule 41    Exp -> Decl
Rule 42    Exp -> DeclArray
Rule 43    Exp -> DeclAtrib
Rule 44    AtribOp -> AtribNum
Rule 45    AtribOp -> Op
Rule 46    Decl -> ID ID
Rule 47    DeclArray -> ID ID DeclArraySize
Rule 48    DeclArraySize -> DeclArraySize [ NUM ]
Rule 49    DeclArraySize -> [ NUM ]
Rule 50    AtribArray -> ID ArraySize LARROW AtribOp
Rule 51    AtribArray -> AtribOp RARROW ID ArraySize
Rule 52    ArraySize -> ArraySize [ AtribOp ]
Rule 53    ArraySize -> [ AtribOp ]
Rule 54    DeclAtrib -> ID ID LARROW AtribOp
Rule 55    DeclAtrib -> AtribOp RARROW ID ID
Rule 56    AtribNum -> ID LARROW AtribOp
Rule 57    AtribNum -> AtribOp RARROW ID
Rule 58    AtribNum -> AtribArray
Rule 59    Atrib -> ID LARROW AtribOp
Rule 60    Atrib -> AtribOp RARROW ID
Rule 61    Atrib -> ID SWAP ID
Rule 62    Atrib -> AtribArray
Rule 63    Op -> OpBin
Rule 64    OpUno -> NEG Base
Rule 65    OpUno -> AccessArray
Rule 66    OpUno -> SUB Base
Rule 67    OpUno -> Base ?
Rule 68    AccessArray -> ID ArraySize
Rule 69    OpBin -> OpBin OpLogico TermPlus
Rule 70    OpBin -> TermPlus
Rule 71    TermPlus -> TermPlus OpPlus TermMult
Rule 72    TermPlus -> TermMult
Rule 73    TermMult -> TermMult OpMult TermPow
Rule 74    TermMult -> TermPow
Rule 75    TermPow -> TermPow OpPow Base
Rule 76    TermPow -> Base
Rule 77    Base -> OpUno
Rule 78    Base -> ( AtribOp )
Rule 79    Base -> ID
Rule 80    Base -> NUM
Rule 81    Base -> FunCall
Rule 82    Base -> ¿
Rule 83    FunCall -> ID ( FunArg )
Rule 84    FunArg -> FunRec
Rule 85    FunArg -> <empty>
Rule 86    FunRec -> FunRec , AtribOp
Rule 87    FunRec -> AtribOp
Rule 88    OpLogico -> AND
Rule 89    OpLogico -> OR
Rule 90    OpLogico -> LESSER
Rule 91    OpLogico -> GREATER
Rule 92    OpLogico -> LEQ
Rule 93    OpLogico -> GEQ
Rule 94    OpLogico -> EQUAL
Rule 95    OpPlus -> ADD
Rule 96    OpPlus -> SUB
Rule 97    OpMult -> MUL
Rule 98    OpMult -> DIV
Rule 99    OpPow -> POW

Terminals, with rules where they appear

(                    : 28 33 34 78 83
)                    : 28 33 34 78 83
,                    : 21 31 86
:                    : 16 37 38
;                    : 7
?                    : 67
ADD                  : 95
AND                  : 88
DIV                  : 98
ELSE                 : 25
EQUAL                : 94
GEQ                  : 93
GREATER              : 91
ID                   : 15 17 18 21 22 33 37 46 46 47 47 50 51 54 54 55 55 56 57 59 60 61 61 68 79 83
IF                   : 23
LARROW               : 50 54 56 59
LEQ                  : 92
LESSER               : 90
MUL                  : 97
NEG                  : 64
NUM                  : 48 49 80
OR                   : 89
POW                  : 99
RARROW               : 17 18 51 55 57 60
SUB                  : 66 96
SWAP                 : 61
SWITCH               : 29
WHILE                : 27
[                    : 48 49 52 53
]                    : 48 49 52 53
error                : 
{                    : 12 14 30
}                    : 12 14 30
¿                    : 82

Nonterminals, with rules where they appear

AccessArray          : 65
ArraySize            : 50 51 52 68
Atrib                : 39
AtribArray           : 58 62
AtribNum             : 44
AtribOp              : 24 26 28 33 34 50 51 52 53 54 55 56 57 59 60 78 86 87
Axiom                : 1 2 3
Base                 : 64 66 67 75 76
Block                : 5 6 13
Body                 : 15 24 26 26 28 37 38
Case                 : 35 36
Cases                : 30 35
Code                 : 2 5 14
Cond                 : 31 32
Conds                : 30 31
Decl                 : 41
DeclArray            : 42
DeclArraySize        : 47 48
DeclAtrib            : 43
ElseScope            : 26
Exp                  : 7
FunArg               : 83
FunCall              : 81
FunCases             : 15
FunExtra             : 17 19 21
FunRec               : 84 86
FunScope             : 15
Function             : 3
If                   : 8
IfElse               : 9
IfScope              : 24 26
Op                   : 40 45
OpBin                : 63 69
OpLogico             : 69
OpMult               : 73
OpPlus               : 71
OpPow                : 75
OpUno                : 77
Start                : 0
Switch               : 11
SwitchScope          : 30
TermMult             : 71 72 73
TermPlus             : 69 70 71
TermPow              : 73 74 75
While                : 10
WhileScope           : 28

Parsing method: LALR

state 0

    (0) S' -> . Start
    (1) Start -> . Axiom
    (2) Axiom -> . Axiom Code
    (3) Axiom -> . Axiom Function
    (4) Axiom -> .

    ID              reduce using rule 4 (Axiom -> .)
    IF              reduce using rule 4 (Axiom -> .)
    WHILE           reduce using rule 4 (Axiom -> .)
    SWITCH          reduce using rule 4 (Axiom -> .)
    (               reduce using rule 4 (Axiom -> .)
    NUM             reduce using rule 4 (Axiom -> .)
    ¿               reduce using rule 4 (Axiom -> .)
    NEG             reduce using rule 4 (Axiom -> .)
    SUB             reduce using rule 4 (Axiom -> .)
    $end            reduce using rule 4 (Axiom -> .)

    Start                          shift and go to state 1
    Axiom                          shift and go to state 2

state 1

    (0) S' -> Start .



state 2

    (1) Start -> Axiom .
    (2) Axiom -> Axiom . Code
    (3) Axiom -> Axiom . Function
    (5) Code -> . Code Block
    (6) Code -> . Block
    (15) Function -> . ID FunScope FunCases Body
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    $end            reduce using rule 1 (Start -> Axiom .)
    ID              shift and go to state 6
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Code                           shift and go to state 3
    Function                       shift and go to state 4
    Block                          shift and go to state 5
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 3

    (2) Axiom -> Axiom Code .
    (5) Code -> Code . Block
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for ¿ resolved as shift
  ! shift/reduce conflict for NEG resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    $end            reduce using rule 2 (Axiom -> Axiom Code .)
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

  ! ID              [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! IF              [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! WHILE           [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! SWITCH          [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! (               [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! NUM             [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! ¿               [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! NEG             [ reduce using rule 2 (Axiom -> Axiom Code .) ]
  ! SUB             [ reduce using rule 2 (Axiom -> Axiom Code .) ]

    Block                          shift and go to state 39
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 4

    (3) Axiom -> Axiom Function .

    ID              reduce using rule 3 (Axiom -> Axiom Function .)
    IF              reduce using rule 3 (Axiom -> Axiom Function .)
    WHILE           reduce using rule 3 (Axiom -> Axiom Function .)
    SWITCH          reduce using rule 3 (Axiom -> Axiom Function .)
    (               reduce using rule 3 (Axiom -> Axiom Function .)
    NUM             reduce using rule 3 (Axiom -> Axiom Function .)
    ¿               reduce using rule 3 (Axiom -> Axiom Function .)
    NEG             reduce using rule 3 (Axiom -> Axiom Function .)
    SUB             reduce using rule 3 (Axiom -> Axiom Function .)
    $end            reduce using rule 3 (Axiom -> Axiom Function .)


state 5

    (6) Code -> Block .

    ID              reduce using rule 6 (Code -> Block .)
    IF              reduce using rule 6 (Code -> Block .)
    WHILE           reduce using rule 6 (Code -> Block .)
    SWITCH          reduce using rule 6 (Code -> Block .)
    (               reduce using rule 6 (Code -> Block .)
    NUM             reduce using rule 6 (Code -> Block .)
    ¿               reduce using rule 6 (Code -> Block .)
    NEG             reduce using rule 6 (Code -> Block .)
    SUB             reduce using rule 6 (Code -> Block .)
    $end            reduce using rule 6 (Code -> Block .)
    }               reduce using rule 6 (Code -> Block .)


state 6

    (15) Function -> ID . FunScope FunCases Body
    (59) Atrib -> ID . LARROW AtribOp
    (61) Atrib -> ID . SWAP ID
    (46) Decl -> ID . ID
    (47) DeclArray -> ID . ID DeclArraySize
    (54) DeclAtrib -> ID . ID LARROW AtribOp
    (50) AtribArray -> ID . ArraySize LARROW AtribOp
    (56) AtribNum -> ID . LARROW AtribOp
    (79) Base -> ID .
    (83) FunCall -> ID . ( FunArg )
    (68) AccessArray -> ID . ArraySize
    (16) FunScope -> . :
    (52) ArraySize -> . ArraySize [ AtribOp ]
    (53) ArraySize -> . [ AtribOp ]

    LARROW          shift and go to state 43
    SWAP            shift and go to state 44
    ID              shift and go to state 41
    ?               reduce using rule 79 (Base -> ID .)
    POW             reduce using rule 79 (Base -> ID .)
    MUL             reduce using rule 79 (Base -> ID .)
    DIV             reduce using rule 79 (Base -> ID .)
    ADD             reduce using rule 79 (Base -> ID .)
    SUB             reduce using rule 79 (Base -> ID .)
    AND             reduce using rule 79 (Base -> ID .)
    OR              reduce using rule 79 (Base -> ID .)
    LESSER          reduce using rule 79 (Base -> ID .)
    GREATER         reduce using rule 79 (Base -> ID .)
    LEQ             reduce using rule 79 (Base -> ID .)
    GEQ             reduce using rule 79 (Base -> ID .)
    EQUAL           reduce using rule 79 (Base -> ID .)
    ;               reduce using rule 79 (Base -> ID .)
    RARROW          reduce using rule 79 (Base -> ID .)
    (               shift and go to state 46
    :               shift and go to state 47
    [               shift and go to state 48

    FunScope                       shift and go to state 42
    ArraySize                      shift and go to state 45

state 7

    (7) Block -> Exp . ;

    ;               shift and go to state 49


state 8

    (8) Block -> If .

    ID              reduce using rule 8 (Block -> If .)
    IF              reduce using rule 8 (Block -> If .)
    WHILE           reduce using rule 8 (Block -> If .)
    SWITCH          reduce using rule 8 (Block -> If .)
    (               reduce using rule 8 (Block -> If .)
    NUM             reduce using rule 8 (Block -> If .)
    ¿               reduce using rule 8 (Block -> If .)
    NEG             reduce using rule 8 (Block -> If .)
    SUB             reduce using rule 8 (Block -> If .)
    $end            reduce using rule 8 (Block -> If .)
    ELSE            reduce using rule 8 (Block -> If .)
    }               reduce using rule 8 (Block -> If .)
    :               reduce using rule 8 (Block -> If .)


state 9

    (9) Block -> IfElse .

    ID              reduce using rule 9 (Block -> IfElse .)
    IF              reduce using rule 9 (Block -> IfElse .)
    WHILE           reduce using rule 9 (Block -> IfElse .)
    SWITCH          reduce using rule 9 (Block -> IfElse .)
    (               reduce using rule 9 (Block -> IfElse .)
    NUM             reduce using rule 9 (Block -> IfElse .)
    ¿               reduce using rule 9 (Block -> IfElse .)
    NEG             reduce using rule 9 (Block -> IfElse .)
    SUB             reduce using rule 9 (Block -> IfElse .)
    $end            reduce using rule 9 (Block -> IfElse .)
    ELSE            reduce using rule 9 (Block -> IfElse .)
    }               reduce using rule 9 (Block -> IfElse .)
    :               reduce using rule 9 (Block -> IfElse .)


state 10

    (10) Block -> While .

    ID              reduce using rule 10 (Block -> While .)
    IF              reduce using rule 10 (Block -> While .)
    WHILE           reduce using rule 10 (Block -> While .)
    SWITCH          reduce using rule 10 (Block -> While .)
    (               reduce using rule 10 (Block -> While .)
    NUM             reduce using rule 10 (Block -> While .)
    ¿               reduce using rule 10 (Block -> While .)
    NEG             reduce using rule 10 (Block -> While .)
    SUB             reduce using rule 10 (Block -> While .)
    $end            reduce using rule 10 (Block -> While .)
    ELSE            reduce using rule 10 (Block -> While .)
    }               reduce using rule 10 (Block -> While .)
    :               reduce using rule 10 (Block -> While .)


state 11

    (11) Block -> Switch .

    ID              reduce using rule 11 (Block -> Switch .)
    IF              reduce using rule 11 (Block -> Switch .)
    WHILE           reduce using rule 11 (Block -> Switch .)
    SWITCH          reduce using rule 11 (Block -> Switch .)
    (               reduce using rule 11 (Block -> Switch .)
    NUM             reduce using rule 11 (Block -> Switch .)
    ¿               reduce using rule 11 (Block -> Switch .)
    NEG             reduce using rule 11 (Block -> Switch .)
    SUB             reduce using rule 11 (Block -> Switch .)
    $end            reduce using rule 11 (Block -> Switch .)
    ELSE            reduce using rule 11 (Block -> Switch .)
    }               reduce using rule 11 (Block -> Switch .)
    :               reduce using rule 11 (Block -> Switch .)


state 12

    (39) Exp -> Atrib .

    ;               reduce using rule 39 (Exp -> Atrib .)


state 13

    (40) Exp -> Op .
    (45) AtribOp -> Op .

    ;               reduce using rule 40 (Exp -> Op .)
    RARROW          reduce using rule 45 (AtribOp -> Op .)


state 14

    (41) Exp -> Decl .

    ;               reduce using rule 41 (Exp -> Decl .)


state 15

    (42) Exp -> DeclArray .

    ;               reduce using rule 42 (Exp -> DeclArray .)


state 16

    (43) Exp -> DeclAtrib .

    ;               reduce using rule 43 (Exp -> DeclAtrib .)


state 17

    (24) If -> IfScope . AtribOp Body
    (26) IfElse -> IfScope . AtribOp Body ElseScope Body
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 50
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 18

    (60) Atrib -> AtribOp . RARROW ID
    (55) DeclAtrib -> AtribOp . RARROW ID ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize
    (57) AtribNum -> AtribOp . RARROW ID

    RARROW          shift and go to state 54


state 19

    (28) While -> WhileScope . ( AtribOp ) Body

    (               shift and go to state 55


state 20

    (78) Base -> ( . AtribOp )
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 56
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 21

    (30) Switch -> SwitchScope . Conds { Cases }
    (31) Conds -> . Conds , Cond
    (32) Conds -> . Cond
    (33) Cond -> . ID ( AtribOp )
    (34) Cond -> . ( AtribOp )

    ID              shift and go to state 59
    (               shift and go to state 60

    Conds                          shift and go to state 57
    Cond                           shift and go to state 58

state 22

    (62) Atrib -> AtribArray .
    (58) AtribNum -> AtribArray .

    ;               reduce using rule 62 (Atrib -> AtribArray .)
    RARROW          reduce using rule 58 (AtribNum -> AtribArray .)


state 23

    (63) Op -> OpBin .
    (69) OpBin -> OpBin . OpLogico TermPlus
    (88) OpLogico -> . AND
    (89) OpLogico -> . OR
    (90) OpLogico -> . LESSER
    (91) OpLogico -> . GREATER
    (92) OpLogico -> . LEQ
    (93) OpLogico -> . GEQ
    (94) OpLogico -> . EQUAL

    ;               reduce using rule 63 (Op -> OpBin .)
    RARROW          reduce using rule 63 (Op -> OpBin .)
    {               reduce using rule 63 (Op -> OpBin .)
    ID              reduce using rule 63 (Op -> OpBin .)
    IF              reduce using rule 63 (Op -> OpBin .)
    WHILE           reduce using rule 63 (Op -> OpBin .)
    SWITCH          reduce using rule 63 (Op -> OpBin .)
    (               reduce using rule 63 (Op -> OpBin .)
    NUM             reduce using rule 63 (Op -> OpBin .)
    ¿               reduce using rule 63 (Op -> OpBin .)
    NEG             reduce using rule 63 (Op -> OpBin .)
    SUB             reduce using rule 63 (Op -> OpBin .)
    )               reduce using rule 63 (Op -> OpBin .)
    ,               reduce using rule 63 (Op -> OpBin .)
    ]               reduce using rule 63 (Op -> OpBin .)
    AND             shift and go to state 62
    OR              shift and go to state 63
    LESSER          shift and go to state 64
    GREATER         shift and go to state 65
    LEQ             shift and go to state 66
    GEQ             shift and go to state 67
    EQUAL           shift and go to state 68

    OpLogico                       shift and go to state 61

state 24

    (23) IfScope -> IF .

    ID              reduce using rule 23 (IfScope -> IF .)
    (               reduce using rule 23 (IfScope -> IF .)
    NUM             reduce using rule 23 (IfScope -> IF .)
    ¿               reduce using rule 23 (IfScope -> IF .)
    NEG             reduce using rule 23 (IfScope -> IF .)
    SUB             reduce using rule 23 (IfScope -> IF .)


state 25

    (27) WhileScope -> WHILE .

    (               reduce using rule 27 (WhileScope -> WHILE .)


state 26

    (29) SwitchScope -> SWITCH .

    ID              reduce using rule 29 (SwitchScope -> SWITCH .)
    (               reduce using rule 29 (SwitchScope -> SWITCH .)


state 27

    (44) AtribOp -> AtribNum .

    RARROW          reduce using rule 44 (AtribOp -> AtribNum .)
    {               reduce using rule 44 (AtribOp -> AtribNum .)
    ID              reduce using rule 44 (AtribOp -> AtribNum .)
    IF              reduce using rule 44 (AtribOp -> AtribNum .)
    WHILE           reduce using rule 44 (AtribOp -> AtribNum .)
    SWITCH          reduce using rule 44 (AtribOp -> AtribNum .)
    (               reduce using rule 44 (AtribOp -> AtribNum .)
    NUM             reduce using rule 44 (AtribOp -> AtribNum .)
    ¿               reduce using rule 44 (AtribOp -> AtribNum .)
    NEG             reduce using rule 44 (AtribOp -> AtribNum .)
    SUB             reduce using rule 44 (AtribOp -> AtribNum .)
    )               reduce using rule 44 (AtribOp -> AtribNum .)
    ;               reduce using rule 44 (AtribOp -> AtribNum .)
    ,               reduce using rule 44 (AtribOp -> AtribNum .)
    ]               reduce using rule 44 (AtribOp -> AtribNum .)


state 28

    (70) OpBin -> TermPlus .
    (71) TermPlus -> TermPlus . OpPlus TermMult
    (95) OpPlus -> . ADD
    (96) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 70 (OpBin -> TermPlus .)
    OR              reduce using rule 70 (OpBin -> TermPlus .)
    LESSER          reduce using rule 70 (OpBin -> TermPlus .)
    GREATER         reduce using rule 70 (OpBin -> TermPlus .)
    LEQ             reduce using rule 70 (OpBin -> TermPlus .)
    GEQ             reduce using rule 70 (OpBin -> TermPlus .)
    EQUAL           reduce using rule 70 (OpBin -> TermPlus .)
    ;               reduce using rule 70 (OpBin -> TermPlus .)
    RARROW          reduce using rule 70 (OpBin -> TermPlus .)
    {               reduce using rule 70 (OpBin -> TermPlus .)
    ID              reduce using rule 70 (OpBin -> TermPlus .)
    IF              reduce using rule 70 (OpBin -> TermPlus .)
    WHILE           reduce using rule 70 (OpBin -> TermPlus .)
    SWITCH          reduce using rule 70 (OpBin -> TermPlus .)
    (               reduce using rule 70 (OpBin -> TermPlus .)
    NUM             reduce using rule 70 (OpBin -> TermPlus .)
    ¿               reduce using rule 70 (OpBin -> TermPlus .)
    NEG             reduce using rule 70 (OpBin -> TermPlus .)
    )               reduce using rule 70 (OpBin -> TermPlus .)
    ,               reduce using rule 70 (OpBin -> TermPlus .)
    ]               reduce using rule 70 (OpBin -> TermPlus .)
    ADD             shift and go to state 70
    SUB             shift and go to state 71

  ! SUB             [ reduce using rule 70 (OpBin -> TermPlus .) ]

    OpPlus                         shift and go to state 69

state 29

    (72) TermPlus -> TermMult .
    (73) TermMult -> TermMult . OpMult TermPow
    (97) OpMult -> . MUL
    (98) OpMult -> . DIV

    ADD             reduce using rule 72 (TermPlus -> TermMult .)
    SUB             reduce using rule 72 (TermPlus -> TermMult .)
    AND             reduce using rule 72 (TermPlus -> TermMult .)
    OR              reduce using rule 72 (TermPlus -> TermMult .)
    LESSER          reduce using rule 72 (TermPlus -> TermMult .)
    GREATER         reduce using rule 72 (TermPlus -> TermMult .)
    LEQ             reduce using rule 72 (TermPlus -> TermMult .)
    GEQ             reduce using rule 72 (TermPlus -> TermMult .)
    EQUAL           reduce using rule 72 (TermPlus -> TermMult .)
    ;               reduce using rule 72 (TermPlus -> TermMult .)
    RARROW          reduce using rule 72 (TermPlus -> TermMult .)
    {               reduce using rule 72 (TermPlus -> TermMult .)
    ID              reduce using rule 72 (TermPlus -> TermMult .)
    IF              reduce using rule 72 (TermPlus -> TermMult .)
    WHILE           reduce using rule 72 (TermPlus -> TermMult .)
    SWITCH          reduce using rule 72 (TermPlus -> TermMult .)
    (               reduce using rule 72 (TermPlus -> TermMult .)
    NUM             reduce using rule 72 (TermPlus -> TermMult .)
    ¿               reduce using rule 72 (TermPlus -> TermMult .)
    NEG             reduce using rule 72 (TermPlus -> TermMult .)
    )               reduce using rule 72 (TermPlus -> TermMult .)
    ,               reduce using rule 72 (TermPlus -> TermMult .)
    ]               reduce using rule 72 (TermPlus -> TermMult .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

    OpMult                         shift and go to state 72

state 30

    (74) TermMult -> TermPow .
    (75) TermPow -> TermPow . OpPow Base
    (99) OpPow -> . POW

    MUL             reduce using rule 74 (TermMult -> TermPow .)
    DIV             reduce using rule 74 (TermMult -> TermPow .)
    ADD             reduce using rule 74 (TermMult -> TermPow .)
    SUB             reduce using rule 74 (TermMult -> TermPow .)
    AND             reduce using rule 74 (TermMult -> TermPow .)
    OR              reduce using rule 74 (TermMult -> TermPow .)
    LESSER          reduce using rule 74 (TermMult -> TermPow .)
    GREATER         reduce using rule 74 (TermMult -> TermPow .)
    LEQ             reduce using rule 74 (TermMult -> TermPow .)
    GEQ             reduce using rule 74 (TermMult -> TermPow .)
    EQUAL           reduce using rule 74 (TermMult -> TermPow .)
    ;               reduce using rule 74 (TermMult -> TermPow .)
    RARROW          reduce using rule 74 (TermMult -> TermPow .)
    {               reduce using rule 74 (TermMult -> TermPow .)
    ID              reduce using rule 74 (TermMult -> TermPow .)
    IF              reduce using rule 74 (TermMult -> TermPow .)
    WHILE           reduce using rule 74 (TermMult -> TermPow .)
    SWITCH          reduce using rule 74 (TermMult -> TermPow .)
    (               reduce using rule 74 (TermMult -> TermPow .)
    NUM             reduce using rule 74 (TermMult -> TermPow .)
    ¿               reduce using rule 74 (TermMult -> TermPow .)
    NEG             reduce using rule 74 (TermMult -> TermPow .)
    )               reduce using rule 74 (TermMult -> TermPow .)
    ,               reduce using rule 74 (TermMult -> TermPow .)
    ]               reduce using rule 74 (TermMult -> TermPow .)
    POW             shift and go to state 76

    OpPow                          shift and go to state 75

state 31

    (76) TermPow -> Base .
    (67) OpUno -> Base . ?

    POW             reduce using rule 76 (TermPow -> Base .)
    MUL             reduce using rule 76 (TermPow -> Base .)
    DIV             reduce using rule 76 (TermPow -> Base .)
    ADD             reduce using rule 76 (TermPow -> Base .)
    SUB             reduce using rule 76 (TermPow -> Base .)
    AND             reduce using rule 76 (TermPow -> Base .)
    OR              reduce using rule 76 (TermPow -> Base .)
    LESSER          reduce using rule 76 (TermPow -> Base .)
    GREATER         reduce using rule 76 (TermPow -> Base .)
    LEQ             reduce using rule 76 (TermPow -> Base .)
    GEQ             reduce using rule 76 (TermPow -> Base .)
    EQUAL           reduce using rule 76 (TermPow -> Base .)
    ;               reduce using rule 76 (TermPow -> Base .)
    RARROW          reduce using rule 76 (TermPow -> Base .)
    {               reduce using rule 76 (TermPow -> Base .)
    ID              reduce using rule 76 (TermPow -> Base .)
    IF              reduce using rule 76 (TermPow -> Base .)
    WHILE           reduce using rule 76 (TermPow -> Base .)
    SWITCH          reduce using rule 76 (TermPow -> Base .)
    (               reduce using rule 76 (TermPow -> Base .)
    NUM             reduce using rule 76 (TermPow -> Base .)
    ¿               reduce using rule 76 (TermPow -> Base .)
    NEG             reduce using rule 76 (TermPow -> Base .)
    )               reduce using rule 76 (TermPow -> Base .)
    ,               reduce using rule 76 (TermPow -> Base .)
    ]               reduce using rule 76 (TermPow -> Base .)
    ?               shift and go to state 77


state 32

    (77) Base -> OpUno .

    ?               reduce using rule 77 (Base -> OpUno .)
    POW             reduce using rule 77 (Base -> OpUno .)
    MUL             reduce using rule 77 (Base -> OpUno .)
    DIV             reduce using rule 77 (Base -> OpUno .)
    ADD             reduce using rule 77 (Base -> OpUno .)
    SUB             reduce using rule 77 (Base -> OpUno .)
    AND             reduce using rule 77 (Base -> OpUno .)
    OR              reduce using rule 77 (Base -> OpUno .)
    LESSER          reduce using rule 77 (Base -> OpUno .)
    GREATER         reduce using rule 77 (Base -> OpUno .)
    LEQ             reduce using rule 77 (Base -> OpUno .)
    GEQ             reduce using rule 77 (Base -> OpUno .)
    EQUAL           reduce using rule 77 (Base -> OpUno .)
    ;               reduce using rule 77 (Base -> OpUno .)
    RARROW          reduce using rule 77 (Base -> OpUno .)
    {               reduce using rule 77 (Base -> OpUno .)
    ID              reduce using rule 77 (Base -> OpUno .)
    IF              reduce using rule 77 (Base -> OpUno .)
    WHILE           reduce using rule 77 (Base -> OpUno .)
    SWITCH          reduce using rule 77 (Base -> OpUno .)
    (               reduce using rule 77 (Base -> OpUno .)
    NUM             reduce using rule 77 (Base -> OpUno .)
    ¿               reduce using rule 77 (Base -> OpUno .)
    NEG             reduce using rule 77 (Base -> OpUno .)
    )               reduce using rule 77 (Base -> OpUno .)
    ,               reduce using rule 77 (Base -> OpUno .)
    ]               reduce using rule 77 (Base -> OpUno .)


state 33

    (80) Base -> NUM .

    ?               reduce using rule 80 (Base -> NUM .)
    POW             reduce using rule 80 (Base -> NUM .)
    MUL             reduce using rule 80 (Base -> NUM .)
    DIV             reduce using rule 80 (Base -> NUM .)
    ADD             reduce using rule 80 (Base -> NUM .)
    SUB             reduce using rule 80 (Base -> NUM .)
    AND             reduce using rule 80 (Base -> NUM .)
    OR              reduce using rule 80 (Base -> NUM .)
    LESSER          reduce using rule 80 (Base -> NUM .)
    GREATER         reduce using rule 80 (Base -> NUM .)
    LEQ             reduce using rule 80 (Base -> NUM .)
    GEQ             reduce using rule 80 (Base -> NUM .)
    EQUAL           reduce using rule 80 (Base -> NUM .)
    ;               reduce using rule 80 (Base -> NUM .)
    RARROW          reduce using rule 80 (Base -> NUM .)
    {               reduce using rule 80 (Base -> NUM .)
    ID              reduce using rule 80 (Base -> NUM .)
    IF              reduce using rule 80 (Base -> NUM .)
    WHILE           reduce using rule 80 (Base -> NUM .)
    SWITCH          reduce using rule 80 (Base -> NUM .)
    (               reduce using rule 80 (Base -> NUM .)
    NUM             reduce using rule 80 (Base -> NUM .)
    ¿               reduce using rule 80 (Base -> NUM .)
    NEG             reduce using rule 80 (Base -> NUM .)
    )               reduce using rule 80 (Base -> NUM .)
    ,               reduce using rule 80 (Base -> NUM .)
    ]               reduce using rule 80 (Base -> NUM .)


state 34

    (81) Base -> FunCall .

    ?               reduce using rule 81 (Base -> FunCall .)
    POW             reduce using rule 81 (Base -> FunCall .)
    MUL             reduce using rule 81 (Base -> FunCall .)
    DIV             reduce using rule 81 (Base -> FunCall .)
    ADD             reduce using rule 81 (Base -> FunCall .)
    SUB             reduce using rule 81 (Base -> FunCall .)
    AND             reduce using rule 81 (Base -> FunCall .)
    OR              reduce using rule 81 (Base -> FunCall .)
    LESSER          reduce using rule 81 (Base -> FunCall .)
    GREATER         reduce using rule 81 (Base -> FunCall .)
    LEQ             reduce using rule 81 (Base -> FunCall .)
    GEQ             reduce using rule 81 (Base -> FunCall .)
    EQUAL           reduce using rule 81 (Base -> FunCall .)
    ;               reduce using rule 81 (Base -> FunCall .)
    RARROW          reduce using rule 81 (Base -> FunCall .)
    {               reduce using rule 81 (Base -> FunCall .)
    ID              reduce using rule 81 (Base -> FunCall .)
    IF              reduce using rule 81 (Base -> FunCall .)
    WHILE           reduce using rule 81 (Base -> FunCall .)
    SWITCH          reduce using rule 81 (Base -> FunCall .)
    (               reduce using rule 81 (Base -> FunCall .)
    NUM             reduce using rule 81 (Base -> FunCall .)
    ¿               reduce using rule 81 (Base -> FunCall .)
    NEG             reduce using rule 81 (Base -> FunCall .)
    )               reduce using rule 81 (Base -> FunCall .)
    ,               reduce using rule 81 (Base -> FunCall .)
    ]               reduce using rule 81 (Base -> FunCall .)


state 35

    (82) Base -> ¿ .

    ?               reduce using rule 82 (Base -> ¿ .)
    POW             reduce using rule 82 (Base -> ¿ .)
    MUL             reduce using rule 82 (Base -> ¿ .)
    DIV             reduce using rule 82 (Base -> ¿ .)
    ADD             reduce using rule 82 (Base -> ¿ .)
    SUB             reduce using rule 82 (Base -> ¿ .)
    AND             reduce using rule 82 (Base -> ¿ .)
    OR              reduce using rule 82 (Base -> ¿ .)
    LESSER          reduce using rule 82 (Base -> ¿ .)
    GREATER         reduce using rule 82 (Base -> ¿ .)
    LEQ             reduce using rule 82 (Base -> ¿ .)
    GEQ             reduce using rule 82 (Base -> ¿ .)
    EQUAL           reduce using rule 82 (Base -> ¿ .)
    ;               reduce using rule 82 (Base -> ¿ .)
    RARROW          reduce using rule 82 (Base -> ¿ .)
    {               reduce using rule 82 (Base -> ¿ .)
    ID              reduce using rule 82 (Base -> ¿ .)
    IF              reduce using rule 82 (Base -> ¿ .)
    WHILE           reduce using rule 82 (Base -> ¿ .)
    SWITCH          reduce using rule 82 (Base -> ¿ .)
    (               reduce using rule 82 (Base -> ¿ .)
    NUM             reduce using rule 82 (Base -> ¿ .)
    ¿               reduce using rule 82 (Base -> ¿ .)
    NEG             reduce using rule 82 (Base -> ¿ .)
    )               reduce using rule 82 (Base -> ¿ .)
    ,               reduce using rule 82 (Base -> ¿ .)
    ]               reduce using rule 82 (Base -> ¿ .)


state 36

    (64) OpUno -> NEG . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    (               shift and go to state 20
    ID              shift and go to state 79
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Base                           shift and go to state 78
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 37

    (65) OpUno -> AccessArray .

    ?               reduce using rule 65 (OpUno -> AccessArray .)
    POW             reduce using rule 65 (OpUno -> AccessArray .)
    MUL             reduce using rule 65 (OpUno -> AccessArray .)
    DIV             reduce using rule 65 (OpUno -> AccessArray .)
    ADD             reduce using rule 65 (OpUno -> AccessArray .)
    SUB             reduce using rule 65 (OpUno -> AccessArray .)
    AND             reduce using rule 65 (OpUno -> AccessArray .)
    OR              reduce using rule 65 (OpUno -> AccessArray .)
    LESSER          reduce using rule 65 (OpUno -> AccessArray .)
    GREATER         reduce using rule 65 (OpUno -> AccessArray .)
    LEQ             reduce using rule 65 (OpUno -> AccessArray .)
    GEQ             reduce using rule 65 (OpUno -> AccessArray .)
    EQUAL           reduce using rule 65 (OpUno -> AccessArray .)
    ;               reduce using rule 65 (OpUno -> AccessArray .)
    RARROW          reduce using rule 65 (OpUno -> AccessArray .)
    {               reduce using rule 65 (OpUno -> AccessArray .)
    ID              reduce using rule 65 (OpUno -> AccessArray .)
    IF              reduce using rule 65 (OpUno -> AccessArray .)
    WHILE           reduce using rule 65 (OpUno -> AccessArray .)
    SWITCH          reduce using rule 65 (OpUno -> AccessArray .)
    (               reduce using rule 65 (OpUno -> AccessArray .)
    NUM             reduce using rule 65 (OpUno -> AccessArray .)
    ¿               reduce using rule 65 (OpUno -> AccessArray .)
    NEG             reduce using rule 65 (OpUno -> AccessArray .)
    )               reduce using rule 65 (OpUno -> AccessArray .)
    ,               reduce using rule 65 (OpUno -> AccessArray .)
    ]               reduce using rule 65 (OpUno -> AccessArray .)


state 38

    (66) OpUno -> SUB . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    (               shift and go to state 20
    ID              shift and go to state 79
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Base                           shift and go to state 80
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 39

    (5) Code -> Code Block .

    ID              reduce using rule 5 (Code -> Code Block .)
    IF              reduce using rule 5 (Code -> Code Block .)
    WHILE           reduce using rule 5 (Code -> Code Block .)
    SWITCH          reduce using rule 5 (Code -> Code Block .)
    (               reduce using rule 5 (Code -> Code Block .)
    NUM             reduce using rule 5 (Code -> Code Block .)
    ¿               reduce using rule 5 (Code -> Code Block .)
    NEG             reduce using rule 5 (Code -> Code Block .)
    SUB             reduce using rule 5 (Code -> Code Block .)
    $end            reduce using rule 5 (Code -> Code Block .)
    }               reduce using rule 5 (Code -> Code Block .)


state 40

    (59) Atrib -> ID . LARROW AtribOp
    (61) Atrib -> ID . SWAP ID
    (46) Decl -> ID . ID
    (47) DeclArray -> ID . ID DeclArraySize
    (54) DeclAtrib -> ID . ID LARROW AtribOp
    (50) AtribArray -> ID . ArraySize LARROW AtribOp
    (56) AtribNum -> ID . LARROW AtribOp
    (79) Base -> ID .
    (83) FunCall -> ID . ( FunArg )
    (68) AccessArray -> ID . ArraySize
    (52) ArraySize -> . ArraySize [ AtribOp ]
    (53) ArraySize -> . [ AtribOp ]

    LARROW          shift and go to state 43
    SWAP            shift and go to state 44
    ID              shift and go to state 41
    ?               reduce using rule 79 (Base -> ID .)
    POW             reduce using rule 79 (Base -> ID .)
    MUL             reduce using rule 79 (Base -> ID .)
    DIV             reduce using rule 79 (Base -> ID .)
    ADD             reduce using rule 79 (Base -> ID .)
    SUB             reduce using rule 79 (Base -> ID .)
    AND             reduce using rule 79 (Base -> ID .)
    OR              reduce using rule 79 (Base -> ID .)
    LESSER          reduce using rule 79 (Base -> ID .)
    GREATER         reduce using rule 79 (Base -> ID .)
    LEQ             reduce using rule 79 (Base -> ID .)
    GEQ             reduce using rule 79 (Base -> ID .)
    EQUAL           reduce using rule 79 (Base -> ID .)
    ;               reduce using rule 79 (Base -> ID .)
    RARROW          reduce using rule 79 (Base -> ID .)
    (               shift and go to state 46
    [               shift and go to state 48

    ArraySize                      shift and go to state 45

state 41

    (46) Decl -> ID ID .
    (47) DeclArray -> ID ID . DeclArraySize
    (54) DeclAtrib -> ID ID . LARROW AtribOp
    (48) DeclArraySize -> . DeclArraySize [ NUM ]
    (49) DeclArraySize -> . [ NUM ]

    ;               reduce using rule 46 (Decl -> ID ID .)
    LARROW          shift and go to state 82
    [               shift and go to state 83

    DeclArraySize                  shift and go to state 81

state 42

    (15) Function -> ID FunScope . FunCases Body
    (17) FunCases -> . FunExtra RARROW ID
    (18) FunCases -> . RARROW ID
    (19) FunCases -> . FunExtra
    (20) FunCases -> .
    (21) FunExtra -> . FunExtra , ID
    (22) FunExtra -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RARROW          shift and go to state 87
    {               reduce using rule 20 (FunCases -> .)
    IF              reduce using rule 20 (FunCases -> .)
    WHILE           reduce using rule 20 (FunCases -> .)
    SWITCH          reduce using rule 20 (FunCases -> .)
    (               reduce using rule 20 (FunCases -> .)
    NUM             reduce using rule 20 (FunCases -> .)
    ¿               reduce using rule 20 (FunCases -> .)
    NEG             reduce using rule 20 (FunCases -> .)
    SUB             reduce using rule 20 (FunCases -> .)
    ID              shift and go to state 84

  ! ID              [ reduce using rule 20 (FunCases -> .) ]

    FunCases                       shift and go to state 85
    FunExtra                       shift and go to state 86

state 43

    (59) Atrib -> ID LARROW . AtribOp
    (56) AtribNum -> ID LARROW . AtribOp
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 88
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 44

    (61) Atrib -> ID SWAP . ID

    ID              shift and go to state 89


state 45

    (50) AtribArray -> ID ArraySize . LARROW AtribOp
    (68) AccessArray -> ID ArraySize .
    (52) ArraySize -> ArraySize . [ AtribOp ]

    LARROW          shift and go to state 90
    ?               reduce using rule 68 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 68 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 68 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 68 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 68 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 68 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 68 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 68 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 68 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 68 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 68 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 68 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 68 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 68 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 68 (AccessArray -> ID ArraySize .)
    {               reduce using rule 68 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 68 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 68 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 68 (AccessArray -> ID ArraySize .)
    SWITCH          reduce using rule 68 (AccessArray -> ID ArraySize .)
    (               reduce using rule 68 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 68 (AccessArray -> ID ArraySize .)
    ¿               reduce using rule 68 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 68 (AccessArray -> ID ArraySize .)
    )               reduce using rule 68 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 68 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 68 (AccessArray -> ID ArraySize .)
    [               shift and go to state 91


state 46

    (83) FunCall -> ID ( . FunArg )
    (84) FunArg -> . FunRec
    (85) FunArg -> .
    (86) FunRec -> . FunRec , AtribOp
    (87) FunRec -> . AtribOp
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    )               reduce using rule 85 (FunArg -> .)
    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    FunArg                         shift and go to state 92
    FunRec                         shift and go to state 93
    AtribOp                        shift and go to state 94
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 47

    (16) FunScope -> : .

    RARROW          reduce using rule 16 (FunScope -> : .)
    ID              reduce using rule 16 (FunScope -> : .)
    {               reduce using rule 16 (FunScope -> : .)
    IF              reduce using rule 16 (FunScope -> : .)
    WHILE           reduce using rule 16 (FunScope -> : .)
    SWITCH          reduce using rule 16 (FunScope -> : .)
    (               reduce using rule 16 (FunScope -> : .)
    NUM             reduce using rule 16 (FunScope -> : .)
    ¿               reduce using rule 16 (FunScope -> : .)
    NEG             reduce using rule 16 (FunScope -> : .)
    SUB             reduce using rule 16 (FunScope -> : .)


state 48

    (53) ArraySize -> [ . AtribOp ]
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 95
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 49

    (7) Block -> Exp ; .

    ID              reduce using rule 7 (Block -> Exp ; .)
    IF              reduce using rule 7 (Block -> Exp ; .)
    WHILE           reduce using rule 7 (Block -> Exp ; .)
    SWITCH          reduce using rule 7 (Block -> Exp ; .)
    (               reduce using rule 7 (Block -> Exp ; .)
    NUM             reduce using rule 7 (Block -> Exp ; .)
    ¿               reduce using rule 7 (Block -> Exp ; .)
    NEG             reduce using rule 7 (Block -> Exp ; .)
    SUB             reduce using rule 7 (Block -> Exp ; .)
    $end            reduce using rule 7 (Block -> Exp ; .)
    ELSE            reduce using rule 7 (Block -> Exp ; .)
    }               reduce using rule 7 (Block -> Exp ; .)
    :               reduce using rule 7 (Block -> Exp ; .)


state 50

    (24) If -> IfScope AtribOp . Body
    (26) IfElse -> IfScope AtribOp . Body ElseScope Body
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize
    (12) Body -> . { }
    (13) Body -> . Block
    (14) Body -> . { Code }
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    RARROW          shift and go to state 97
    {               shift and go to state 98
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    Body                           shift and go to state 96
    Block                          shift and go to state 99
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 51

    (45) AtribOp -> Op .

    RARROW          reduce using rule 45 (AtribOp -> Op .)
    {               reduce using rule 45 (AtribOp -> Op .)
    ID              reduce using rule 45 (AtribOp -> Op .)
    IF              reduce using rule 45 (AtribOp -> Op .)
    WHILE           reduce using rule 45 (AtribOp -> Op .)
    SWITCH          reduce using rule 45 (AtribOp -> Op .)
    (               reduce using rule 45 (AtribOp -> Op .)
    NUM             reduce using rule 45 (AtribOp -> Op .)
    ¿               reduce using rule 45 (AtribOp -> Op .)
    NEG             reduce using rule 45 (AtribOp -> Op .)
    SUB             reduce using rule 45 (AtribOp -> Op .)
    )               reduce using rule 45 (AtribOp -> Op .)
    ;               reduce using rule 45 (AtribOp -> Op .)
    ,               reduce using rule 45 (AtribOp -> Op .)
    ]               reduce using rule 45 (AtribOp -> Op .)


state 52

    (56) AtribNum -> ID . LARROW AtribOp
    (50) AtribArray -> ID . ArraySize LARROW AtribOp
    (79) Base -> ID .
    (83) FunCall -> ID . ( FunArg )
    (68) AccessArray -> ID . ArraySize
    (52) ArraySize -> . ArraySize [ AtribOp ]
    (53) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    LARROW          shift and go to state 100
    ?               reduce using rule 79 (Base -> ID .)
    POW             reduce using rule 79 (Base -> ID .)
    MUL             reduce using rule 79 (Base -> ID .)
    DIV             reduce using rule 79 (Base -> ID .)
    ADD             reduce using rule 79 (Base -> ID .)
    SUB             reduce using rule 79 (Base -> ID .)
    AND             reduce using rule 79 (Base -> ID .)
    OR              reduce using rule 79 (Base -> ID .)
    LESSER          reduce using rule 79 (Base -> ID .)
    GREATER         reduce using rule 79 (Base -> ID .)
    LEQ             reduce using rule 79 (Base -> ID .)
    GEQ             reduce using rule 79 (Base -> ID .)
    EQUAL           reduce using rule 79 (Base -> ID .)
    RARROW          reduce using rule 79 (Base -> ID .)
    {               reduce using rule 79 (Base -> ID .)
    ID              reduce using rule 79 (Base -> ID .)
    IF              reduce using rule 79 (Base -> ID .)
    WHILE           reduce using rule 79 (Base -> ID .)
    SWITCH          reduce using rule 79 (Base -> ID .)
    NUM             reduce using rule 79 (Base -> ID .)
    ¿               reduce using rule 79 (Base -> ID .)
    NEG             reduce using rule 79 (Base -> ID .)
    )               reduce using rule 79 (Base -> ID .)
    ;               reduce using rule 79 (Base -> ID .)
    ,               reduce using rule 79 (Base -> ID .)
    ]               reduce using rule 79 (Base -> ID .)
    (               shift and go to state 46
    [               shift and go to state 48

  ! (               [ reduce using rule 79 (Base -> ID .) ]

    ArraySize                      shift and go to state 45

state 53

    (58) AtribNum -> AtribArray .

    RARROW          reduce using rule 58 (AtribNum -> AtribArray .)
    {               reduce using rule 58 (AtribNum -> AtribArray .)
    ID              reduce using rule 58 (AtribNum -> AtribArray .)
    IF              reduce using rule 58 (AtribNum -> AtribArray .)
    WHILE           reduce using rule 58 (AtribNum -> AtribArray .)
    SWITCH          reduce using rule 58 (AtribNum -> AtribArray .)
    (               reduce using rule 58 (AtribNum -> AtribArray .)
    NUM             reduce using rule 58 (AtribNum -> AtribArray .)
    ¿               reduce using rule 58 (AtribNum -> AtribArray .)
    NEG             reduce using rule 58 (AtribNum -> AtribArray .)
    SUB             reduce using rule 58 (AtribNum -> AtribArray .)
    )               reduce using rule 58 (AtribNum -> AtribArray .)
    ;               reduce using rule 58 (AtribNum -> AtribArray .)
    ,               reduce using rule 58 (AtribNum -> AtribArray .)
    ]               reduce using rule 58 (AtribNum -> AtribArray .)


state 54

    (60) Atrib -> AtribOp RARROW . ID
    (55) DeclAtrib -> AtribOp RARROW . ID ID
    (51) AtribArray -> AtribOp RARROW . ID ArraySize
    (57) AtribNum -> AtribOp RARROW . ID

    ID              shift and go to state 101


state 55

    (28) While -> WhileScope ( . AtribOp ) Body
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 102
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 56

    (78) Base -> ( AtribOp . )
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 103
    RARROW          shift and go to state 97


state 57

    (30) Switch -> SwitchScope Conds . { Cases }
    (31) Conds -> Conds . , Cond

    {               shift and go to state 104
    ,               shift and go to state 105


state 58

    (32) Conds -> Cond .

    {               reduce using rule 32 (Conds -> Cond .)
    ,               reduce using rule 32 (Conds -> Cond .)


state 59

    (33) Cond -> ID . ( AtribOp )

    (               shift and go to state 106


state 60

    (34) Cond -> ( . AtribOp )
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 107
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 61

    (69) OpBin -> OpBin OpLogico . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    (               shift and go to state 20
    ID              shift and go to state 79
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    TermPlus                       shift and go to state 108
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 62

    (88) OpLogico -> AND .

    (               reduce using rule 88 (OpLogico -> AND .)
    ID              reduce using rule 88 (OpLogico -> AND .)
    NUM             reduce using rule 88 (OpLogico -> AND .)
    ¿               reduce using rule 88 (OpLogico -> AND .)
    NEG             reduce using rule 88 (OpLogico -> AND .)
    SUB             reduce using rule 88 (OpLogico -> AND .)


state 63

    (89) OpLogico -> OR .

    (               reduce using rule 89 (OpLogico -> OR .)
    ID              reduce using rule 89 (OpLogico -> OR .)
    NUM             reduce using rule 89 (OpLogico -> OR .)
    ¿               reduce using rule 89 (OpLogico -> OR .)
    NEG             reduce using rule 89 (OpLogico -> OR .)
    SUB             reduce using rule 89 (OpLogico -> OR .)


state 64

    (90) OpLogico -> LESSER .

    (               reduce using rule 90 (OpLogico -> LESSER .)
    ID              reduce using rule 90 (OpLogico -> LESSER .)
    NUM             reduce using rule 90 (OpLogico -> LESSER .)
    ¿               reduce using rule 90 (OpLogico -> LESSER .)
    NEG             reduce using rule 90 (OpLogico -> LESSER .)
    SUB             reduce using rule 90 (OpLogico -> LESSER .)


state 65

    (91) OpLogico -> GREATER .

    (               reduce using rule 91 (OpLogico -> GREATER .)
    ID              reduce using rule 91 (OpLogico -> GREATER .)
    NUM             reduce using rule 91 (OpLogico -> GREATER .)
    ¿               reduce using rule 91 (OpLogico -> GREATER .)
    NEG             reduce using rule 91 (OpLogico -> GREATER .)
    SUB             reduce using rule 91 (OpLogico -> GREATER .)


state 66

    (92) OpLogico -> LEQ .

    (               reduce using rule 92 (OpLogico -> LEQ .)
    ID              reduce using rule 92 (OpLogico -> LEQ .)
    NUM             reduce using rule 92 (OpLogico -> LEQ .)
    ¿               reduce using rule 92 (OpLogico -> LEQ .)
    NEG             reduce using rule 92 (OpLogico -> LEQ .)
    SUB             reduce using rule 92 (OpLogico -> LEQ .)


state 67

    (93) OpLogico -> GEQ .

    (               reduce using rule 93 (OpLogico -> GEQ .)
    ID              reduce using rule 93 (OpLogico -> GEQ .)
    NUM             reduce using rule 93 (OpLogico -> GEQ .)
    ¿               reduce using rule 93 (OpLogico -> GEQ .)
    NEG             reduce using rule 93 (OpLogico -> GEQ .)
    SUB             reduce using rule 93 (OpLogico -> GEQ .)


state 68

    (94) OpLogico -> EQUAL .

    (               reduce using rule 94 (OpLogico -> EQUAL .)
    ID              reduce using rule 94 (OpLogico -> EQUAL .)
    NUM             reduce using rule 94 (OpLogico -> EQUAL .)
    ¿               reduce using rule 94 (OpLogico -> EQUAL .)
    NEG             reduce using rule 94 (OpLogico -> EQUAL .)
    SUB             reduce using rule 94 (OpLogico -> EQUAL .)


state 69

    (71) TermPlus -> TermPlus OpPlus . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    (               shift and go to state 20
    ID              shift and go to state 79
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    TermMult                       shift and go to state 109
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 70

    (95) OpPlus -> ADD .

    (               reduce using rule 95 (OpPlus -> ADD .)
    ID              reduce using rule 95 (OpPlus -> ADD .)
    NUM             reduce using rule 95 (OpPlus -> ADD .)
    ¿               reduce using rule 95 (OpPlus -> ADD .)
    NEG             reduce using rule 95 (OpPlus -> ADD .)
    SUB             reduce using rule 95 (OpPlus -> ADD .)


state 71

    (96) OpPlus -> SUB .

    (               reduce using rule 96 (OpPlus -> SUB .)
    ID              reduce using rule 96 (OpPlus -> SUB .)
    NUM             reduce using rule 96 (OpPlus -> SUB .)
    ¿               reduce using rule 96 (OpPlus -> SUB .)
    NEG             reduce using rule 96 (OpPlus -> SUB .)
    SUB             reduce using rule 96 (OpPlus -> SUB .)


state 72

    (73) TermMult -> TermMult OpMult . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    (               shift and go to state 20
    ID              shift and go to state 79
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    TermPow                        shift and go to state 110
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 73

    (97) OpMult -> MUL .

    (               reduce using rule 97 (OpMult -> MUL .)
    ID              reduce using rule 97 (OpMult -> MUL .)
    NUM             reduce using rule 97 (OpMult -> MUL .)
    ¿               reduce using rule 97 (OpMult -> MUL .)
    NEG             reduce using rule 97 (OpMult -> MUL .)
    SUB             reduce using rule 97 (OpMult -> MUL .)


state 74

    (98) OpMult -> DIV .

    (               reduce using rule 98 (OpMult -> DIV .)
    ID              reduce using rule 98 (OpMult -> DIV .)
    NUM             reduce using rule 98 (OpMult -> DIV .)
    ¿               reduce using rule 98 (OpMult -> DIV .)
    NEG             reduce using rule 98 (OpMult -> DIV .)
    SUB             reduce using rule 98 (OpMult -> DIV .)


state 75

    (75) TermPow -> TermPow OpPow . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    (               shift and go to state 20
    ID              shift and go to state 79
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Base                           shift and go to state 111
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 76

    (99) OpPow -> POW .

    (               reduce using rule 99 (OpPow -> POW .)
    ID              reduce using rule 99 (OpPow -> POW .)
    NUM             reduce using rule 99 (OpPow -> POW .)
    ¿               reduce using rule 99 (OpPow -> POW .)
    NEG             reduce using rule 99 (OpPow -> POW .)
    SUB             reduce using rule 99 (OpPow -> POW .)


state 77

    (67) OpUno -> Base ? .

    ?               reduce using rule 67 (OpUno -> Base ? .)
    POW             reduce using rule 67 (OpUno -> Base ? .)
    MUL             reduce using rule 67 (OpUno -> Base ? .)
    DIV             reduce using rule 67 (OpUno -> Base ? .)
    ADD             reduce using rule 67 (OpUno -> Base ? .)
    SUB             reduce using rule 67 (OpUno -> Base ? .)
    AND             reduce using rule 67 (OpUno -> Base ? .)
    OR              reduce using rule 67 (OpUno -> Base ? .)
    LESSER          reduce using rule 67 (OpUno -> Base ? .)
    GREATER         reduce using rule 67 (OpUno -> Base ? .)
    LEQ             reduce using rule 67 (OpUno -> Base ? .)
    GEQ             reduce using rule 67 (OpUno -> Base ? .)
    EQUAL           reduce using rule 67 (OpUno -> Base ? .)
    ;               reduce using rule 67 (OpUno -> Base ? .)
    RARROW          reduce using rule 67 (OpUno -> Base ? .)
    {               reduce using rule 67 (OpUno -> Base ? .)
    ID              reduce using rule 67 (OpUno -> Base ? .)
    IF              reduce using rule 67 (OpUno -> Base ? .)
    WHILE           reduce using rule 67 (OpUno -> Base ? .)
    SWITCH          reduce using rule 67 (OpUno -> Base ? .)
    (               reduce using rule 67 (OpUno -> Base ? .)
    NUM             reduce using rule 67 (OpUno -> Base ? .)
    ¿               reduce using rule 67 (OpUno -> Base ? .)
    NEG             reduce using rule 67 (OpUno -> Base ? .)
    )               reduce using rule 67 (OpUno -> Base ? .)
    ,               reduce using rule 67 (OpUno -> Base ? .)
    ]               reduce using rule 67 (OpUno -> Base ? .)


state 78

    (64) OpUno -> NEG Base .
    (67) OpUno -> Base . ?

  ! shift/reduce conflict for ? resolved as shift
    POW             reduce using rule 64 (OpUno -> NEG Base .)
    MUL             reduce using rule 64 (OpUno -> NEG Base .)
    DIV             reduce using rule 64 (OpUno -> NEG Base .)
    ADD             reduce using rule 64 (OpUno -> NEG Base .)
    SUB             reduce using rule 64 (OpUno -> NEG Base .)
    AND             reduce using rule 64 (OpUno -> NEG Base .)
    OR              reduce using rule 64 (OpUno -> NEG Base .)
    LESSER          reduce using rule 64 (OpUno -> NEG Base .)
    GREATER         reduce using rule 64 (OpUno -> NEG Base .)
    LEQ             reduce using rule 64 (OpUno -> NEG Base .)
    GEQ             reduce using rule 64 (OpUno -> NEG Base .)
    EQUAL           reduce using rule 64 (OpUno -> NEG Base .)
    ;               reduce using rule 64 (OpUno -> NEG Base .)
    RARROW          reduce using rule 64 (OpUno -> NEG Base .)
    {               reduce using rule 64 (OpUno -> NEG Base .)
    ID              reduce using rule 64 (OpUno -> NEG Base .)
    IF              reduce using rule 64 (OpUno -> NEG Base .)
    WHILE           reduce using rule 64 (OpUno -> NEG Base .)
    SWITCH          reduce using rule 64 (OpUno -> NEG Base .)
    (               reduce using rule 64 (OpUno -> NEG Base .)
    NUM             reduce using rule 64 (OpUno -> NEG Base .)
    ¿               reduce using rule 64 (OpUno -> NEG Base .)
    NEG             reduce using rule 64 (OpUno -> NEG Base .)
    )               reduce using rule 64 (OpUno -> NEG Base .)
    ,               reduce using rule 64 (OpUno -> NEG Base .)
    ]               reduce using rule 64 (OpUno -> NEG Base .)
    ?               shift and go to state 77

  ! ?               [ reduce using rule 64 (OpUno -> NEG Base .) ]


state 79

    (79) Base -> ID .
    (83) FunCall -> ID . ( FunArg )
    (68) AccessArray -> ID . ArraySize
    (52) ArraySize -> . ArraySize [ AtribOp ]
    (53) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    ?               reduce using rule 79 (Base -> ID .)
    POW             reduce using rule 79 (Base -> ID .)
    MUL             reduce using rule 79 (Base -> ID .)
    DIV             reduce using rule 79 (Base -> ID .)
    ADD             reduce using rule 79 (Base -> ID .)
    SUB             reduce using rule 79 (Base -> ID .)
    AND             reduce using rule 79 (Base -> ID .)
    OR              reduce using rule 79 (Base -> ID .)
    LESSER          reduce using rule 79 (Base -> ID .)
    GREATER         reduce using rule 79 (Base -> ID .)
    LEQ             reduce using rule 79 (Base -> ID .)
    GEQ             reduce using rule 79 (Base -> ID .)
    EQUAL           reduce using rule 79 (Base -> ID .)
    ;               reduce using rule 79 (Base -> ID .)
    RARROW          reduce using rule 79 (Base -> ID .)
    {               reduce using rule 79 (Base -> ID .)
    ID              reduce using rule 79 (Base -> ID .)
    IF              reduce using rule 79 (Base -> ID .)
    WHILE           reduce using rule 79 (Base -> ID .)
    SWITCH          reduce using rule 79 (Base -> ID .)
    NUM             reduce using rule 79 (Base -> ID .)
    ¿               reduce using rule 79 (Base -> ID .)
    NEG             reduce using rule 79 (Base -> ID .)
    )               reduce using rule 79 (Base -> ID .)
    ,               reduce using rule 79 (Base -> ID .)
    ]               reduce using rule 79 (Base -> ID .)
    (               shift and go to state 46
    [               shift and go to state 48

  ! (               [ reduce using rule 79 (Base -> ID .) ]

    ArraySize                      shift and go to state 112

state 80

    (66) OpUno -> SUB Base .
    (67) OpUno -> Base . ?

  ! shift/reduce conflict for ? resolved as shift
    POW             reduce using rule 66 (OpUno -> SUB Base .)
    MUL             reduce using rule 66 (OpUno -> SUB Base .)
    DIV             reduce using rule 66 (OpUno -> SUB Base .)
    ADD             reduce using rule 66 (OpUno -> SUB Base .)
    SUB             reduce using rule 66 (OpUno -> SUB Base .)
    AND             reduce using rule 66 (OpUno -> SUB Base .)
    OR              reduce using rule 66 (OpUno -> SUB Base .)
    LESSER          reduce using rule 66 (OpUno -> SUB Base .)
    GREATER         reduce using rule 66 (OpUno -> SUB Base .)
    LEQ             reduce using rule 66 (OpUno -> SUB Base .)
    GEQ             reduce using rule 66 (OpUno -> SUB Base .)
    EQUAL           reduce using rule 66 (OpUno -> SUB Base .)
    ;               reduce using rule 66 (OpUno -> SUB Base .)
    RARROW          reduce using rule 66 (OpUno -> SUB Base .)
    {               reduce using rule 66 (OpUno -> SUB Base .)
    ID              reduce using rule 66 (OpUno -> SUB Base .)
    IF              reduce using rule 66 (OpUno -> SUB Base .)
    WHILE           reduce using rule 66 (OpUno -> SUB Base .)
    SWITCH          reduce using rule 66 (OpUno -> SUB Base .)
    (               reduce using rule 66 (OpUno -> SUB Base .)
    NUM             reduce using rule 66 (OpUno -> SUB Base .)
    ¿               reduce using rule 66 (OpUno -> SUB Base .)
    NEG             reduce using rule 66 (OpUno -> SUB Base .)
    )               reduce using rule 66 (OpUno -> SUB Base .)
    ,               reduce using rule 66 (OpUno -> SUB Base .)
    ]               reduce using rule 66 (OpUno -> SUB Base .)
    ?               shift and go to state 77

  ! ?               [ reduce using rule 66 (OpUno -> SUB Base .) ]


state 81

    (47) DeclArray -> ID ID DeclArraySize .
    (48) DeclArraySize -> DeclArraySize . [ NUM ]

    ;               reduce using rule 47 (DeclArray -> ID ID DeclArraySize .)
    [               shift and go to state 113


state 82

    (54) DeclAtrib -> ID ID LARROW . AtribOp
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 114
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 83

    (49) DeclArraySize -> [ . NUM ]

    NUM             shift and go to state 115


state 84

    (22) FunExtra -> ID .

    RARROW          reduce using rule 22 (FunExtra -> ID .)
    ,               reduce using rule 22 (FunExtra -> ID .)
    {               reduce using rule 22 (FunExtra -> ID .)
    ID              reduce using rule 22 (FunExtra -> ID .)
    IF              reduce using rule 22 (FunExtra -> ID .)
    WHILE           reduce using rule 22 (FunExtra -> ID .)
    SWITCH          reduce using rule 22 (FunExtra -> ID .)
    (               reduce using rule 22 (FunExtra -> ID .)
    NUM             reduce using rule 22 (FunExtra -> ID .)
    ¿               reduce using rule 22 (FunExtra -> ID .)
    NEG             reduce using rule 22 (FunExtra -> ID .)
    SUB             reduce using rule 22 (FunExtra -> ID .)


state 85

    (15) Function -> ID FunScope FunCases . Body
    (12) Body -> . { }
    (13) Body -> . Block
    (14) Body -> . { Code }
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    {               shift and go to state 98
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Body                           shift and go to state 116
    Block                          shift and go to state 99
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 86

    (17) FunCases -> FunExtra . RARROW ID
    (19) FunCases -> FunExtra .
    (21) FunExtra -> FunExtra . , ID

    RARROW          shift and go to state 117
    {               reduce using rule 19 (FunCases -> FunExtra .)
    ID              reduce using rule 19 (FunCases -> FunExtra .)
    IF              reduce using rule 19 (FunCases -> FunExtra .)
    WHILE           reduce using rule 19 (FunCases -> FunExtra .)
    SWITCH          reduce using rule 19 (FunCases -> FunExtra .)
    (               reduce using rule 19 (FunCases -> FunExtra .)
    NUM             reduce using rule 19 (FunCases -> FunExtra .)
    ¿               reduce using rule 19 (FunCases -> FunExtra .)
    NEG             reduce using rule 19 (FunCases -> FunExtra .)
    SUB             reduce using rule 19 (FunCases -> FunExtra .)
    ,               shift and go to state 118


state 87

    (18) FunCases -> RARROW . ID

    ID              shift and go to state 119


state 88

    (59) Atrib -> ID LARROW AtribOp .
    (56) AtribNum -> ID LARROW AtribOp .
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 59 (Atrib -> ID LARROW AtribOp .)
    RARROW          shift and go to state 97

  ! RARROW          [ reduce using rule 56 (AtribNum -> ID LARROW AtribOp .) ]


state 89

    (61) Atrib -> ID SWAP ID .

    ;               reduce using rule 61 (Atrib -> ID SWAP ID .)


state 90

    (50) AtribArray -> ID ArraySize LARROW . AtribOp
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 120
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 91

    (52) ArraySize -> ArraySize [ . AtribOp ]
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 121
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 92

    (83) FunCall -> ID ( FunArg . )

    )               shift and go to state 122


state 93

    (84) FunArg -> FunRec .
    (86) FunRec -> FunRec . , AtribOp

    )               reduce using rule 84 (FunArg -> FunRec .)
    ,               shift and go to state 123


state 94

    (87) FunRec -> AtribOp .
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 87 (FunRec -> AtribOp .)
    )               reduce using rule 87 (FunRec -> AtribOp .)
    RARROW          shift and go to state 97


state 95

    (53) ArraySize -> [ AtribOp . ]
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 124
    RARROW          shift and go to state 97


state 96

    (24) If -> IfScope AtribOp Body .
    (26) IfElse -> IfScope AtribOp Body . ElseScope Body
    (25) ElseScope -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 24 (If -> IfScope AtribOp Body .)
    IF              reduce using rule 24 (If -> IfScope AtribOp Body .)
    WHILE           reduce using rule 24 (If -> IfScope AtribOp Body .)
    SWITCH          reduce using rule 24 (If -> IfScope AtribOp Body .)
    (               reduce using rule 24 (If -> IfScope AtribOp Body .)
    NUM             reduce using rule 24 (If -> IfScope AtribOp Body .)
    ¿               reduce using rule 24 (If -> IfScope AtribOp Body .)
    NEG             reduce using rule 24 (If -> IfScope AtribOp Body .)
    SUB             reduce using rule 24 (If -> IfScope AtribOp Body .)
    $end            reduce using rule 24 (If -> IfScope AtribOp Body .)
    }               reduce using rule 24 (If -> IfScope AtribOp Body .)
    :               reduce using rule 24 (If -> IfScope AtribOp Body .)
    ELSE            shift and go to state 126

  ! ELSE            [ reduce using rule 24 (If -> IfScope AtribOp Body .) ]

    ElseScope                      shift and go to state 125

state 97

    (57) AtribNum -> AtribOp RARROW . ID
    (51) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 127


state 98

    (12) Body -> { . }
    (14) Body -> { . Code }
    (5) Code -> . Code Block
    (6) Code -> . Block
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    }               shift and go to state 128
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Code                           shift and go to state 129
    Block                          shift and go to state 5
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 99

    (13) Body -> Block .

    ELSE            reduce using rule 13 (Body -> Block .)
    ID              reduce using rule 13 (Body -> Block .)
    IF              reduce using rule 13 (Body -> Block .)
    WHILE           reduce using rule 13 (Body -> Block .)
    SWITCH          reduce using rule 13 (Body -> Block .)
    (               reduce using rule 13 (Body -> Block .)
    NUM             reduce using rule 13 (Body -> Block .)
    ¿               reduce using rule 13 (Body -> Block .)
    NEG             reduce using rule 13 (Body -> Block .)
    SUB             reduce using rule 13 (Body -> Block .)
    $end            reduce using rule 13 (Body -> Block .)
    }               reduce using rule 13 (Body -> Block .)
    :               reduce using rule 13 (Body -> Block .)


state 100

    (56) AtribNum -> ID LARROW . AtribOp
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 130
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 101

    (60) Atrib -> AtribOp RARROW ID .
    (55) DeclAtrib -> AtribOp RARROW ID . ID
    (51) AtribArray -> AtribOp RARROW ID . ArraySize
    (57) AtribNum -> AtribOp RARROW ID .
    (52) ArraySize -> . ArraySize [ AtribOp ]
    (53) ArraySize -> . [ AtribOp ]

    ;               reduce using rule 60 (Atrib -> AtribOp RARROW ID .)
    ID              shift and go to state 131
    RARROW          reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 48

    ArraySize                      shift and go to state 132

state 102

    (28) While -> WhileScope ( AtribOp . ) Body
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 133
    RARROW          shift and go to state 97


state 103

    (78) Base -> ( AtribOp ) .

    ?               reduce using rule 78 (Base -> ( AtribOp ) .)
    POW             reduce using rule 78 (Base -> ( AtribOp ) .)
    MUL             reduce using rule 78 (Base -> ( AtribOp ) .)
    DIV             reduce using rule 78 (Base -> ( AtribOp ) .)
    ADD             reduce using rule 78 (Base -> ( AtribOp ) .)
    SUB             reduce using rule 78 (Base -> ( AtribOp ) .)
    AND             reduce using rule 78 (Base -> ( AtribOp ) .)
    OR              reduce using rule 78 (Base -> ( AtribOp ) .)
    LESSER          reduce using rule 78 (Base -> ( AtribOp ) .)
    GREATER         reduce using rule 78 (Base -> ( AtribOp ) .)
    LEQ             reduce using rule 78 (Base -> ( AtribOp ) .)
    GEQ             reduce using rule 78 (Base -> ( AtribOp ) .)
    EQUAL           reduce using rule 78 (Base -> ( AtribOp ) .)
    ;               reduce using rule 78 (Base -> ( AtribOp ) .)
    RARROW          reduce using rule 78 (Base -> ( AtribOp ) .)
    {               reduce using rule 78 (Base -> ( AtribOp ) .)
    ID              reduce using rule 78 (Base -> ( AtribOp ) .)
    IF              reduce using rule 78 (Base -> ( AtribOp ) .)
    WHILE           reduce using rule 78 (Base -> ( AtribOp ) .)
    SWITCH          reduce using rule 78 (Base -> ( AtribOp ) .)
    (               reduce using rule 78 (Base -> ( AtribOp ) .)
    NUM             reduce using rule 78 (Base -> ( AtribOp ) .)
    ¿               reduce using rule 78 (Base -> ( AtribOp ) .)
    NEG             reduce using rule 78 (Base -> ( AtribOp ) .)
    )               reduce using rule 78 (Base -> ( AtribOp ) .)
    ,               reduce using rule 78 (Base -> ( AtribOp ) .)
    ]               reduce using rule 78 (Base -> ( AtribOp ) .)


state 104

    (30) Switch -> SwitchScope Conds { . Cases }
    (35) Cases -> . Cases Case
    (36) Cases -> . Case
    (37) Case -> . ID : Body
    (38) Case -> . : Body

    ID              shift and go to state 136
    :               shift and go to state 137

    Cases                          shift and go to state 134
    Case                           shift and go to state 135

state 105

    (31) Conds -> Conds , . Cond
    (33) Cond -> . ID ( AtribOp )
    (34) Cond -> . ( AtribOp )

    ID              shift and go to state 59
    (               shift and go to state 60

    Cond                           shift and go to state 138

state 106

    (33) Cond -> ID ( . AtribOp )
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 139
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 107

    (34) Cond -> ( AtribOp . )
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 140
    RARROW          shift and go to state 97


state 108

    (69) OpBin -> OpBin OpLogico TermPlus .
    (71) TermPlus -> TermPlus . OpPlus TermMult
    (95) OpPlus -> . ADD
    (96) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    OR              reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    LESSER          reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    GREATER         reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    LEQ             reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    GEQ             reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    EQUAL           reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    ;               reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    RARROW          reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    {               reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    ID              reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    IF              reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    WHILE           reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCH          reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    (               reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    NUM             reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    ¿               reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    NEG             reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    )               reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    ,               reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    ]               reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .)
    ADD             shift and go to state 70
    SUB             shift and go to state 71

  ! SUB             [ reduce using rule 69 (OpBin -> OpBin OpLogico TermPlus .) ]

    OpPlus                         shift and go to state 69

state 109

    (71) TermPlus -> TermPlus OpPlus TermMult .
    (73) TermMult -> TermMult . OpMult TermPow
    (97) OpMult -> . MUL
    (98) OpMult -> . DIV

    ADD             reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    SUB             reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    AND             reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    OR              reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    LESSER          reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    GREATER         reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    LEQ             reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    GEQ             reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    EQUAL           reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    ;               reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    RARROW          reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    {               reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    ID              reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    IF              reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    WHILE           reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCH          reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    (               reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    NUM             reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    ¿               reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    NEG             reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    )               reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    ,               reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    ]               reduce using rule 71 (TermPlus -> TermPlus OpPlus TermMult .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

    OpMult                         shift and go to state 72

state 110

    (73) TermMult -> TermMult OpMult TermPow .
    (75) TermPow -> TermPow . OpPow Base
    (99) OpPow -> . POW

    MUL             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    DIV             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    ADD             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    SUB             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    AND             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    OR              reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    LESSER          reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    GREATER         reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    LEQ             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    GEQ             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    EQUAL           reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    ;               reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    RARROW          reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    {               reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    ID              reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    IF              reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    WHILE           reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    SWITCH          reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    (               reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    NUM             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    ¿               reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    NEG             reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    )               reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    ,               reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    ]               reduce using rule 73 (TermMult -> TermMult OpMult TermPow .)
    POW             shift and go to state 76

    OpPow                          shift and go to state 75

state 111

    (75) TermPow -> TermPow OpPow Base .
    (67) OpUno -> Base . ?

    POW             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    MUL             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    DIV             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    ADD             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    SUB             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    AND             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    OR              reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    LESSER          reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    GREATER         reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    LEQ             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    GEQ             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    EQUAL           reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    ;               reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    RARROW          reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    {               reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    ID              reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    IF              reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    WHILE           reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    SWITCH          reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    (               reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    NUM             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    ¿               reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    NEG             reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    )               reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    ,               reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    ]               reduce using rule 75 (TermPow -> TermPow OpPow Base .)
    ?               shift and go to state 77


state 112

    (68) AccessArray -> ID ArraySize .
    (52) ArraySize -> ArraySize . [ AtribOp ]

    ?               reduce using rule 68 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 68 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 68 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 68 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 68 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 68 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 68 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 68 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 68 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 68 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 68 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 68 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 68 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 68 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 68 (AccessArray -> ID ArraySize .)
    {               reduce using rule 68 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 68 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 68 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 68 (AccessArray -> ID ArraySize .)
    SWITCH          reduce using rule 68 (AccessArray -> ID ArraySize .)
    (               reduce using rule 68 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 68 (AccessArray -> ID ArraySize .)
    ¿               reduce using rule 68 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 68 (AccessArray -> ID ArraySize .)
    )               reduce using rule 68 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 68 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 68 (AccessArray -> ID ArraySize .)
    [               shift and go to state 91


state 113

    (48) DeclArraySize -> DeclArraySize [ . NUM ]

    NUM             shift and go to state 141


state 114

    (54) DeclAtrib -> ID ID LARROW AtribOp .
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    ;               reduce using rule 54 (DeclAtrib -> ID ID LARROW AtribOp .)
    RARROW          shift and go to state 97


state 115

    (49) DeclArraySize -> [ NUM . ]

    ]               shift and go to state 142


state 116

    (15) Function -> ID FunScope FunCases Body .

    ID              reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    IF              reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    WHILE           reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    SWITCH          reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    (               reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    NUM             reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    ¿               reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    NEG             reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    SUB             reduce using rule 15 (Function -> ID FunScope FunCases Body .)
    $end            reduce using rule 15 (Function -> ID FunScope FunCases Body .)


state 117

    (17) FunCases -> FunExtra RARROW . ID

    ID              shift and go to state 143


state 118

    (21) FunExtra -> FunExtra , . ID

    ID              shift and go to state 144


state 119

    (18) FunCases -> RARROW ID .

    {               reduce using rule 18 (FunCases -> RARROW ID .)
    ID              reduce using rule 18 (FunCases -> RARROW ID .)
    IF              reduce using rule 18 (FunCases -> RARROW ID .)
    WHILE           reduce using rule 18 (FunCases -> RARROW ID .)
    SWITCH          reduce using rule 18 (FunCases -> RARROW ID .)
    (               reduce using rule 18 (FunCases -> RARROW ID .)
    NUM             reduce using rule 18 (FunCases -> RARROW ID .)
    ¿               reduce using rule 18 (FunCases -> RARROW ID .)
    NEG             reduce using rule 18 (FunCases -> RARROW ID .)
    SUB             reduce using rule 18 (FunCases -> RARROW ID .)


state 120

    (50) AtribArray -> ID ArraySize LARROW AtribOp .
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    {               reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ID              reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    IF              reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    WHILE           reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCH          reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    (               reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NUM             reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ¿               reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NEG             reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SUB             reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    )               reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ,               reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ]               reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .)
    RARROW          shift and go to state 97

  ! RARROW          [ reduce using rule 50 (AtribArray -> ID ArraySize LARROW AtribOp .) ]


state 121

    (52) ArraySize -> ArraySize [ AtribOp . ]
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 145
    RARROW          shift and go to state 97


state 122

    (83) FunCall -> ID ( FunArg ) .

    ?               reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    POW             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    MUL             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    DIV             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    ADD             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    SUB             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    AND             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    OR              reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    LESSER          reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    GREATER         reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    LEQ             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    GEQ             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    EQUAL           reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    ;               reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    RARROW          reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    {               reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    ID              reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    IF              reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    WHILE           reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    SWITCH          reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    (               reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    NUM             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    ¿               reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    NEG             reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    )               reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    ,               reduce using rule 83 (FunCall -> ID ( FunArg ) .)
    ]               reduce using rule 83 (FunCall -> ID ( FunArg ) .)


state 123

    (86) FunRec -> FunRec , . AtribOp
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (63) Op -> . OpBin
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 146
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 124

    (53) ArraySize -> [ AtribOp ] .

    LARROW          reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    [               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    ?               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    POW             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    MUL             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    DIV             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    ADD             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    SUB             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    AND             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    OR              reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    LESSER          reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    GREATER         reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    LEQ             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    GEQ             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    EQUAL           reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    ;               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    RARROW          reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    {               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    ID              reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    IF              reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    WHILE           reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    SWITCH          reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    (               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    NUM             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    ¿               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    NEG             reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    )               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    ,               reduce using rule 53 (ArraySize -> [ AtribOp ] .)
    ]               reduce using rule 53 (ArraySize -> [ AtribOp ] .)


state 125

    (26) IfElse -> IfScope AtribOp Body ElseScope . Body
    (12) Body -> . { }
    (13) Body -> . Block
    (14) Body -> . { Code }
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    {               shift and go to state 98
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    Body                           shift and go to state 147
    Block                          shift and go to state 99
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 126

    (25) ElseScope -> ELSE .

    {               reduce using rule 25 (ElseScope -> ELSE .)
    ID              reduce using rule 25 (ElseScope -> ELSE .)
    IF              reduce using rule 25 (ElseScope -> ELSE .)
    WHILE           reduce using rule 25 (ElseScope -> ELSE .)
    SWITCH          reduce using rule 25 (ElseScope -> ELSE .)
    (               reduce using rule 25 (ElseScope -> ELSE .)
    NUM             reduce using rule 25 (ElseScope -> ELSE .)
    ¿               reduce using rule 25 (ElseScope -> ELSE .)
    NEG             reduce using rule 25 (ElseScope -> ELSE .)
    SUB             reduce using rule 25 (ElseScope -> ELSE .)


state 127

    (57) AtribNum -> AtribOp RARROW ID .
    (51) AtribArray -> AtribOp RARROW ID . ArraySize
    (52) ArraySize -> . ArraySize [ AtribOp ]
    (53) ArraySize -> . [ AtribOp ]

    RARROW          reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    {               reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    ID              reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    IF              reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    WHILE           reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    SWITCH          reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    (               reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    NUM             reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    ¿               reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    NEG             reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    SUB             reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    )               reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    ;               reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    ,               reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    ]               reduce using rule 57 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 48

    ArraySize                      shift and go to state 132

state 128

    (12) Body -> { } .

    ELSE            reduce using rule 12 (Body -> { } .)
    ID              reduce using rule 12 (Body -> { } .)
    IF              reduce using rule 12 (Body -> { } .)
    WHILE           reduce using rule 12 (Body -> { } .)
    SWITCH          reduce using rule 12 (Body -> { } .)
    (               reduce using rule 12 (Body -> { } .)
    NUM             reduce using rule 12 (Body -> { } .)
    ¿               reduce using rule 12 (Body -> { } .)
    NEG             reduce using rule 12 (Body -> { } .)
    SUB             reduce using rule 12 (Body -> { } .)
    $end            reduce using rule 12 (Body -> { } .)
    }               reduce using rule 12 (Body -> { } .)
    :               reduce using rule 12 (Body -> { } .)


state 129

    (14) Body -> { Code . }
    (5) Code -> Code . Block
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    }               shift and go to state 148
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Block                          shift and go to state 39
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 130

    (56) AtribNum -> ID LARROW AtribOp .
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    {               reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    ID              reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    IF              reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    WHILE           reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    SWITCH          reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    (               reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    NUM             reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    ¿               reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    NEG             reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    SUB             reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    )               reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    ;               reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    ,               reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    ]               reduce using rule 56 (AtribNum -> ID LARROW AtribOp .)
    RARROW          shift and go to state 97

  ! RARROW          [ reduce using rule 56 (AtribNum -> ID LARROW AtribOp .) ]


state 131

    (55) DeclAtrib -> AtribOp RARROW ID ID .

    ;               reduce using rule 55 (DeclAtrib -> AtribOp RARROW ID ID .)


state 132

    (51) AtribArray -> AtribOp RARROW ID ArraySize .
    (52) ArraySize -> ArraySize . [ AtribOp ]

    ;               reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    RARROW          reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    {               reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ID              reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    IF              reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    WHILE           reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCH          reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    (               reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NUM             reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ¿               reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NEG             reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SUB             reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    )               reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ,               reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ]               reduce using rule 51 (AtribArray -> AtribOp RARROW ID ArraySize .)
    [               shift and go to state 91


state 133

    (28) While -> WhileScope ( AtribOp ) . Body
    (12) Body -> . { }
    (13) Body -> . Block
    (14) Body -> . { Code }
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    {               shift and go to state 98
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    WhileScope                     shift and go to state 19
    AtribOp                        shift and go to state 18
    Body                           shift and go to state 149
    Block                          shift and go to state 99
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 134

    (30) Switch -> SwitchScope Conds { Cases . }
    (35) Cases -> Cases . Case
    (37) Case -> . ID : Body
    (38) Case -> . : Body

    }               shift and go to state 150
    ID              shift and go to state 136
    :               shift and go to state 137

    Case                           shift and go to state 151

state 135

    (36) Cases -> Case .

    }               reduce using rule 36 (Cases -> Case .)
    ID              reduce using rule 36 (Cases -> Case .)
    :               reduce using rule 36 (Cases -> Case .)


state 136

    (37) Case -> ID . : Body

    :               shift and go to state 152


state 137

    (38) Case -> : . Body
    (12) Body -> . { }
    (13) Body -> . Block
    (14) Body -> . { Code }
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    {               shift and go to state 98
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Body                           shift and go to state 153
    Block                          shift and go to state 99
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 138

    (31) Conds -> Conds , Cond .

    {               reduce using rule 31 (Conds -> Conds , Cond .)
    ,               reduce using rule 31 (Conds -> Conds , Cond .)


state 139

    (33) Cond -> ID ( AtribOp . )
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 154
    RARROW          shift and go to state 97


state 140

    (34) Cond -> ( AtribOp ) .

    {               reduce using rule 34 (Cond -> ( AtribOp ) .)
    ,               reduce using rule 34 (Cond -> ( AtribOp ) .)


state 141

    (48) DeclArraySize -> DeclArraySize [ NUM . ]

    ]               shift and go to state 155


state 142

    (49) DeclArraySize -> [ NUM ] .

    [               reduce using rule 49 (DeclArraySize -> [ NUM ] .)
    ;               reduce using rule 49 (DeclArraySize -> [ NUM ] .)


state 143

    (17) FunCases -> FunExtra RARROW ID .

    {               reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    ID              reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    IF              reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    WHILE           reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    SWITCH          reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    (               reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    NUM             reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    ¿               reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    NEG             reduce using rule 17 (FunCases -> FunExtra RARROW ID .)
    SUB             reduce using rule 17 (FunCases -> FunExtra RARROW ID .)


state 144

    (21) FunExtra -> FunExtra , ID .

    RARROW          reduce using rule 21 (FunExtra -> FunExtra , ID .)
    ,               reduce using rule 21 (FunExtra -> FunExtra , ID .)
    {               reduce using rule 21 (FunExtra -> FunExtra , ID .)
    ID              reduce using rule 21 (FunExtra -> FunExtra , ID .)
    IF              reduce using rule 21 (FunExtra -> FunExtra , ID .)
    WHILE           reduce using rule 21 (FunExtra -> FunExtra , ID .)
    SWITCH          reduce using rule 21 (FunExtra -> FunExtra , ID .)
    (               reduce using rule 21 (FunExtra -> FunExtra , ID .)
    NUM             reduce using rule 21 (FunExtra -> FunExtra , ID .)
    ¿               reduce using rule 21 (FunExtra -> FunExtra , ID .)
    NEG             reduce using rule 21 (FunExtra -> FunExtra , ID .)
    SUB             reduce using rule 21 (FunExtra -> FunExtra , ID .)


state 145

    (52) ArraySize -> ArraySize [ AtribOp ] .

    LARROW          reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    [               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    ?               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    POW             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    MUL             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    DIV             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    ADD             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    SUB             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    AND             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    OR              reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    LESSER          reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    GREATER         reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    LEQ             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    GEQ             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    EQUAL           reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    ;               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    RARROW          reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    {               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    ID              reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    IF              reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    WHILE           reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCH          reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    (               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    NUM             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    ¿               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    NEG             reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    )               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    ,               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)
    ]               reduce using rule 52 (ArraySize -> ArraySize [ AtribOp ] .)


state 146

    (86) FunRec -> FunRec , AtribOp .
    (57) AtribNum -> AtribOp . RARROW ID
    (51) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 86 (FunRec -> FunRec , AtribOp .)
    )               reduce using rule 86 (FunRec -> FunRec , AtribOp .)
    RARROW          shift and go to state 97


state 147

    (26) IfElse -> IfScope AtribOp Body ElseScope Body .

    ID              reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    IF              reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    WHILE           reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCH          reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    (               reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NUM             reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ¿               reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NEG             reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SUB             reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    $end            reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ELSE            reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    }               reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    :               reduce using rule 26 (IfElse -> IfScope AtribOp Body ElseScope Body .)


state 148

    (14) Body -> { Code } .

    ELSE            reduce using rule 14 (Body -> { Code } .)
    ID              reduce using rule 14 (Body -> { Code } .)
    IF              reduce using rule 14 (Body -> { Code } .)
    WHILE           reduce using rule 14 (Body -> { Code } .)
    SWITCH          reduce using rule 14 (Body -> { Code } .)
    (               reduce using rule 14 (Body -> { Code } .)
    NUM             reduce using rule 14 (Body -> { Code } .)
    ¿               reduce using rule 14 (Body -> { Code } .)
    NEG             reduce using rule 14 (Body -> { Code } .)
    SUB             reduce using rule 14 (Body -> { Code } .)
    $end            reduce using rule 14 (Body -> { Code } .)
    }               reduce using rule 14 (Body -> { Code } .)
    :               reduce using rule 14 (Body -> { Code } .)


state 149

    (28) While -> WhileScope ( AtribOp ) Body .

    ID              reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    IF              reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    WHILE           reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    SWITCH          reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    (               reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    NUM             reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    ¿               reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    NEG             reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    SUB             reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    $end            reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    ELSE            reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    }               reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)
    :               reduce using rule 28 (While -> WhileScope ( AtribOp ) Body .)


state 150

    (30) Switch -> SwitchScope Conds { Cases } .

    ID              reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    IF              reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    WHILE           reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    SWITCH          reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    (               reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    NUM             reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    ¿               reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    NEG             reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    SUB             reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    $end            reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    ELSE            reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    }               reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)
    :               reduce using rule 30 (Switch -> SwitchScope Conds { Cases } .)


state 151

    (35) Cases -> Cases Case .

    }               reduce using rule 35 (Cases -> Cases Case .)
    ID              reduce using rule 35 (Cases -> Cases Case .)
    :               reduce using rule 35 (Cases -> Cases Case .)


state 152

    (37) Case -> ID : . Body
    (12) Body -> . { }
    (13) Body -> . Block
    (14) Body -> . { Code }
    (7) Block -> . Exp ;
    (8) Block -> . If
    (9) Block -> . IfElse
    (10) Block -> . While
    (11) Block -> . Switch
    (39) Exp -> . Atrib
    (40) Exp -> . Op
    (41) Exp -> . Decl
    (42) Exp -> . DeclArray
    (43) Exp -> . DeclAtrib
    (24) If -> . IfScope AtribOp Body
    (26) IfElse -> . IfScope AtribOp Body ElseScope Body
    (28) While -> . WhileScope ( AtribOp ) Body
    (30) Switch -> . SwitchScope Conds { Cases }
    (59) Atrib -> . ID LARROW AtribOp
    (60) Atrib -> . AtribOp RARROW ID
    (61) Atrib -> . ID SWAP ID
    (62) Atrib -> . AtribArray
    (63) Op -> . OpBin
    (46) Decl -> . ID ID
    (47) DeclArray -> . ID ID DeclArraySize
    (54) DeclAtrib -> . ID ID LARROW AtribOp
    (55) DeclAtrib -> . AtribOp RARROW ID ID
    (23) IfScope -> . IF
    (27) WhileScope -> . WHILE
    (29) SwitchScope -> . SWITCH
    (44) AtribOp -> . AtribNum
    (45) AtribOp -> . Op
    (50) AtribArray -> . ID ArraySize LARROW AtribOp
    (51) AtribArray -> . AtribOp RARROW ID ArraySize
    (69) OpBin -> . OpBin OpLogico TermPlus
    (70) OpBin -> . TermPlus
    (56) AtribNum -> . ID LARROW AtribOp
    (57) AtribNum -> . AtribOp RARROW ID
    (58) AtribNum -> . AtribArray
    (71) TermPlus -> . TermPlus OpPlus TermMult
    (72) TermPlus -> . TermMult
    (73) TermMult -> . TermMult OpMult TermPow
    (74) TermMult -> . TermPow
    (75) TermPow -> . TermPow OpPow Base
    (76) TermPow -> . Base
    (77) Base -> . OpUno
    (78) Base -> . ( AtribOp )
    (79) Base -> . ID
    (80) Base -> . NUM
    (81) Base -> . FunCall
    (82) Base -> . ¿
    (64) OpUno -> . NEG Base
    (65) OpUno -> . AccessArray
    (66) OpUno -> . SUB Base
    (67) OpUno -> . Base ?
    (83) FunCall -> . ID ( FunArg )
    (68) AccessArray -> . ID ArraySize

    {               shift and go to state 98
    ID              shift and go to state 40
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 20
    NUM             shift and go to state 33
    ¿               shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Body                           shift and go to state 156
    Block                          shift and go to state 99
    Exp                            shift and go to state 7
    If                             shift and go to state 8
    IfElse                         shift and go to state 9
    While                          shift and go to state 10
    Switch                         shift and go to state 11
    Atrib                          shift and go to state 12
    Op                             shift and go to state 13
    Decl                           shift and go to state 14
    DeclArray                      shift and go to state 15
    DeclAtrib                      shift and go to state 16
    IfScope                        shift and go to state 17
    AtribOp                        shift and go to state 18
    WhileScope                     shift and go to state 19
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 34
    AccessArray                    shift and go to state 37

state 153

    (38) Case -> : Body .

    }               reduce using rule 38 (Case -> : Body .)
    ID              reduce using rule 38 (Case -> : Body .)
    :               reduce using rule 38 (Case -> : Body .)


state 154

    (33) Cond -> ID ( AtribOp ) .

    {               reduce using rule 33 (Cond -> ID ( AtribOp ) .)
    ,               reduce using rule 33 (Cond -> ID ( AtribOp ) .)


state 155

    (48) DeclArraySize -> DeclArraySize [ NUM ] .

    [               reduce using rule 48 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ;               reduce using rule 48 (DeclArraySize -> DeclArraySize [ NUM ] .)


state 156

    (37) Case -> ID : Body .

    }               reduce using rule 37 (Case -> ID : Body .)
    ID              reduce using rule 37 (Case -> ID : Body .)
    :               reduce using rule 37 (Case -> ID : Body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for ( in state 3 resolved as shift
WARNING: shift/reduce conflict for NUM in state 3 resolved as shift
WARNING: shift/reduce conflict for ¿ in state 3 resolved as shift
WARNING: shift/reduce conflict for NEG in state 3 resolved as shift
WARNING: shift/reduce conflict for SUB in state 3 resolved as shift
WARNING: shift/reduce conflict for SUB in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for ( in state 52 resolved as shift
WARNING: shift/reduce conflict for ? in state 78 resolved as shift
WARNING: shift/reduce conflict for ( in state 79 resolved as shift
WARNING: shift/reduce conflict for ? in state 80 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 88 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 96 resolved as shift
WARNING: shift/reduce conflict for SUB in state 108 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 120 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 130 resolved as shift

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Axiom
Rule 1     Axiom -> Start
Rule 2     Axiom -> <empty>
Rule 3     Start -> Start Block
Rule 4     Start -> Start Function
Rule 5     Start -> <empty>
Rule 6     Code -> Code Block
Rule 7     Code -> Block
Rule 8     Block -> FunCall ;
Rule 9     Block -> Exp ;
Rule 10    Block -> If
Rule 11    Block -> IfElse
Rule 12    Block -> While
Rule 13    Block -> Switch
Rule 14    Body -> { }
Rule 15    Body -> Block
Rule 16    Body -> { Code }
Rule 17    FunctionHeader -> ID FunScope FunCases
Rule 18    Function -> FunctionHeader Body
Rule 19    FunScope -> :
Rule 20    FunCases -> FunExtra RARROW ID
Rule 21    FunCases -> RARROW ID
Rule 22    FunCases -> FunExtra
Rule 23    FunCases -> <empty>
Rule 24    FunExtra -> FunExtra , ID
Rule 25    FunExtra -> ID
Rule 26    IfScope -> IF
Rule 27    If -> IfScope AtribOp Body
Rule 28    ElseScope -> ELSE
Rule 29    IfElse -> IfScope AtribOp Body ElseScope Body
Rule 30    WhileScope -> WHILE
Rule 31    While -> WhileScope ( AtribOp ) Body
Rule 32    SwitchScope -> SWITCHCOND
Rule 33    SwitchScope -> SWITCHCASE
Rule 34    Switch -> SwitchScope Conds { Cases }
Rule 35    Conds -> Conds , Cond
Rule 36    Conds -> Cond
Rule 37    Cond -> ID ( AtribOp )
Rule 38    Cond -> ( AtribOp )
Rule 39    Cases -> Cases Case
Rule 40    Cases -> Case
Rule 41    Case -> ID : Body
Rule 42    Case -> : Body
Rule 43    Exp -> STRING PRINT
Rule 44    Exp -> Atrib
Rule 45    Exp -> Op
Rule 46    Exp -> Decl
Rule 47    Exp -> DeclArray
Rule 48    Exp -> DeclAtrib
Rule 49    AtribOp -> AtribNum
Rule 50    AtribOp -> Op
Rule 51    Decl -> ID ID
Rule 52    DeclArray -> ID ID DeclArraySize
Rule 53    DeclArraySize -> DeclArraySize [ NUM ]
Rule 54    DeclArraySize -> [ NUM ]
Rule 55    AtribArray -> ID ArraySize LARROW AtribOp
Rule 56    AtribArray -> AtribOp RARROW ID ArraySize
Rule 57    AccessArray -> ID ArraySize
Rule 58    ArraySize -> ArraySize [ AtribOp ]
Rule 59    ArraySize -> [ AtribOp ]
Rule 60    DeclAtrib -> ID ID LARROW AtribOp
Rule 61    DeclAtrib -> AtribOp RARROW ID ID
Rule 62    AtribNum -> ID LARROW AtribOp
Rule 63    AtribNum -> AtribOp RARROW ID
Rule 64    AtribNum -> AtribArray
Rule 65    Atrib -> ID LARROW AtribOp
Rule 66    Atrib -> AtribOp RARROW ID
Rule 67    Atrib -> ID SWAP ID
Rule 68    Atrib -> AtribArray
Rule 69    Op -> OpBin
Rule 70    OpUno -> NEG Base
Rule 71    OpUno -> AccessArray
Rule 72    OpUno -> SUB Base
Rule 73    OpUno -> Base PRINT
Rule 74    OpBin -> OpBin OpLogico TermMod
Rule 75    OpBin -> TermMod
Rule 76    TermMod -> TermMod OpMod TermPlus
Rule 77    TermMod -> TermPlus
Rule 78    TermPlus -> TermPlus OpPlus TermMult
Rule 79    TermPlus -> TermMult
Rule 80    TermMult -> TermMult OpMult TermPow
Rule 81    TermMult -> TermPow
Rule 82    TermPow -> TermPow OpPow Base
Rule 83    TermPow -> Base
Rule 84    Base -> OpUno
Rule 85    Base -> ( AtribOp )
Rule 86    Base -> ID
Rule 87    Base -> NUM
Rule 88    Base -> FunCall
Rule 89    Base -> READ
Rule 90    FunCall -> ID ( FunArg )
Rule 91    FunArg -> FunRec
Rule 92    FunArg -> <empty>
Rule 93    FunRec -> FunRec , AtribOp
Rule 94    FunRec -> AtribOp
Rule 95    OpLogico -> DIFF
Rule 96    OpLogico -> AND
Rule 97    OpLogico -> OR
Rule 98    OpLogico -> LESSER
Rule 99    OpLogico -> GREATER
Rule 100   OpLogico -> LEQ
Rule 101   OpLogico -> GEQ
Rule 102   OpLogico -> EQUAL
Rule 103   OpMod -> MOD
Rule 104   OpPlus -> ADD
Rule 105   OpPlus -> SUB
Rule 106   OpMult -> MUL
Rule 107   OpMult -> DIV
Rule 108   OpPow -> POW

Terminals, with rules where they appear

(                    : 31 37 38 85 90
)                    : 31 37 38 85 90
,                    : 24 35 93
:                    : 19 41 42
;                    : 8 9
ADD                  : 104
AND                  : 96
DIFF                 : 95
DIV                  : 107
ELSE                 : 28
EQUAL                : 102
GEQ                  : 101
GREATER              : 99
ID                   : 17 20 21 24 25 37 41 51 51 52 52 55 56 57 60 60 61 61 62 63 65 66 67 67 86 90
IF                   : 26
LARROW               : 55 60 62 65
LEQ                  : 100
LESSER               : 98
MOD                  : 103
MUL                  : 106
NEG                  : 70
NUM                  : 53 54 87
OR                   : 97
POW                  : 108
PRINT                : 43 73
RARROW               : 20 21 56 61 63 66
READ                 : 89
STRING               : 43
SUB                  : 72 105
SWAP                 : 67
SWITCHCASE           : 33
SWITCHCOND           : 32
WHILE                : 30
[                    : 53 54 58 59
]                    : 53 54 58 59
error                : 
{                    : 14 16 34
}                    : 14 16 34

Nonterminals, with rules where they appear

AccessArray          : 71
ArraySize            : 55 56 57 58
Atrib                : 44
AtribArray           : 64 68
AtribNum             : 49
AtribOp              : 27 29 31 37 38 55 56 58 59 60 61 62 63 65 66 85 93 94
Axiom                : 0
Base                 : 70 72 73 82 83
Block                : 3 6 7 15
Body                 : 18 27 29 29 31 41 42
Case                 : 39 40
Cases                : 34 39
Code                 : 6 16
Cond                 : 35 36
Conds                : 34 35
Decl                 : 46
DeclArray            : 47
DeclArraySize        : 52 53
DeclAtrib            : 48
ElseScope            : 29
Exp                  : 9
FunArg               : 90
FunCall              : 8 88
FunCases             : 17
FunExtra             : 20 22 24
FunRec               : 91 93
FunScope             : 17
Function             : 4
FunctionHeader       : 18
If                   : 10
IfElse               : 11
IfScope              : 27 29
Op                   : 45 50
OpBin                : 69 74
OpLogico             : 74
OpMod                : 76
OpMult               : 80
OpPlus               : 78
OpPow                : 82
OpUno                : 84
Start                : 1 3 4
Switch               : 13
SwitchScope          : 34
TermMod              : 74 75 76
TermMult             : 78 79 80
TermPlus             : 76 77 78
TermPow              : 80 81 82
While                : 12
WhileScope           : 31

Parsing method: LALR

state 0

    (0) S' -> . Axiom
    (1) Axiom -> . Start
    (2) Axiom -> .
    (3) Start -> . Start Block
    (4) Start -> . Start Function
    (5) Start -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (Axiom -> .)
    $end            reduce using rule 2 (Axiom -> .)
    ID              reduce using rule 5 (Start -> .)
    STRING          reduce using rule 5 (Start -> .)
    IF              reduce using rule 5 (Start -> .)
    WHILE           reduce using rule 5 (Start -> .)
    SWITCHCOND      reduce using rule 5 (Start -> .)
    SWITCHCASE      reduce using rule 5 (Start -> .)
    (               reduce using rule 5 (Start -> .)
    NUM             reduce using rule 5 (Start -> .)
    READ            reduce using rule 5 (Start -> .)
    NEG             reduce using rule 5 (Start -> .)
    SUB             reduce using rule 5 (Start -> .)

  ! $end            [ reduce using rule 5 (Start -> .) ]

    Axiom                          shift and go to state 1
    Start                          shift and go to state 2

state 1

    (0) S' -> Axiom .



state 2

    (1) Axiom -> Start .
    (3) Start -> Start . Block
    (4) Start -> Start . Function
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (18) Function -> . FunctionHeader Body
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (17) FunctionHeader -> . ID FunScope FunCases
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    $end            reduce using rule 1 (Axiom -> Start .)
    ID              shift and go to state 12
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Block                          shift and go to state 3
    Function                       shift and go to state 4
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    FunctionHeader                 shift and go to state 11
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 3

    (3) Start -> Start Block .

    ID              reduce using rule 3 (Start -> Start Block .)
    STRING          reduce using rule 3 (Start -> Start Block .)
    IF              reduce using rule 3 (Start -> Start Block .)
    WHILE           reduce using rule 3 (Start -> Start Block .)
    SWITCHCOND      reduce using rule 3 (Start -> Start Block .)
    SWITCHCASE      reduce using rule 3 (Start -> Start Block .)
    (               reduce using rule 3 (Start -> Start Block .)
    NUM             reduce using rule 3 (Start -> Start Block .)
    READ            reduce using rule 3 (Start -> Start Block .)
    NEG             reduce using rule 3 (Start -> Start Block .)
    SUB             reduce using rule 3 (Start -> Start Block .)
    $end            reduce using rule 3 (Start -> Start Block .)


state 4

    (4) Start -> Start Function .

    ID              reduce using rule 4 (Start -> Start Function .)
    STRING          reduce using rule 4 (Start -> Start Function .)
    IF              reduce using rule 4 (Start -> Start Function .)
    WHILE           reduce using rule 4 (Start -> Start Function .)
    SWITCHCOND      reduce using rule 4 (Start -> Start Function .)
    SWITCHCASE      reduce using rule 4 (Start -> Start Function .)
    (               reduce using rule 4 (Start -> Start Function .)
    NUM             reduce using rule 4 (Start -> Start Function .)
    READ            reduce using rule 4 (Start -> Start Function .)
    NEG             reduce using rule 4 (Start -> Start Function .)
    SUB             reduce using rule 4 (Start -> Start Function .)
    $end            reduce using rule 4 (Start -> Start Function .)


state 5

    (8) Block -> FunCall . ;
    (88) Base -> FunCall .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 42
    PRINT           reduce using rule 88 (Base -> FunCall .)
    POW             reduce using rule 88 (Base -> FunCall .)
    MUL             reduce using rule 88 (Base -> FunCall .)
    DIV             reduce using rule 88 (Base -> FunCall .)
    ADD             reduce using rule 88 (Base -> FunCall .)
    SUB             reduce using rule 88 (Base -> FunCall .)
    MOD             reduce using rule 88 (Base -> FunCall .)
    DIFF            reduce using rule 88 (Base -> FunCall .)
    AND             reduce using rule 88 (Base -> FunCall .)
    OR              reduce using rule 88 (Base -> FunCall .)
    LESSER          reduce using rule 88 (Base -> FunCall .)
    GREATER         reduce using rule 88 (Base -> FunCall .)
    LEQ             reduce using rule 88 (Base -> FunCall .)
    GEQ             reduce using rule 88 (Base -> FunCall .)
    EQUAL           reduce using rule 88 (Base -> FunCall .)
    RARROW          reduce using rule 88 (Base -> FunCall .)

  ! ;               [ reduce using rule 88 (Base -> FunCall .) ]


state 6

    (9) Block -> Exp . ;

    ;               shift and go to state 43


state 7

    (10) Block -> If .

    ID              reduce using rule 10 (Block -> If .)
    STRING          reduce using rule 10 (Block -> If .)
    IF              reduce using rule 10 (Block -> If .)
    WHILE           reduce using rule 10 (Block -> If .)
    SWITCHCOND      reduce using rule 10 (Block -> If .)
    SWITCHCASE      reduce using rule 10 (Block -> If .)
    (               reduce using rule 10 (Block -> If .)
    NUM             reduce using rule 10 (Block -> If .)
    READ            reduce using rule 10 (Block -> If .)
    NEG             reduce using rule 10 (Block -> If .)
    SUB             reduce using rule 10 (Block -> If .)
    $end            reduce using rule 10 (Block -> If .)
    }               reduce using rule 10 (Block -> If .)
    ELSE            reduce using rule 10 (Block -> If .)
    :               reduce using rule 10 (Block -> If .)


state 8

    (11) Block -> IfElse .

    ID              reduce using rule 11 (Block -> IfElse .)
    STRING          reduce using rule 11 (Block -> IfElse .)
    IF              reduce using rule 11 (Block -> IfElse .)
    WHILE           reduce using rule 11 (Block -> IfElse .)
    SWITCHCOND      reduce using rule 11 (Block -> IfElse .)
    SWITCHCASE      reduce using rule 11 (Block -> IfElse .)
    (               reduce using rule 11 (Block -> IfElse .)
    NUM             reduce using rule 11 (Block -> IfElse .)
    READ            reduce using rule 11 (Block -> IfElse .)
    NEG             reduce using rule 11 (Block -> IfElse .)
    SUB             reduce using rule 11 (Block -> IfElse .)
    $end            reduce using rule 11 (Block -> IfElse .)
    }               reduce using rule 11 (Block -> IfElse .)
    ELSE            reduce using rule 11 (Block -> IfElse .)
    :               reduce using rule 11 (Block -> IfElse .)


state 9

    (12) Block -> While .

    ID              reduce using rule 12 (Block -> While .)
    STRING          reduce using rule 12 (Block -> While .)
    IF              reduce using rule 12 (Block -> While .)
    WHILE           reduce using rule 12 (Block -> While .)
    SWITCHCOND      reduce using rule 12 (Block -> While .)
    SWITCHCASE      reduce using rule 12 (Block -> While .)
    (               reduce using rule 12 (Block -> While .)
    NUM             reduce using rule 12 (Block -> While .)
    READ            reduce using rule 12 (Block -> While .)
    NEG             reduce using rule 12 (Block -> While .)
    SUB             reduce using rule 12 (Block -> While .)
    $end            reduce using rule 12 (Block -> While .)
    }               reduce using rule 12 (Block -> While .)
    ELSE            reduce using rule 12 (Block -> While .)
    :               reduce using rule 12 (Block -> While .)


state 10

    (13) Block -> Switch .

    ID              reduce using rule 13 (Block -> Switch .)
    STRING          reduce using rule 13 (Block -> Switch .)
    IF              reduce using rule 13 (Block -> Switch .)
    WHILE           reduce using rule 13 (Block -> Switch .)
    SWITCHCOND      reduce using rule 13 (Block -> Switch .)
    SWITCHCASE      reduce using rule 13 (Block -> Switch .)
    (               reduce using rule 13 (Block -> Switch .)
    NUM             reduce using rule 13 (Block -> Switch .)
    READ            reduce using rule 13 (Block -> Switch .)
    NEG             reduce using rule 13 (Block -> Switch .)
    SUB             reduce using rule 13 (Block -> Switch .)
    $end            reduce using rule 13 (Block -> Switch .)
    }               reduce using rule 13 (Block -> Switch .)
    ELSE            reduce using rule 13 (Block -> Switch .)
    :               reduce using rule 13 (Block -> Switch .)


state 11

    (18) Function -> FunctionHeader . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    {               shift and go to state 45
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Body                           shift and go to state 44
    Block                          shift and go to state 46
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 12

    (90) FunCall -> ID . ( FunArg )
    (17) FunctionHeader -> ID . FunScope FunCases
    (65) Atrib -> ID . LARROW AtribOp
    (67) Atrib -> ID . SWAP ID
    (51) Decl -> ID . ID
    (52) DeclArray -> ID . ID DeclArraySize
    (60) DeclAtrib -> ID . ID LARROW AtribOp
    (55) AtribArray -> ID . ArraySize LARROW AtribOp
    (62) AtribNum -> ID . LARROW AtribOp
    (86) Base -> ID .
    (57) AccessArray -> ID . ArraySize
    (19) FunScope -> . :
    (58) ArraySize -> . ArraySize [ AtribOp ]
    (59) ArraySize -> . [ AtribOp ]

    (               shift and go to state 49
    LARROW          shift and go to state 51
    SWAP            shift and go to state 52
    ID              shift and go to state 48
    PRINT           reduce using rule 86 (Base -> ID .)
    POW             reduce using rule 86 (Base -> ID .)
    MUL             reduce using rule 86 (Base -> ID .)
    DIV             reduce using rule 86 (Base -> ID .)
    ADD             reduce using rule 86 (Base -> ID .)
    SUB             reduce using rule 86 (Base -> ID .)
    MOD             reduce using rule 86 (Base -> ID .)
    DIFF            reduce using rule 86 (Base -> ID .)
    AND             reduce using rule 86 (Base -> ID .)
    OR              reduce using rule 86 (Base -> ID .)
    LESSER          reduce using rule 86 (Base -> ID .)
    GREATER         reduce using rule 86 (Base -> ID .)
    LEQ             reduce using rule 86 (Base -> ID .)
    GEQ             reduce using rule 86 (Base -> ID .)
    EQUAL           reduce using rule 86 (Base -> ID .)
    ;               reduce using rule 86 (Base -> ID .)
    RARROW          reduce using rule 86 (Base -> ID .)
    :               shift and go to state 54
    [               shift and go to state 55

    FunScope                       shift and go to state 50
    ArraySize                      shift and go to state 53

state 13

    (85) Base -> ( . AtribOp )
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 56
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 14

    (43) Exp -> STRING . PRINT

    PRINT           shift and go to state 61


state 15

    (44) Exp -> Atrib .

    ;               reduce using rule 44 (Exp -> Atrib .)


state 16

    (45) Exp -> Op .
    (50) AtribOp -> Op .

    ;               reduce using rule 45 (Exp -> Op .)
    RARROW          reduce using rule 50 (AtribOp -> Op .)


state 17

    (46) Exp -> Decl .

    ;               reduce using rule 46 (Exp -> Decl .)


state 18

    (47) Exp -> DeclArray .

    ;               reduce using rule 47 (Exp -> DeclArray .)


state 19

    (48) Exp -> DeclAtrib .

    ;               reduce using rule 48 (Exp -> DeclAtrib .)


state 20

    (27) If -> IfScope . AtribOp Body
    (29) IfElse -> IfScope . AtribOp Body ElseScope Body
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 62
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 21

    (66) Atrib -> AtribOp . RARROW ID
    (61) DeclAtrib -> AtribOp . RARROW ID ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize
    (63) AtribNum -> AtribOp . RARROW ID

    RARROW          shift and go to state 63


state 22

    (31) While -> WhileScope . ( AtribOp ) Body

    (               shift and go to state 64


state 23

    (34) Switch -> SwitchScope . Conds { Cases }
    (35) Conds -> . Conds , Cond
    (36) Conds -> . Cond
    (37) Cond -> . ID ( AtribOp )
    (38) Cond -> . ( AtribOp )

    ID              shift and go to state 67
    (               shift and go to state 68

    Conds                          shift and go to state 65
    Cond                           shift and go to state 66

state 24

    (68) Atrib -> AtribArray .
    (64) AtribNum -> AtribArray .

    ;               reduce using rule 68 (Atrib -> AtribArray .)
    RARROW          reduce using rule 64 (AtribNum -> AtribArray .)


state 25

    (69) Op -> OpBin .
    (74) OpBin -> OpBin . OpLogico TermMod
    (95) OpLogico -> . DIFF
    (96) OpLogico -> . AND
    (97) OpLogico -> . OR
    (98) OpLogico -> . LESSER
    (99) OpLogico -> . GREATER
    (100) OpLogico -> . LEQ
    (101) OpLogico -> . GEQ
    (102) OpLogico -> . EQUAL

    ;               reduce using rule 69 (Op -> OpBin .)
    RARROW          reduce using rule 69 (Op -> OpBin .)
    )               reduce using rule 69 (Op -> OpBin .)
    {               reduce using rule 69 (Op -> OpBin .)
    ID              reduce using rule 69 (Op -> OpBin .)
    STRING          reduce using rule 69 (Op -> OpBin .)
    IF              reduce using rule 69 (Op -> OpBin .)
    WHILE           reduce using rule 69 (Op -> OpBin .)
    SWITCHCOND      reduce using rule 69 (Op -> OpBin .)
    SWITCHCASE      reduce using rule 69 (Op -> OpBin .)
    (               reduce using rule 69 (Op -> OpBin .)
    NUM             reduce using rule 69 (Op -> OpBin .)
    READ            reduce using rule 69 (Op -> OpBin .)
    NEG             reduce using rule 69 (Op -> OpBin .)
    SUB             reduce using rule 69 (Op -> OpBin .)
    ,               reduce using rule 69 (Op -> OpBin .)
    ]               reduce using rule 69 (Op -> OpBin .)
    DIFF            shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LESSER          shift and go to state 73
    GREATER         shift and go to state 74
    LEQ             shift and go to state 75
    GEQ             shift and go to state 76
    EQUAL           shift and go to state 77

    OpLogico                       shift and go to state 69

state 26

    (26) IfScope -> IF .

    ID              reduce using rule 26 (IfScope -> IF .)
    (               reduce using rule 26 (IfScope -> IF .)
    NUM             reduce using rule 26 (IfScope -> IF .)
    READ            reduce using rule 26 (IfScope -> IF .)
    NEG             reduce using rule 26 (IfScope -> IF .)
    SUB             reduce using rule 26 (IfScope -> IF .)


state 27

    (30) WhileScope -> WHILE .

    (               reduce using rule 30 (WhileScope -> WHILE .)


state 28

    (32) SwitchScope -> SWITCHCOND .

    ID              reduce using rule 32 (SwitchScope -> SWITCHCOND .)
    (               reduce using rule 32 (SwitchScope -> SWITCHCOND .)


state 29

    (33) SwitchScope -> SWITCHCASE .

    ID              reduce using rule 33 (SwitchScope -> SWITCHCASE .)
    (               reduce using rule 33 (SwitchScope -> SWITCHCASE .)


state 30

    (49) AtribOp -> AtribNum .

    RARROW          reduce using rule 49 (AtribOp -> AtribNum .)
    )               reduce using rule 49 (AtribOp -> AtribNum .)
    {               reduce using rule 49 (AtribOp -> AtribNum .)
    ID              reduce using rule 49 (AtribOp -> AtribNum .)
    STRING          reduce using rule 49 (AtribOp -> AtribNum .)
    IF              reduce using rule 49 (AtribOp -> AtribNum .)
    WHILE           reduce using rule 49 (AtribOp -> AtribNum .)
    SWITCHCOND      reduce using rule 49 (AtribOp -> AtribNum .)
    SWITCHCASE      reduce using rule 49 (AtribOp -> AtribNum .)
    (               reduce using rule 49 (AtribOp -> AtribNum .)
    NUM             reduce using rule 49 (AtribOp -> AtribNum .)
    READ            reduce using rule 49 (AtribOp -> AtribNum .)
    NEG             reduce using rule 49 (AtribOp -> AtribNum .)
    SUB             reduce using rule 49 (AtribOp -> AtribNum .)
    ,               reduce using rule 49 (AtribOp -> AtribNum .)
    ;               reduce using rule 49 (AtribOp -> AtribNum .)
    ]               reduce using rule 49 (AtribOp -> AtribNum .)


state 31

    (75) OpBin -> TermMod .
    (76) TermMod -> TermMod . OpMod TermPlus
    (103) OpMod -> . MOD

    DIFF            reduce using rule 75 (OpBin -> TermMod .)
    AND             reduce using rule 75 (OpBin -> TermMod .)
    OR              reduce using rule 75 (OpBin -> TermMod .)
    LESSER          reduce using rule 75 (OpBin -> TermMod .)
    GREATER         reduce using rule 75 (OpBin -> TermMod .)
    LEQ             reduce using rule 75 (OpBin -> TermMod .)
    GEQ             reduce using rule 75 (OpBin -> TermMod .)
    EQUAL           reduce using rule 75 (OpBin -> TermMod .)
    ;               reduce using rule 75 (OpBin -> TermMod .)
    RARROW          reduce using rule 75 (OpBin -> TermMod .)
    )               reduce using rule 75 (OpBin -> TermMod .)
    {               reduce using rule 75 (OpBin -> TermMod .)
    ID              reduce using rule 75 (OpBin -> TermMod .)
    STRING          reduce using rule 75 (OpBin -> TermMod .)
    IF              reduce using rule 75 (OpBin -> TermMod .)
    WHILE           reduce using rule 75 (OpBin -> TermMod .)
    SWITCHCOND      reduce using rule 75 (OpBin -> TermMod .)
    SWITCHCASE      reduce using rule 75 (OpBin -> TermMod .)
    (               reduce using rule 75 (OpBin -> TermMod .)
    NUM             reduce using rule 75 (OpBin -> TermMod .)
    READ            reduce using rule 75 (OpBin -> TermMod .)
    NEG             reduce using rule 75 (OpBin -> TermMod .)
    SUB             reduce using rule 75 (OpBin -> TermMod .)
    ,               reduce using rule 75 (OpBin -> TermMod .)
    ]               reduce using rule 75 (OpBin -> TermMod .)
    MOD             shift and go to state 79

    OpMod                          shift and go to state 78

state 32

    (77) TermMod -> TermPlus .
    (78) TermPlus -> TermPlus . OpPlus TermMult
    (104) OpPlus -> . ADD
    (105) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    MOD             reduce using rule 77 (TermMod -> TermPlus .)
    DIFF            reduce using rule 77 (TermMod -> TermPlus .)
    AND             reduce using rule 77 (TermMod -> TermPlus .)
    OR              reduce using rule 77 (TermMod -> TermPlus .)
    LESSER          reduce using rule 77 (TermMod -> TermPlus .)
    GREATER         reduce using rule 77 (TermMod -> TermPlus .)
    LEQ             reduce using rule 77 (TermMod -> TermPlus .)
    GEQ             reduce using rule 77 (TermMod -> TermPlus .)
    EQUAL           reduce using rule 77 (TermMod -> TermPlus .)
    ;               reduce using rule 77 (TermMod -> TermPlus .)
    RARROW          reduce using rule 77 (TermMod -> TermPlus .)
    )               reduce using rule 77 (TermMod -> TermPlus .)
    {               reduce using rule 77 (TermMod -> TermPlus .)
    ID              reduce using rule 77 (TermMod -> TermPlus .)
    STRING          reduce using rule 77 (TermMod -> TermPlus .)
    IF              reduce using rule 77 (TermMod -> TermPlus .)
    WHILE           reduce using rule 77 (TermMod -> TermPlus .)
    SWITCHCOND      reduce using rule 77 (TermMod -> TermPlus .)
    SWITCHCASE      reduce using rule 77 (TermMod -> TermPlus .)
    (               reduce using rule 77 (TermMod -> TermPlus .)
    NUM             reduce using rule 77 (TermMod -> TermPlus .)
    READ            reduce using rule 77 (TermMod -> TermPlus .)
    NEG             reduce using rule 77 (TermMod -> TermPlus .)
    ,               reduce using rule 77 (TermMod -> TermPlus .)
    ]               reduce using rule 77 (TermMod -> TermPlus .)
    ADD             shift and go to state 81
    SUB             shift and go to state 82

  ! SUB             [ reduce using rule 77 (TermMod -> TermPlus .) ]

    OpPlus                         shift and go to state 80

state 33

    (79) TermPlus -> TermMult .
    (80) TermMult -> TermMult . OpMult TermPow
    (106) OpMult -> . MUL
    (107) OpMult -> . DIV

    ADD             reduce using rule 79 (TermPlus -> TermMult .)
    SUB             reduce using rule 79 (TermPlus -> TermMult .)
    MOD             reduce using rule 79 (TermPlus -> TermMult .)
    DIFF            reduce using rule 79 (TermPlus -> TermMult .)
    AND             reduce using rule 79 (TermPlus -> TermMult .)
    OR              reduce using rule 79 (TermPlus -> TermMult .)
    LESSER          reduce using rule 79 (TermPlus -> TermMult .)
    GREATER         reduce using rule 79 (TermPlus -> TermMult .)
    LEQ             reduce using rule 79 (TermPlus -> TermMult .)
    GEQ             reduce using rule 79 (TermPlus -> TermMult .)
    EQUAL           reduce using rule 79 (TermPlus -> TermMult .)
    ;               reduce using rule 79 (TermPlus -> TermMult .)
    RARROW          reduce using rule 79 (TermPlus -> TermMult .)
    )               reduce using rule 79 (TermPlus -> TermMult .)
    {               reduce using rule 79 (TermPlus -> TermMult .)
    ID              reduce using rule 79 (TermPlus -> TermMult .)
    STRING          reduce using rule 79 (TermPlus -> TermMult .)
    IF              reduce using rule 79 (TermPlus -> TermMult .)
    WHILE           reduce using rule 79 (TermPlus -> TermMult .)
    SWITCHCOND      reduce using rule 79 (TermPlus -> TermMult .)
    SWITCHCASE      reduce using rule 79 (TermPlus -> TermMult .)
    (               reduce using rule 79 (TermPlus -> TermMult .)
    NUM             reduce using rule 79 (TermPlus -> TermMult .)
    READ            reduce using rule 79 (TermPlus -> TermMult .)
    NEG             reduce using rule 79 (TermPlus -> TermMult .)
    ,               reduce using rule 79 (TermPlus -> TermMult .)
    ]               reduce using rule 79 (TermPlus -> TermMult .)
    MUL             shift and go to state 84
    DIV             shift and go to state 85

    OpMult                         shift and go to state 83

state 34

    (81) TermMult -> TermPow .
    (82) TermPow -> TermPow . OpPow Base
    (108) OpPow -> . POW

    MUL             reduce using rule 81 (TermMult -> TermPow .)
    DIV             reduce using rule 81 (TermMult -> TermPow .)
    ADD             reduce using rule 81 (TermMult -> TermPow .)
    SUB             reduce using rule 81 (TermMult -> TermPow .)
    MOD             reduce using rule 81 (TermMult -> TermPow .)
    DIFF            reduce using rule 81 (TermMult -> TermPow .)
    AND             reduce using rule 81 (TermMult -> TermPow .)
    OR              reduce using rule 81 (TermMult -> TermPow .)
    LESSER          reduce using rule 81 (TermMult -> TermPow .)
    GREATER         reduce using rule 81 (TermMult -> TermPow .)
    LEQ             reduce using rule 81 (TermMult -> TermPow .)
    GEQ             reduce using rule 81 (TermMult -> TermPow .)
    EQUAL           reduce using rule 81 (TermMult -> TermPow .)
    ;               reduce using rule 81 (TermMult -> TermPow .)
    RARROW          reduce using rule 81 (TermMult -> TermPow .)
    )               reduce using rule 81 (TermMult -> TermPow .)
    {               reduce using rule 81 (TermMult -> TermPow .)
    ID              reduce using rule 81 (TermMult -> TermPow .)
    STRING          reduce using rule 81 (TermMult -> TermPow .)
    IF              reduce using rule 81 (TermMult -> TermPow .)
    WHILE           reduce using rule 81 (TermMult -> TermPow .)
    SWITCHCOND      reduce using rule 81 (TermMult -> TermPow .)
    SWITCHCASE      reduce using rule 81 (TermMult -> TermPow .)
    (               reduce using rule 81 (TermMult -> TermPow .)
    NUM             reduce using rule 81 (TermMult -> TermPow .)
    READ            reduce using rule 81 (TermMult -> TermPow .)
    NEG             reduce using rule 81 (TermMult -> TermPow .)
    ,               reduce using rule 81 (TermMult -> TermPow .)
    ]               reduce using rule 81 (TermMult -> TermPow .)
    POW             shift and go to state 87

    OpPow                          shift and go to state 86

state 35

    (83) TermPow -> Base .
    (73) OpUno -> Base . PRINT

    POW             reduce using rule 83 (TermPow -> Base .)
    MUL             reduce using rule 83 (TermPow -> Base .)
    DIV             reduce using rule 83 (TermPow -> Base .)
    ADD             reduce using rule 83 (TermPow -> Base .)
    SUB             reduce using rule 83 (TermPow -> Base .)
    MOD             reduce using rule 83 (TermPow -> Base .)
    DIFF            reduce using rule 83 (TermPow -> Base .)
    AND             reduce using rule 83 (TermPow -> Base .)
    OR              reduce using rule 83 (TermPow -> Base .)
    LESSER          reduce using rule 83 (TermPow -> Base .)
    GREATER         reduce using rule 83 (TermPow -> Base .)
    LEQ             reduce using rule 83 (TermPow -> Base .)
    GEQ             reduce using rule 83 (TermPow -> Base .)
    EQUAL           reduce using rule 83 (TermPow -> Base .)
    ;               reduce using rule 83 (TermPow -> Base .)
    RARROW          reduce using rule 83 (TermPow -> Base .)
    )               reduce using rule 83 (TermPow -> Base .)
    {               reduce using rule 83 (TermPow -> Base .)
    ID              reduce using rule 83 (TermPow -> Base .)
    STRING          reduce using rule 83 (TermPow -> Base .)
    IF              reduce using rule 83 (TermPow -> Base .)
    WHILE           reduce using rule 83 (TermPow -> Base .)
    SWITCHCOND      reduce using rule 83 (TermPow -> Base .)
    SWITCHCASE      reduce using rule 83 (TermPow -> Base .)
    (               reduce using rule 83 (TermPow -> Base .)
    NUM             reduce using rule 83 (TermPow -> Base .)
    READ            reduce using rule 83 (TermPow -> Base .)
    NEG             reduce using rule 83 (TermPow -> Base .)
    ,               reduce using rule 83 (TermPow -> Base .)
    ]               reduce using rule 83 (TermPow -> Base .)
    PRINT           shift and go to state 88


state 36

    (84) Base -> OpUno .

    PRINT           reduce using rule 84 (Base -> OpUno .)
    POW             reduce using rule 84 (Base -> OpUno .)
    MUL             reduce using rule 84 (Base -> OpUno .)
    DIV             reduce using rule 84 (Base -> OpUno .)
    ADD             reduce using rule 84 (Base -> OpUno .)
    SUB             reduce using rule 84 (Base -> OpUno .)
    MOD             reduce using rule 84 (Base -> OpUno .)
    DIFF            reduce using rule 84 (Base -> OpUno .)
    AND             reduce using rule 84 (Base -> OpUno .)
    OR              reduce using rule 84 (Base -> OpUno .)
    LESSER          reduce using rule 84 (Base -> OpUno .)
    GREATER         reduce using rule 84 (Base -> OpUno .)
    LEQ             reduce using rule 84 (Base -> OpUno .)
    GEQ             reduce using rule 84 (Base -> OpUno .)
    EQUAL           reduce using rule 84 (Base -> OpUno .)
    ;               reduce using rule 84 (Base -> OpUno .)
    RARROW          reduce using rule 84 (Base -> OpUno .)
    )               reduce using rule 84 (Base -> OpUno .)
    {               reduce using rule 84 (Base -> OpUno .)
    ID              reduce using rule 84 (Base -> OpUno .)
    STRING          reduce using rule 84 (Base -> OpUno .)
    IF              reduce using rule 84 (Base -> OpUno .)
    WHILE           reduce using rule 84 (Base -> OpUno .)
    SWITCHCOND      reduce using rule 84 (Base -> OpUno .)
    SWITCHCASE      reduce using rule 84 (Base -> OpUno .)
    (               reduce using rule 84 (Base -> OpUno .)
    NUM             reduce using rule 84 (Base -> OpUno .)
    READ            reduce using rule 84 (Base -> OpUno .)
    NEG             reduce using rule 84 (Base -> OpUno .)
    ,               reduce using rule 84 (Base -> OpUno .)
    ]               reduce using rule 84 (Base -> OpUno .)


state 37

    (87) Base -> NUM .

    PRINT           reduce using rule 87 (Base -> NUM .)
    POW             reduce using rule 87 (Base -> NUM .)
    MUL             reduce using rule 87 (Base -> NUM .)
    DIV             reduce using rule 87 (Base -> NUM .)
    ADD             reduce using rule 87 (Base -> NUM .)
    SUB             reduce using rule 87 (Base -> NUM .)
    MOD             reduce using rule 87 (Base -> NUM .)
    DIFF            reduce using rule 87 (Base -> NUM .)
    AND             reduce using rule 87 (Base -> NUM .)
    OR              reduce using rule 87 (Base -> NUM .)
    LESSER          reduce using rule 87 (Base -> NUM .)
    GREATER         reduce using rule 87 (Base -> NUM .)
    LEQ             reduce using rule 87 (Base -> NUM .)
    GEQ             reduce using rule 87 (Base -> NUM .)
    EQUAL           reduce using rule 87 (Base -> NUM .)
    ;               reduce using rule 87 (Base -> NUM .)
    RARROW          reduce using rule 87 (Base -> NUM .)
    )               reduce using rule 87 (Base -> NUM .)
    {               reduce using rule 87 (Base -> NUM .)
    ID              reduce using rule 87 (Base -> NUM .)
    STRING          reduce using rule 87 (Base -> NUM .)
    IF              reduce using rule 87 (Base -> NUM .)
    WHILE           reduce using rule 87 (Base -> NUM .)
    SWITCHCOND      reduce using rule 87 (Base -> NUM .)
    SWITCHCASE      reduce using rule 87 (Base -> NUM .)
    (               reduce using rule 87 (Base -> NUM .)
    NUM             reduce using rule 87 (Base -> NUM .)
    READ            reduce using rule 87 (Base -> NUM .)
    NEG             reduce using rule 87 (Base -> NUM .)
    ,               reduce using rule 87 (Base -> NUM .)
    ]               reduce using rule 87 (Base -> NUM .)


state 38

    (89) Base -> READ .

    PRINT           reduce using rule 89 (Base -> READ .)
    POW             reduce using rule 89 (Base -> READ .)
    MUL             reduce using rule 89 (Base -> READ .)
    DIV             reduce using rule 89 (Base -> READ .)
    ADD             reduce using rule 89 (Base -> READ .)
    SUB             reduce using rule 89 (Base -> READ .)
    MOD             reduce using rule 89 (Base -> READ .)
    DIFF            reduce using rule 89 (Base -> READ .)
    AND             reduce using rule 89 (Base -> READ .)
    OR              reduce using rule 89 (Base -> READ .)
    LESSER          reduce using rule 89 (Base -> READ .)
    GREATER         reduce using rule 89 (Base -> READ .)
    LEQ             reduce using rule 89 (Base -> READ .)
    GEQ             reduce using rule 89 (Base -> READ .)
    EQUAL           reduce using rule 89 (Base -> READ .)
    ;               reduce using rule 89 (Base -> READ .)
    RARROW          reduce using rule 89 (Base -> READ .)
    )               reduce using rule 89 (Base -> READ .)
    {               reduce using rule 89 (Base -> READ .)
    ID              reduce using rule 89 (Base -> READ .)
    STRING          reduce using rule 89 (Base -> READ .)
    IF              reduce using rule 89 (Base -> READ .)
    WHILE           reduce using rule 89 (Base -> READ .)
    SWITCHCOND      reduce using rule 89 (Base -> READ .)
    SWITCHCASE      reduce using rule 89 (Base -> READ .)
    (               reduce using rule 89 (Base -> READ .)
    NUM             reduce using rule 89 (Base -> READ .)
    READ            reduce using rule 89 (Base -> READ .)
    NEG             reduce using rule 89 (Base -> READ .)
    ,               reduce using rule 89 (Base -> READ .)
    ]               reduce using rule 89 (Base -> READ .)


state 39

    (70) OpUno -> NEG . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    (               shift and go to state 13
    ID              shift and go to state 90
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Base                           shift and go to state 89
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 40

    (71) OpUno -> AccessArray .

    PRINT           reduce using rule 71 (OpUno -> AccessArray .)
    POW             reduce using rule 71 (OpUno -> AccessArray .)
    MUL             reduce using rule 71 (OpUno -> AccessArray .)
    DIV             reduce using rule 71 (OpUno -> AccessArray .)
    ADD             reduce using rule 71 (OpUno -> AccessArray .)
    SUB             reduce using rule 71 (OpUno -> AccessArray .)
    MOD             reduce using rule 71 (OpUno -> AccessArray .)
    DIFF            reduce using rule 71 (OpUno -> AccessArray .)
    AND             reduce using rule 71 (OpUno -> AccessArray .)
    OR              reduce using rule 71 (OpUno -> AccessArray .)
    LESSER          reduce using rule 71 (OpUno -> AccessArray .)
    GREATER         reduce using rule 71 (OpUno -> AccessArray .)
    LEQ             reduce using rule 71 (OpUno -> AccessArray .)
    GEQ             reduce using rule 71 (OpUno -> AccessArray .)
    EQUAL           reduce using rule 71 (OpUno -> AccessArray .)
    ;               reduce using rule 71 (OpUno -> AccessArray .)
    RARROW          reduce using rule 71 (OpUno -> AccessArray .)
    )               reduce using rule 71 (OpUno -> AccessArray .)
    {               reduce using rule 71 (OpUno -> AccessArray .)
    ID              reduce using rule 71 (OpUno -> AccessArray .)
    STRING          reduce using rule 71 (OpUno -> AccessArray .)
    IF              reduce using rule 71 (OpUno -> AccessArray .)
    WHILE           reduce using rule 71 (OpUno -> AccessArray .)
    SWITCHCOND      reduce using rule 71 (OpUno -> AccessArray .)
    SWITCHCASE      reduce using rule 71 (OpUno -> AccessArray .)
    (               reduce using rule 71 (OpUno -> AccessArray .)
    NUM             reduce using rule 71 (OpUno -> AccessArray .)
    READ            reduce using rule 71 (OpUno -> AccessArray .)
    NEG             reduce using rule 71 (OpUno -> AccessArray .)
    ,               reduce using rule 71 (OpUno -> AccessArray .)
    ]               reduce using rule 71 (OpUno -> AccessArray .)


state 41

    (72) OpUno -> SUB . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    (               shift and go to state 13
    ID              shift and go to state 90
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Base                           shift and go to state 91
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 42

    (8) Block -> FunCall ; .

    ID              reduce using rule 8 (Block -> FunCall ; .)
    STRING          reduce using rule 8 (Block -> FunCall ; .)
    IF              reduce using rule 8 (Block -> FunCall ; .)
    WHILE           reduce using rule 8 (Block -> FunCall ; .)
    SWITCHCOND      reduce using rule 8 (Block -> FunCall ; .)
    SWITCHCASE      reduce using rule 8 (Block -> FunCall ; .)
    (               reduce using rule 8 (Block -> FunCall ; .)
    NUM             reduce using rule 8 (Block -> FunCall ; .)
    READ            reduce using rule 8 (Block -> FunCall ; .)
    NEG             reduce using rule 8 (Block -> FunCall ; .)
    SUB             reduce using rule 8 (Block -> FunCall ; .)
    $end            reduce using rule 8 (Block -> FunCall ; .)
    }               reduce using rule 8 (Block -> FunCall ; .)
    ELSE            reduce using rule 8 (Block -> FunCall ; .)
    :               reduce using rule 8 (Block -> FunCall ; .)


state 43

    (9) Block -> Exp ; .

    ID              reduce using rule 9 (Block -> Exp ; .)
    STRING          reduce using rule 9 (Block -> Exp ; .)
    IF              reduce using rule 9 (Block -> Exp ; .)
    WHILE           reduce using rule 9 (Block -> Exp ; .)
    SWITCHCOND      reduce using rule 9 (Block -> Exp ; .)
    SWITCHCASE      reduce using rule 9 (Block -> Exp ; .)
    (               reduce using rule 9 (Block -> Exp ; .)
    NUM             reduce using rule 9 (Block -> Exp ; .)
    READ            reduce using rule 9 (Block -> Exp ; .)
    NEG             reduce using rule 9 (Block -> Exp ; .)
    SUB             reduce using rule 9 (Block -> Exp ; .)
    $end            reduce using rule 9 (Block -> Exp ; .)
    }               reduce using rule 9 (Block -> Exp ; .)
    ELSE            reduce using rule 9 (Block -> Exp ; .)
    :               reduce using rule 9 (Block -> Exp ; .)


state 44

    (18) Function -> FunctionHeader Body .

    ID              reduce using rule 18 (Function -> FunctionHeader Body .)
    STRING          reduce using rule 18 (Function -> FunctionHeader Body .)
    IF              reduce using rule 18 (Function -> FunctionHeader Body .)
    WHILE           reduce using rule 18 (Function -> FunctionHeader Body .)
    SWITCHCOND      reduce using rule 18 (Function -> FunctionHeader Body .)
    SWITCHCASE      reduce using rule 18 (Function -> FunctionHeader Body .)
    (               reduce using rule 18 (Function -> FunctionHeader Body .)
    NUM             reduce using rule 18 (Function -> FunctionHeader Body .)
    READ            reduce using rule 18 (Function -> FunctionHeader Body .)
    NEG             reduce using rule 18 (Function -> FunctionHeader Body .)
    SUB             reduce using rule 18 (Function -> FunctionHeader Body .)
    $end            reduce using rule 18 (Function -> FunctionHeader Body .)


state 45

    (14) Body -> { . }
    (16) Body -> { . Code }
    (6) Code -> . Code Block
    (7) Code -> . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    }               shift and go to state 92
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Code                           shift and go to state 93
    Block                          shift and go to state 94
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 46

    (15) Body -> Block .

    ID              reduce using rule 15 (Body -> Block .)
    STRING          reduce using rule 15 (Body -> Block .)
    IF              reduce using rule 15 (Body -> Block .)
    WHILE           reduce using rule 15 (Body -> Block .)
    SWITCHCOND      reduce using rule 15 (Body -> Block .)
    SWITCHCASE      reduce using rule 15 (Body -> Block .)
    (               reduce using rule 15 (Body -> Block .)
    NUM             reduce using rule 15 (Body -> Block .)
    READ            reduce using rule 15 (Body -> Block .)
    NEG             reduce using rule 15 (Body -> Block .)
    SUB             reduce using rule 15 (Body -> Block .)
    $end            reduce using rule 15 (Body -> Block .)
    ELSE            reduce using rule 15 (Body -> Block .)
    }               reduce using rule 15 (Body -> Block .)
    :               reduce using rule 15 (Body -> Block .)


state 47

    (90) FunCall -> ID . ( FunArg )
    (65) Atrib -> ID . LARROW AtribOp
    (67) Atrib -> ID . SWAP ID
    (51) Decl -> ID . ID
    (52) DeclArray -> ID . ID DeclArraySize
    (60) DeclAtrib -> ID . ID LARROW AtribOp
    (55) AtribArray -> ID . ArraySize LARROW AtribOp
    (62) AtribNum -> ID . LARROW AtribOp
    (86) Base -> ID .
    (57) AccessArray -> ID . ArraySize
    (58) ArraySize -> . ArraySize [ AtribOp ]
    (59) ArraySize -> . [ AtribOp ]

    (               shift and go to state 49
    LARROW          shift and go to state 51
    SWAP            shift and go to state 52
    ID              shift and go to state 48
    PRINT           reduce using rule 86 (Base -> ID .)
    POW             reduce using rule 86 (Base -> ID .)
    MUL             reduce using rule 86 (Base -> ID .)
    DIV             reduce using rule 86 (Base -> ID .)
    ADD             reduce using rule 86 (Base -> ID .)
    SUB             reduce using rule 86 (Base -> ID .)
    MOD             reduce using rule 86 (Base -> ID .)
    DIFF            reduce using rule 86 (Base -> ID .)
    AND             reduce using rule 86 (Base -> ID .)
    OR              reduce using rule 86 (Base -> ID .)
    LESSER          reduce using rule 86 (Base -> ID .)
    GREATER         reduce using rule 86 (Base -> ID .)
    LEQ             reduce using rule 86 (Base -> ID .)
    GEQ             reduce using rule 86 (Base -> ID .)
    EQUAL           reduce using rule 86 (Base -> ID .)
    ;               reduce using rule 86 (Base -> ID .)
    RARROW          reduce using rule 86 (Base -> ID .)
    [               shift and go to state 55

    ArraySize                      shift and go to state 53

state 48

    (51) Decl -> ID ID .
    (52) DeclArray -> ID ID . DeclArraySize
    (60) DeclAtrib -> ID ID . LARROW AtribOp
    (53) DeclArraySize -> . DeclArraySize [ NUM ]
    (54) DeclArraySize -> . [ NUM ]

    ;               reduce using rule 51 (Decl -> ID ID .)
    LARROW          shift and go to state 96
    [               shift and go to state 97

    DeclArraySize                  shift and go to state 95

state 49

    (90) FunCall -> ID ( . FunArg )
    (91) FunArg -> . FunRec
    (92) FunArg -> .
    (93) FunRec -> . FunRec , AtribOp
    (94) FunRec -> . AtribOp
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    )               reduce using rule 92 (FunArg -> .)
    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    FunArg                         shift and go to state 98
    FunRec                         shift and go to state 99
    AtribOp                        shift and go to state 100
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 50

    (17) FunctionHeader -> ID FunScope . FunCases
    (20) FunCases -> . FunExtra RARROW ID
    (21) FunCases -> . RARROW ID
    (22) FunCases -> . FunExtra
    (23) FunCases -> .
    (24) FunExtra -> . FunExtra , ID
    (25) FunExtra -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RARROW          shift and go to state 104
    {               reduce using rule 23 (FunCases -> .)
    STRING          reduce using rule 23 (FunCases -> .)
    IF              reduce using rule 23 (FunCases -> .)
    WHILE           reduce using rule 23 (FunCases -> .)
    SWITCHCOND      reduce using rule 23 (FunCases -> .)
    SWITCHCASE      reduce using rule 23 (FunCases -> .)
    (               reduce using rule 23 (FunCases -> .)
    NUM             reduce using rule 23 (FunCases -> .)
    READ            reduce using rule 23 (FunCases -> .)
    NEG             reduce using rule 23 (FunCases -> .)
    SUB             reduce using rule 23 (FunCases -> .)
    ID              shift and go to state 101

  ! ID              [ reduce using rule 23 (FunCases -> .) ]

    FunCases                       shift and go to state 102
    FunExtra                       shift and go to state 103

state 51

    (65) Atrib -> ID LARROW . AtribOp
    (62) AtribNum -> ID LARROW . AtribOp
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 105
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 52

    (67) Atrib -> ID SWAP . ID

    ID              shift and go to state 106


state 53

    (55) AtribArray -> ID ArraySize . LARROW AtribOp
    (57) AccessArray -> ID ArraySize .
    (58) ArraySize -> ArraySize . [ AtribOp ]

    LARROW          shift and go to state 107
    PRINT           reduce using rule 57 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 57 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 57 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 57 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 57 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 57 (AccessArray -> ID ArraySize .)
    MOD             reduce using rule 57 (AccessArray -> ID ArraySize .)
    DIFF            reduce using rule 57 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 57 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 57 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 57 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 57 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 57 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 57 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 57 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 57 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 57 (AccessArray -> ID ArraySize .)
    )               reduce using rule 57 (AccessArray -> ID ArraySize .)
    {               reduce using rule 57 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 57 (AccessArray -> ID ArraySize .)
    STRING          reduce using rule 57 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 57 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 57 (AccessArray -> ID ArraySize .)
    SWITCHCOND      reduce using rule 57 (AccessArray -> ID ArraySize .)
    SWITCHCASE      reduce using rule 57 (AccessArray -> ID ArraySize .)
    (               reduce using rule 57 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 57 (AccessArray -> ID ArraySize .)
    READ            reduce using rule 57 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 57 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 57 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 57 (AccessArray -> ID ArraySize .)
    [               shift and go to state 108


state 54

    (19) FunScope -> : .

    RARROW          reduce using rule 19 (FunScope -> : .)
    ID              reduce using rule 19 (FunScope -> : .)
    {               reduce using rule 19 (FunScope -> : .)
    STRING          reduce using rule 19 (FunScope -> : .)
    IF              reduce using rule 19 (FunScope -> : .)
    WHILE           reduce using rule 19 (FunScope -> : .)
    SWITCHCOND      reduce using rule 19 (FunScope -> : .)
    SWITCHCASE      reduce using rule 19 (FunScope -> : .)
    (               reduce using rule 19 (FunScope -> : .)
    NUM             reduce using rule 19 (FunScope -> : .)
    READ            reduce using rule 19 (FunScope -> : .)
    NEG             reduce using rule 19 (FunScope -> : .)
    SUB             reduce using rule 19 (FunScope -> : .)


state 55

    (59) ArraySize -> [ . AtribOp ]
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 109
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 56

    (85) Base -> ( AtribOp . )
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 110
    RARROW          shift and go to state 111


state 57

    (50) AtribOp -> Op .

    )               reduce using rule 50 (AtribOp -> Op .)
    RARROW          reduce using rule 50 (AtribOp -> Op .)
    {               reduce using rule 50 (AtribOp -> Op .)
    ID              reduce using rule 50 (AtribOp -> Op .)
    STRING          reduce using rule 50 (AtribOp -> Op .)
    IF              reduce using rule 50 (AtribOp -> Op .)
    WHILE           reduce using rule 50 (AtribOp -> Op .)
    SWITCHCOND      reduce using rule 50 (AtribOp -> Op .)
    SWITCHCASE      reduce using rule 50 (AtribOp -> Op .)
    (               reduce using rule 50 (AtribOp -> Op .)
    NUM             reduce using rule 50 (AtribOp -> Op .)
    READ            reduce using rule 50 (AtribOp -> Op .)
    NEG             reduce using rule 50 (AtribOp -> Op .)
    SUB             reduce using rule 50 (AtribOp -> Op .)
    ,               reduce using rule 50 (AtribOp -> Op .)
    ;               reduce using rule 50 (AtribOp -> Op .)
    ]               reduce using rule 50 (AtribOp -> Op .)


state 58

    (62) AtribNum -> ID . LARROW AtribOp
    (55) AtribArray -> ID . ArraySize LARROW AtribOp
    (86) Base -> ID .
    (90) FunCall -> ID . ( FunArg )
    (57) AccessArray -> ID . ArraySize
    (58) ArraySize -> . ArraySize [ AtribOp ]
    (59) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    LARROW          shift and go to state 112
    PRINT           reduce using rule 86 (Base -> ID .)
    POW             reduce using rule 86 (Base -> ID .)
    MUL             reduce using rule 86 (Base -> ID .)
    DIV             reduce using rule 86 (Base -> ID .)
    ADD             reduce using rule 86 (Base -> ID .)
    SUB             reduce using rule 86 (Base -> ID .)
    MOD             reduce using rule 86 (Base -> ID .)
    DIFF            reduce using rule 86 (Base -> ID .)
    AND             reduce using rule 86 (Base -> ID .)
    OR              reduce using rule 86 (Base -> ID .)
    LESSER          reduce using rule 86 (Base -> ID .)
    GREATER         reduce using rule 86 (Base -> ID .)
    LEQ             reduce using rule 86 (Base -> ID .)
    GEQ             reduce using rule 86 (Base -> ID .)
    EQUAL           reduce using rule 86 (Base -> ID .)
    )               reduce using rule 86 (Base -> ID .)
    RARROW          reduce using rule 86 (Base -> ID .)
    {               reduce using rule 86 (Base -> ID .)
    ID              reduce using rule 86 (Base -> ID .)
    STRING          reduce using rule 86 (Base -> ID .)
    IF              reduce using rule 86 (Base -> ID .)
    WHILE           reduce using rule 86 (Base -> ID .)
    SWITCHCOND      reduce using rule 86 (Base -> ID .)
    SWITCHCASE      reduce using rule 86 (Base -> ID .)
    NUM             reduce using rule 86 (Base -> ID .)
    READ            reduce using rule 86 (Base -> ID .)
    NEG             reduce using rule 86 (Base -> ID .)
    ,               reduce using rule 86 (Base -> ID .)
    ;               reduce using rule 86 (Base -> ID .)
    ]               reduce using rule 86 (Base -> ID .)
    (               shift and go to state 49
    [               shift and go to state 55

  ! (               [ reduce using rule 86 (Base -> ID .) ]

    ArraySize                      shift and go to state 53

state 59

    (64) AtribNum -> AtribArray .

    )               reduce using rule 64 (AtribNum -> AtribArray .)
    RARROW          reduce using rule 64 (AtribNum -> AtribArray .)
    {               reduce using rule 64 (AtribNum -> AtribArray .)
    ID              reduce using rule 64 (AtribNum -> AtribArray .)
    STRING          reduce using rule 64 (AtribNum -> AtribArray .)
    IF              reduce using rule 64 (AtribNum -> AtribArray .)
    WHILE           reduce using rule 64 (AtribNum -> AtribArray .)
    SWITCHCOND      reduce using rule 64 (AtribNum -> AtribArray .)
    SWITCHCASE      reduce using rule 64 (AtribNum -> AtribArray .)
    (               reduce using rule 64 (AtribNum -> AtribArray .)
    NUM             reduce using rule 64 (AtribNum -> AtribArray .)
    READ            reduce using rule 64 (AtribNum -> AtribArray .)
    NEG             reduce using rule 64 (AtribNum -> AtribArray .)
    SUB             reduce using rule 64 (AtribNum -> AtribArray .)
    ,               reduce using rule 64 (AtribNum -> AtribArray .)
    ;               reduce using rule 64 (AtribNum -> AtribArray .)
    ]               reduce using rule 64 (AtribNum -> AtribArray .)


state 60

    (88) Base -> FunCall .

    PRINT           reduce using rule 88 (Base -> FunCall .)
    POW             reduce using rule 88 (Base -> FunCall .)
    MUL             reduce using rule 88 (Base -> FunCall .)
    DIV             reduce using rule 88 (Base -> FunCall .)
    ADD             reduce using rule 88 (Base -> FunCall .)
    SUB             reduce using rule 88 (Base -> FunCall .)
    MOD             reduce using rule 88 (Base -> FunCall .)
    DIFF            reduce using rule 88 (Base -> FunCall .)
    AND             reduce using rule 88 (Base -> FunCall .)
    OR              reduce using rule 88 (Base -> FunCall .)
    LESSER          reduce using rule 88 (Base -> FunCall .)
    GREATER         reduce using rule 88 (Base -> FunCall .)
    LEQ             reduce using rule 88 (Base -> FunCall .)
    GEQ             reduce using rule 88 (Base -> FunCall .)
    EQUAL           reduce using rule 88 (Base -> FunCall .)
    )               reduce using rule 88 (Base -> FunCall .)
    RARROW          reduce using rule 88 (Base -> FunCall .)
    {               reduce using rule 88 (Base -> FunCall .)
    ID              reduce using rule 88 (Base -> FunCall .)
    STRING          reduce using rule 88 (Base -> FunCall .)
    IF              reduce using rule 88 (Base -> FunCall .)
    WHILE           reduce using rule 88 (Base -> FunCall .)
    SWITCHCOND      reduce using rule 88 (Base -> FunCall .)
    SWITCHCASE      reduce using rule 88 (Base -> FunCall .)
    (               reduce using rule 88 (Base -> FunCall .)
    NUM             reduce using rule 88 (Base -> FunCall .)
    READ            reduce using rule 88 (Base -> FunCall .)
    NEG             reduce using rule 88 (Base -> FunCall .)
    ;               reduce using rule 88 (Base -> FunCall .)
    ,               reduce using rule 88 (Base -> FunCall .)
    ]               reduce using rule 88 (Base -> FunCall .)


state 61

    (43) Exp -> STRING PRINT .

    ;               reduce using rule 43 (Exp -> STRING PRINT .)


state 62

    (27) If -> IfScope AtribOp . Body
    (29) IfElse -> IfScope AtribOp . Body ElseScope Body
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    RARROW          shift and go to state 111
    {               shift and go to state 45
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    Body                           shift and go to state 113
    Block                          shift and go to state 46
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 63

    (66) Atrib -> AtribOp RARROW . ID
    (61) DeclAtrib -> AtribOp RARROW . ID ID
    (56) AtribArray -> AtribOp RARROW . ID ArraySize
    (63) AtribNum -> AtribOp RARROW . ID

    ID              shift and go to state 114


state 64

    (31) While -> WhileScope ( . AtribOp ) Body
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 115
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 65

    (34) Switch -> SwitchScope Conds . { Cases }
    (35) Conds -> Conds . , Cond

    {               shift and go to state 116
    ,               shift and go to state 117


state 66

    (36) Conds -> Cond .

    {               reduce using rule 36 (Conds -> Cond .)
    ,               reduce using rule 36 (Conds -> Cond .)


state 67

    (37) Cond -> ID . ( AtribOp )

    (               shift and go to state 118


state 68

    (38) Cond -> ( . AtribOp )
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 119
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 69

    (74) OpBin -> OpBin OpLogico . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    (               shift and go to state 13
    ID              shift and go to state 90
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    TermMod                        shift and go to state 120
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 70

    (95) OpLogico -> DIFF .

    (               reduce using rule 95 (OpLogico -> DIFF .)
    ID              reduce using rule 95 (OpLogico -> DIFF .)
    NUM             reduce using rule 95 (OpLogico -> DIFF .)
    READ            reduce using rule 95 (OpLogico -> DIFF .)
    NEG             reduce using rule 95 (OpLogico -> DIFF .)
    SUB             reduce using rule 95 (OpLogico -> DIFF .)


state 71

    (96) OpLogico -> AND .

    (               reduce using rule 96 (OpLogico -> AND .)
    ID              reduce using rule 96 (OpLogico -> AND .)
    NUM             reduce using rule 96 (OpLogico -> AND .)
    READ            reduce using rule 96 (OpLogico -> AND .)
    NEG             reduce using rule 96 (OpLogico -> AND .)
    SUB             reduce using rule 96 (OpLogico -> AND .)


state 72

    (97) OpLogico -> OR .

    (               reduce using rule 97 (OpLogico -> OR .)
    ID              reduce using rule 97 (OpLogico -> OR .)
    NUM             reduce using rule 97 (OpLogico -> OR .)
    READ            reduce using rule 97 (OpLogico -> OR .)
    NEG             reduce using rule 97 (OpLogico -> OR .)
    SUB             reduce using rule 97 (OpLogico -> OR .)


state 73

    (98) OpLogico -> LESSER .

    (               reduce using rule 98 (OpLogico -> LESSER .)
    ID              reduce using rule 98 (OpLogico -> LESSER .)
    NUM             reduce using rule 98 (OpLogico -> LESSER .)
    READ            reduce using rule 98 (OpLogico -> LESSER .)
    NEG             reduce using rule 98 (OpLogico -> LESSER .)
    SUB             reduce using rule 98 (OpLogico -> LESSER .)


state 74

    (99) OpLogico -> GREATER .

    (               reduce using rule 99 (OpLogico -> GREATER .)
    ID              reduce using rule 99 (OpLogico -> GREATER .)
    NUM             reduce using rule 99 (OpLogico -> GREATER .)
    READ            reduce using rule 99 (OpLogico -> GREATER .)
    NEG             reduce using rule 99 (OpLogico -> GREATER .)
    SUB             reduce using rule 99 (OpLogico -> GREATER .)


state 75

    (100) OpLogico -> LEQ .

    (               reduce using rule 100 (OpLogico -> LEQ .)
    ID              reduce using rule 100 (OpLogico -> LEQ .)
    NUM             reduce using rule 100 (OpLogico -> LEQ .)
    READ            reduce using rule 100 (OpLogico -> LEQ .)
    NEG             reduce using rule 100 (OpLogico -> LEQ .)
    SUB             reduce using rule 100 (OpLogico -> LEQ .)


state 76

    (101) OpLogico -> GEQ .

    (               reduce using rule 101 (OpLogico -> GEQ .)
    ID              reduce using rule 101 (OpLogico -> GEQ .)
    NUM             reduce using rule 101 (OpLogico -> GEQ .)
    READ            reduce using rule 101 (OpLogico -> GEQ .)
    NEG             reduce using rule 101 (OpLogico -> GEQ .)
    SUB             reduce using rule 101 (OpLogico -> GEQ .)


state 77

    (102) OpLogico -> EQUAL .

    (               reduce using rule 102 (OpLogico -> EQUAL .)
    ID              reduce using rule 102 (OpLogico -> EQUAL .)
    NUM             reduce using rule 102 (OpLogico -> EQUAL .)
    READ            reduce using rule 102 (OpLogico -> EQUAL .)
    NEG             reduce using rule 102 (OpLogico -> EQUAL .)
    SUB             reduce using rule 102 (OpLogico -> EQUAL .)


state 78

    (76) TermMod -> TermMod OpMod . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    (               shift and go to state 13
    ID              shift and go to state 90
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    TermPlus                       shift and go to state 121
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 79

    (103) OpMod -> MOD .

    (               reduce using rule 103 (OpMod -> MOD .)
    ID              reduce using rule 103 (OpMod -> MOD .)
    NUM             reduce using rule 103 (OpMod -> MOD .)
    READ            reduce using rule 103 (OpMod -> MOD .)
    NEG             reduce using rule 103 (OpMod -> MOD .)
    SUB             reduce using rule 103 (OpMod -> MOD .)


state 80

    (78) TermPlus -> TermPlus OpPlus . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    (               shift and go to state 13
    ID              shift and go to state 90
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    TermMult                       shift and go to state 122
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 81

    (104) OpPlus -> ADD .

    (               reduce using rule 104 (OpPlus -> ADD .)
    ID              reduce using rule 104 (OpPlus -> ADD .)
    NUM             reduce using rule 104 (OpPlus -> ADD .)
    READ            reduce using rule 104 (OpPlus -> ADD .)
    NEG             reduce using rule 104 (OpPlus -> ADD .)
    SUB             reduce using rule 104 (OpPlus -> ADD .)


state 82

    (105) OpPlus -> SUB .

    (               reduce using rule 105 (OpPlus -> SUB .)
    ID              reduce using rule 105 (OpPlus -> SUB .)
    NUM             reduce using rule 105 (OpPlus -> SUB .)
    READ            reduce using rule 105 (OpPlus -> SUB .)
    NEG             reduce using rule 105 (OpPlus -> SUB .)
    SUB             reduce using rule 105 (OpPlus -> SUB .)


state 83

    (80) TermMult -> TermMult OpMult . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    (               shift and go to state 13
    ID              shift and go to state 90
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    TermPow                        shift and go to state 123
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 84

    (106) OpMult -> MUL .

    (               reduce using rule 106 (OpMult -> MUL .)
    ID              reduce using rule 106 (OpMult -> MUL .)
    NUM             reduce using rule 106 (OpMult -> MUL .)
    READ            reduce using rule 106 (OpMult -> MUL .)
    NEG             reduce using rule 106 (OpMult -> MUL .)
    SUB             reduce using rule 106 (OpMult -> MUL .)


state 85

    (107) OpMult -> DIV .

    (               reduce using rule 107 (OpMult -> DIV .)
    ID              reduce using rule 107 (OpMult -> DIV .)
    NUM             reduce using rule 107 (OpMult -> DIV .)
    READ            reduce using rule 107 (OpMult -> DIV .)
    NEG             reduce using rule 107 (OpMult -> DIV .)
    SUB             reduce using rule 107 (OpMult -> DIV .)


state 86

    (82) TermPow -> TermPow OpPow . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    (               shift and go to state 13
    ID              shift and go to state 90
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Base                           shift and go to state 124
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 87

    (108) OpPow -> POW .

    (               reduce using rule 108 (OpPow -> POW .)
    ID              reduce using rule 108 (OpPow -> POW .)
    NUM             reduce using rule 108 (OpPow -> POW .)
    READ            reduce using rule 108 (OpPow -> POW .)
    NEG             reduce using rule 108 (OpPow -> POW .)
    SUB             reduce using rule 108 (OpPow -> POW .)


state 88

    (73) OpUno -> Base PRINT .

    PRINT           reduce using rule 73 (OpUno -> Base PRINT .)
    POW             reduce using rule 73 (OpUno -> Base PRINT .)
    MUL             reduce using rule 73 (OpUno -> Base PRINT .)
    DIV             reduce using rule 73 (OpUno -> Base PRINT .)
    ADD             reduce using rule 73 (OpUno -> Base PRINT .)
    SUB             reduce using rule 73 (OpUno -> Base PRINT .)
    MOD             reduce using rule 73 (OpUno -> Base PRINT .)
    DIFF            reduce using rule 73 (OpUno -> Base PRINT .)
    AND             reduce using rule 73 (OpUno -> Base PRINT .)
    OR              reduce using rule 73 (OpUno -> Base PRINT .)
    LESSER          reduce using rule 73 (OpUno -> Base PRINT .)
    GREATER         reduce using rule 73 (OpUno -> Base PRINT .)
    LEQ             reduce using rule 73 (OpUno -> Base PRINT .)
    GEQ             reduce using rule 73 (OpUno -> Base PRINT .)
    EQUAL           reduce using rule 73 (OpUno -> Base PRINT .)
    ;               reduce using rule 73 (OpUno -> Base PRINT .)
    RARROW          reduce using rule 73 (OpUno -> Base PRINT .)
    )               reduce using rule 73 (OpUno -> Base PRINT .)
    {               reduce using rule 73 (OpUno -> Base PRINT .)
    ID              reduce using rule 73 (OpUno -> Base PRINT .)
    STRING          reduce using rule 73 (OpUno -> Base PRINT .)
    IF              reduce using rule 73 (OpUno -> Base PRINT .)
    WHILE           reduce using rule 73 (OpUno -> Base PRINT .)
    SWITCHCOND      reduce using rule 73 (OpUno -> Base PRINT .)
    SWITCHCASE      reduce using rule 73 (OpUno -> Base PRINT .)
    (               reduce using rule 73 (OpUno -> Base PRINT .)
    NUM             reduce using rule 73 (OpUno -> Base PRINT .)
    READ            reduce using rule 73 (OpUno -> Base PRINT .)
    NEG             reduce using rule 73 (OpUno -> Base PRINT .)
    ,               reduce using rule 73 (OpUno -> Base PRINT .)
    ]               reduce using rule 73 (OpUno -> Base PRINT .)


state 89

    (70) OpUno -> NEG Base .
    (73) OpUno -> Base . PRINT

  ! shift/reduce conflict for PRINT resolved as shift
    POW             reduce using rule 70 (OpUno -> NEG Base .)
    MUL             reduce using rule 70 (OpUno -> NEG Base .)
    DIV             reduce using rule 70 (OpUno -> NEG Base .)
    ADD             reduce using rule 70 (OpUno -> NEG Base .)
    SUB             reduce using rule 70 (OpUno -> NEG Base .)
    MOD             reduce using rule 70 (OpUno -> NEG Base .)
    DIFF            reduce using rule 70 (OpUno -> NEG Base .)
    AND             reduce using rule 70 (OpUno -> NEG Base .)
    OR              reduce using rule 70 (OpUno -> NEG Base .)
    LESSER          reduce using rule 70 (OpUno -> NEG Base .)
    GREATER         reduce using rule 70 (OpUno -> NEG Base .)
    LEQ             reduce using rule 70 (OpUno -> NEG Base .)
    GEQ             reduce using rule 70 (OpUno -> NEG Base .)
    EQUAL           reduce using rule 70 (OpUno -> NEG Base .)
    ;               reduce using rule 70 (OpUno -> NEG Base .)
    RARROW          reduce using rule 70 (OpUno -> NEG Base .)
    )               reduce using rule 70 (OpUno -> NEG Base .)
    {               reduce using rule 70 (OpUno -> NEG Base .)
    ID              reduce using rule 70 (OpUno -> NEG Base .)
    STRING          reduce using rule 70 (OpUno -> NEG Base .)
    IF              reduce using rule 70 (OpUno -> NEG Base .)
    WHILE           reduce using rule 70 (OpUno -> NEG Base .)
    SWITCHCOND      reduce using rule 70 (OpUno -> NEG Base .)
    SWITCHCASE      reduce using rule 70 (OpUno -> NEG Base .)
    (               reduce using rule 70 (OpUno -> NEG Base .)
    NUM             reduce using rule 70 (OpUno -> NEG Base .)
    READ            reduce using rule 70 (OpUno -> NEG Base .)
    NEG             reduce using rule 70 (OpUno -> NEG Base .)
    ,               reduce using rule 70 (OpUno -> NEG Base .)
    ]               reduce using rule 70 (OpUno -> NEG Base .)
    PRINT           shift and go to state 88

  ! PRINT           [ reduce using rule 70 (OpUno -> NEG Base .) ]


state 90

    (86) Base -> ID .
    (90) FunCall -> ID . ( FunArg )
    (57) AccessArray -> ID . ArraySize
    (58) ArraySize -> . ArraySize [ AtribOp ]
    (59) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    PRINT           reduce using rule 86 (Base -> ID .)
    POW             reduce using rule 86 (Base -> ID .)
    MUL             reduce using rule 86 (Base -> ID .)
    DIV             reduce using rule 86 (Base -> ID .)
    ADD             reduce using rule 86 (Base -> ID .)
    SUB             reduce using rule 86 (Base -> ID .)
    MOD             reduce using rule 86 (Base -> ID .)
    DIFF            reduce using rule 86 (Base -> ID .)
    AND             reduce using rule 86 (Base -> ID .)
    OR              reduce using rule 86 (Base -> ID .)
    LESSER          reduce using rule 86 (Base -> ID .)
    GREATER         reduce using rule 86 (Base -> ID .)
    LEQ             reduce using rule 86 (Base -> ID .)
    GEQ             reduce using rule 86 (Base -> ID .)
    EQUAL           reduce using rule 86 (Base -> ID .)
    ;               reduce using rule 86 (Base -> ID .)
    RARROW          reduce using rule 86 (Base -> ID .)
    )               reduce using rule 86 (Base -> ID .)
    {               reduce using rule 86 (Base -> ID .)
    ID              reduce using rule 86 (Base -> ID .)
    STRING          reduce using rule 86 (Base -> ID .)
    IF              reduce using rule 86 (Base -> ID .)
    WHILE           reduce using rule 86 (Base -> ID .)
    SWITCHCOND      reduce using rule 86 (Base -> ID .)
    SWITCHCASE      reduce using rule 86 (Base -> ID .)
    NUM             reduce using rule 86 (Base -> ID .)
    READ            reduce using rule 86 (Base -> ID .)
    NEG             reduce using rule 86 (Base -> ID .)
    ,               reduce using rule 86 (Base -> ID .)
    ]               reduce using rule 86 (Base -> ID .)
    (               shift and go to state 49
    [               shift and go to state 55

  ! (               [ reduce using rule 86 (Base -> ID .) ]

    ArraySize                      shift and go to state 125

state 91

    (72) OpUno -> SUB Base .
    (73) OpUno -> Base . PRINT

  ! shift/reduce conflict for PRINT resolved as shift
    POW             reduce using rule 72 (OpUno -> SUB Base .)
    MUL             reduce using rule 72 (OpUno -> SUB Base .)
    DIV             reduce using rule 72 (OpUno -> SUB Base .)
    ADD             reduce using rule 72 (OpUno -> SUB Base .)
    SUB             reduce using rule 72 (OpUno -> SUB Base .)
    MOD             reduce using rule 72 (OpUno -> SUB Base .)
    DIFF            reduce using rule 72 (OpUno -> SUB Base .)
    AND             reduce using rule 72 (OpUno -> SUB Base .)
    OR              reduce using rule 72 (OpUno -> SUB Base .)
    LESSER          reduce using rule 72 (OpUno -> SUB Base .)
    GREATER         reduce using rule 72 (OpUno -> SUB Base .)
    LEQ             reduce using rule 72 (OpUno -> SUB Base .)
    GEQ             reduce using rule 72 (OpUno -> SUB Base .)
    EQUAL           reduce using rule 72 (OpUno -> SUB Base .)
    ;               reduce using rule 72 (OpUno -> SUB Base .)
    RARROW          reduce using rule 72 (OpUno -> SUB Base .)
    )               reduce using rule 72 (OpUno -> SUB Base .)
    {               reduce using rule 72 (OpUno -> SUB Base .)
    ID              reduce using rule 72 (OpUno -> SUB Base .)
    STRING          reduce using rule 72 (OpUno -> SUB Base .)
    IF              reduce using rule 72 (OpUno -> SUB Base .)
    WHILE           reduce using rule 72 (OpUno -> SUB Base .)
    SWITCHCOND      reduce using rule 72 (OpUno -> SUB Base .)
    SWITCHCASE      reduce using rule 72 (OpUno -> SUB Base .)
    (               reduce using rule 72 (OpUno -> SUB Base .)
    NUM             reduce using rule 72 (OpUno -> SUB Base .)
    READ            reduce using rule 72 (OpUno -> SUB Base .)
    NEG             reduce using rule 72 (OpUno -> SUB Base .)
    ,               reduce using rule 72 (OpUno -> SUB Base .)
    ]               reduce using rule 72 (OpUno -> SUB Base .)
    PRINT           shift and go to state 88

  ! PRINT           [ reduce using rule 72 (OpUno -> SUB Base .) ]


state 92

    (14) Body -> { } .

    ID              reduce using rule 14 (Body -> { } .)
    STRING          reduce using rule 14 (Body -> { } .)
    IF              reduce using rule 14 (Body -> { } .)
    WHILE           reduce using rule 14 (Body -> { } .)
    SWITCHCOND      reduce using rule 14 (Body -> { } .)
    SWITCHCASE      reduce using rule 14 (Body -> { } .)
    (               reduce using rule 14 (Body -> { } .)
    NUM             reduce using rule 14 (Body -> { } .)
    READ            reduce using rule 14 (Body -> { } .)
    NEG             reduce using rule 14 (Body -> { } .)
    SUB             reduce using rule 14 (Body -> { } .)
    $end            reduce using rule 14 (Body -> { } .)
    ELSE            reduce using rule 14 (Body -> { } .)
    }               reduce using rule 14 (Body -> { } .)
    :               reduce using rule 14 (Body -> { } .)


state 93

    (16) Body -> { Code . }
    (6) Code -> Code . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    }               shift and go to state 126
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Block                          shift and go to state 127
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 94

    (7) Code -> Block .

    }               reduce using rule 7 (Code -> Block .)
    ID              reduce using rule 7 (Code -> Block .)
    STRING          reduce using rule 7 (Code -> Block .)
    IF              reduce using rule 7 (Code -> Block .)
    WHILE           reduce using rule 7 (Code -> Block .)
    SWITCHCOND      reduce using rule 7 (Code -> Block .)
    SWITCHCASE      reduce using rule 7 (Code -> Block .)
    (               reduce using rule 7 (Code -> Block .)
    NUM             reduce using rule 7 (Code -> Block .)
    READ            reduce using rule 7 (Code -> Block .)
    NEG             reduce using rule 7 (Code -> Block .)
    SUB             reduce using rule 7 (Code -> Block .)


state 95

    (52) DeclArray -> ID ID DeclArraySize .
    (53) DeclArraySize -> DeclArraySize . [ NUM ]

    ;               reduce using rule 52 (DeclArray -> ID ID DeclArraySize .)
    [               shift and go to state 128


state 96

    (60) DeclAtrib -> ID ID LARROW . AtribOp
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 129
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 97

    (54) DeclArraySize -> [ . NUM ]

    NUM             shift and go to state 130


state 98

    (90) FunCall -> ID ( FunArg . )

    )               shift and go to state 131


state 99

    (91) FunArg -> FunRec .
    (93) FunRec -> FunRec . , AtribOp

    )               reduce using rule 91 (FunArg -> FunRec .)
    ,               shift and go to state 132


state 100

    (94) FunRec -> AtribOp .
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 94 (FunRec -> AtribOp .)
    )               reduce using rule 94 (FunRec -> AtribOp .)
    RARROW          shift and go to state 111


state 101

    (25) FunExtra -> ID .

    RARROW          reduce using rule 25 (FunExtra -> ID .)
    ,               reduce using rule 25 (FunExtra -> ID .)
    {               reduce using rule 25 (FunExtra -> ID .)
    ID              reduce using rule 25 (FunExtra -> ID .)
    STRING          reduce using rule 25 (FunExtra -> ID .)
    IF              reduce using rule 25 (FunExtra -> ID .)
    WHILE           reduce using rule 25 (FunExtra -> ID .)
    SWITCHCOND      reduce using rule 25 (FunExtra -> ID .)
    SWITCHCASE      reduce using rule 25 (FunExtra -> ID .)
    (               reduce using rule 25 (FunExtra -> ID .)
    NUM             reduce using rule 25 (FunExtra -> ID .)
    READ            reduce using rule 25 (FunExtra -> ID .)
    NEG             reduce using rule 25 (FunExtra -> ID .)
    SUB             reduce using rule 25 (FunExtra -> ID .)


state 102

    (17) FunctionHeader -> ID FunScope FunCases .

    {               reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    ID              reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    STRING          reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    IF              reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    WHILE           reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    SWITCHCOND      reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    SWITCHCASE      reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    (               reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    NUM             reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    READ            reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    NEG             reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)
    SUB             reduce using rule 17 (FunctionHeader -> ID FunScope FunCases .)


state 103

    (20) FunCases -> FunExtra . RARROW ID
    (22) FunCases -> FunExtra .
    (24) FunExtra -> FunExtra . , ID

    RARROW          shift and go to state 133
    {               reduce using rule 22 (FunCases -> FunExtra .)
    ID              reduce using rule 22 (FunCases -> FunExtra .)
    STRING          reduce using rule 22 (FunCases -> FunExtra .)
    IF              reduce using rule 22 (FunCases -> FunExtra .)
    WHILE           reduce using rule 22 (FunCases -> FunExtra .)
    SWITCHCOND      reduce using rule 22 (FunCases -> FunExtra .)
    SWITCHCASE      reduce using rule 22 (FunCases -> FunExtra .)
    (               reduce using rule 22 (FunCases -> FunExtra .)
    NUM             reduce using rule 22 (FunCases -> FunExtra .)
    READ            reduce using rule 22 (FunCases -> FunExtra .)
    NEG             reduce using rule 22 (FunCases -> FunExtra .)
    SUB             reduce using rule 22 (FunCases -> FunExtra .)
    ,               shift and go to state 134


state 104

    (21) FunCases -> RARROW . ID

    ID              shift and go to state 135


state 105

    (65) Atrib -> ID LARROW AtribOp .
    (62) AtribNum -> ID LARROW AtribOp .
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 65 (Atrib -> ID LARROW AtribOp .)
    RARROW          shift and go to state 111

  ! RARROW          [ reduce using rule 62 (AtribNum -> ID LARROW AtribOp .) ]


state 106

    (67) Atrib -> ID SWAP ID .

    ;               reduce using rule 67 (Atrib -> ID SWAP ID .)


state 107

    (55) AtribArray -> ID ArraySize LARROW . AtribOp
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 136
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 108

    (58) ArraySize -> ArraySize [ . AtribOp ]
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 137
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 109

    (59) ArraySize -> [ AtribOp . ]
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 138
    RARROW          shift and go to state 111


state 110

    (85) Base -> ( AtribOp ) .

    PRINT           reduce using rule 85 (Base -> ( AtribOp ) .)
    POW             reduce using rule 85 (Base -> ( AtribOp ) .)
    MUL             reduce using rule 85 (Base -> ( AtribOp ) .)
    DIV             reduce using rule 85 (Base -> ( AtribOp ) .)
    ADD             reduce using rule 85 (Base -> ( AtribOp ) .)
    SUB             reduce using rule 85 (Base -> ( AtribOp ) .)
    MOD             reduce using rule 85 (Base -> ( AtribOp ) .)
    DIFF            reduce using rule 85 (Base -> ( AtribOp ) .)
    AND             reduce using rule 85 (Base -> ( AtribOp ) .)
    OR              reduce using rule 85 (Base -> ( AtribOp ) .)
    LESSER          reduce using rule 85 (Base -> ( AtribOp ) .)
    GREATER         reduce using rule 85 (Base -> ( AtribOp ) .)
    LEQ             reduce using rule 85 (Base -> ( AtribOp ) .)
    GEQ             reduce using rule 85 (Base -> ( AtribOp ) .)
    EQUAL           reduce using rule 85 (Base -> ( AtribOp ) .)
    ;               reduce using rule 85 (Base -> ( AtribOp ) .)
    RARROW          reduce using rule 85 (Base -> ( AtribOp ) .)
    )               reduce using rule 85 (Base -> ( AtribOp ) .)
    {               reduce using rule 85 (Base -> ( AtribOp ) .)
    ID              reduce using rule 85 (Base -> ( AtribOp ) .)
    STRING          reduce using rule 85 (Base -> ( AtribOp ) .)
    IF              reduce using rule 85 (Base -> ( AtribOp ) .)
    WHILE           reduce using rule 85 (Base -> ( AtribOp ) .)
    SWITCHCOND      reduce using rule 85 (Base -> ( AtribOp ) .)
    SWITCHCASE      reduce using rule 85 (Base -> ( AtribOp ) .)
    (               reduce using rule 85 (Base -> ( AtribOp ) .)
    NUM             reduce using rule 85 (Base -> ( AtribOp ) .)
    READ            reduce using rule 85 (Base -> ( AtribOp ) .)
    NEG             reduce using rule 85 (Base -> ( AtribOp ) .)
    ,               reduce using rule 85 (Base -> ( AtribOp ) .)
    ]               reduce using rule 85 (Base -> ( AtribOp ) .)


state 111

    (63) AtribNum -> AtribOp RARROW . ID
    (56) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 139


state 112

    (62) AtribNum -> ID LARROW . AtribOp
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 140
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 113

    (27) If -> IfScope AtribOp Body .
    (29) IfElse -> IfScope AtribOp Body . ElseScope Body
    (28) ElseScope -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 27 (If -> IfScope AtribOp Body .)
    STRING          reduce using rule 27 (If -> IfScope AtribOp Body .)
    IF              reduce using rule 27 (If -> IfScope AtribOp Body .)
    WHILE           reduce using rule 27 (If -> IfScope AtribOp Body .)
    SWITCHCOND      reduce using rule 27 (If -> IfScope AtribOp Body .)
    SWITCHCASE      reduce using rule 27 (If -> IfScope AtribOp Body .)
    (               reduce using rule 27 (If -> IfScope AtribOp Body .)
    NUM             reduce using rule 27 (If -> IfScope AtribOp Body .)
    READ            reduce using rule 27 (If -> IfScope AtribOp Body .)
    NEG             reduce using rule 27 (If -> IfScope AtribOp Body .)
    SUB             reduce using rule 27 (If -> IfScope AtribOp Body .)
    $end            reduce using rule 27 (If -> IfScope AtribOp Body .)
    }               reduce using rule 27 (If -> IfScope AtribOp Body .)
    :               reduce using rule 27 (If -> IfScope AtribOp Body .)
    ELSE            shift and go to state 142

  ! ELSE            [ reduce using rule 27 (If -> IfScope AtribOp Body .) ]

    ElseScope                      shift and go to state 141

state 114

    (66) Atrib -> AtribOp RARROW ID .
    (61) DeclAtrib -> AtribOp RARROW ID . ID
    (56) AtribArray -> AtribOp RARROW ID . ArraySize
    (63) AtribNum -> AtribOp RARROW ID .
    (58) ArraySize -> . ArraySize [ AtribOp ]
    (59) ArraySize -> . [ AtribOp ]

    ;               reduce using rule 66 (Atrib -> AtribOp RARROW ID .)
    ID              shift and go to state 143
    RARROW          reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 55

    ArraySize                      shift and go to state 144

state 115

    (31) While -> WhileScope ( AtribOp . ) Body
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 145
    RARROW          shift and go to state 111


state 116

    (34) Switch -> SwitchScope Conds { . Cases }
    (39) Cases -> . Cases Case
    (40) Cases -> . Case
    (41) Case -> . ID : Body
    (42) Case -> . : Body

    ID              shift and go to state 148
    :               shift and go to state 149

    Cases                          shift and go to state 146
    Case                           shift and go to state 147

state 117

    (35) Conds -> Conds , . Cond
    (37) Cond -> . ID ( AtribOp )
    (38) Cond -> . ( AtribOp )

    ID              shift and go to state 67
    (               shift and go to state 68

    Cond                           shift and go to state 150

state 118

    (37) Cond -> ID ( . AtribOp )
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 151
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 119

    (38) Cond -> ( AtribOp . )
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 152
    RARROW          shift and go to state 111


state 120

    (74) OpBin -> OpBin OpLogico TermMod .
    (76) TermMod -> TermMod . OpMod TermPlus
    (103) OpMod -> . MOD

    DIFF            reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    AND             reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    OR              reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    LESSER          reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    GREATER         reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    LEQ             reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    GEQ             reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    EQUAL           reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    ;               reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    RARROW          reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    )               reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    {               reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    ID              reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    STRING          reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    IF              reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    WHILE           reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    SWITCHCOND      reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    SWITCHCASE      reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    (               reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    NUM             reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    READ            reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    NEG             reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    SUB             reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    ,               reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    ]               reduce using rule 74 (OpBin -> OpBin OpLogico TermMod .)
    MOD             shift and go to state 79

    OpMod                          shift and go to state 78

state 121

    (76) TermMod -> TermMod OpMod TermPlus .
    (78) TermPlus -> TermPlus . OpPlus TermMult
    (104) OpPlus -> . ADD
    (105) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    MOD             reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    DIFF            reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    AND             reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    OR              reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    LESSER          reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    GREATER         reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    LEQ             reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    GEQ             reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    EQUAL           reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    ;               reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    RARROW          reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    )               reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    {               reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    ID              reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    STRING          reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    IF              reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    WHILE           reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    SWITCHCOND      reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    SWITCHCASE      reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    (               reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    NUM             reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    READ            reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    NEG             reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    ,               reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    ]               reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .)
    ADD             shift and go to state 81
    SUB             shift and go to state 82

  ! SUB             [ reduce using rule 76 (TermMod -> TermMod OpMod TermPlus .) ]

    OpPlus                         shift and go to state 80

state 122

    (78) TermPlus -> TermPlus OpPlus TermMult .
    (80) TermMult -> TermMult . OpMult TermPow
    (106) OpMult -> . MUL
    (107) OpMult -> . DIV

    ADD             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    SUB             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    MOD             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    DIFF            reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    AND             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    OR              reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    LESSER          reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    GREATER         reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    LEQ             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    GEQ             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    EQUAL           reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    ;               reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    RARROW          reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    )               reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    {               reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    ID              reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    STRING          reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    IF              reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    WHILE           reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCHCOND      reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCHCASE      reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    (               reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    NUM             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    READ            reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    NEG             reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    ,               reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    ]               reduce using rule 78 (TermPlus -> TermPlus OpPlus TermMult .)
    MUL             shift and go to state 84
    DIV             shift and go to state 85

    OpMult                         shift and go to state 83

state 123

    (80) TermMult -> TermMult OpMult TermPow .
    (82) TermPow -> TermPow . OpPow Base
    (108) OpPow -> . POW

    MUL             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    DIV             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    ADD             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    SUB             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    MOD             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    DIFF            reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    AND             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    OR              reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    LESSER          reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    GREATER         reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    LEQ             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    GEQ             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    EQUAL           reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    ;               reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    RARROW          reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    )               reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    {               reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    ID              reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    STRING          reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    IF              reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    WHILE           reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    SWITCHCOND      reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    SWITCHCASE      reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    (               reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    NUM             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    READ            reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    NEG             reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    ,               reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    ]               reduce using rule 80 (TermMult -> TermMult OpMult TermPow .)
    POW             shift and go to state 87

    OpPow                          shift and go to state 86

state 124

    (82) TermPow -> TermPow OpPow Base .
    (73) OpUno -> Base . PRINT

    POW             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    MUL             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    DIV             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    ADD             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    SUB             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    MOD             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    DIFF            reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    AND             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    OR              reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    LESSER          reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    GREATER         reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    LEQ             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    GEQ             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    EQUAL           reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    ;               reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    RARROW          reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    )               reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    {               reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    ID              reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    STRING          reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    IF              reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    WHILE           reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    SWITCHCOND      reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    SWITCHCASE      reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    (               reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    NUM             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    READ            reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    NEG             reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    ,               reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    ]               reduce using rule 82 (TermPow -> TermPow OpPow Base .)
    PRINT           shift and go to state 88


state 125

    (57) AccessArray -> ID ArraySize .
    (58) ArraySize -> ArraySize . [ AtribOp ]

    PRINT           reduce using rule 57 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 57 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 57 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 57 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 57 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 57 (AccessArray -> ID ArraySize .)
    MOD             reduce using rule 57 (AccessArray -> ID ArraySize .)
    DIFF            reduce using rule 57 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 57 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 57 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 57 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 57 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 57 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 57 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 57 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 57 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 57 (AccessArray -> ID ArraySize .)
    )               reduce using rule 57 (AccessArray -> ID ArraySize .)
    {               reduce using rule 57 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 57 (AccessArray -> ID ArraySize .)
    STRING          reduce using rule 57 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 57 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 57 (AccessArray -> ID ArraySize .)
    SWITCHCOND      reduce using rule 57 (AccessArray -> ID ArraySize .)
    SWITCHCASE      reduce using rule 57 (AccessArray -> ID ArraySize .)
    (               reduce using rule 57 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 57 (AccessArray -> ID ArraySize .)
    READ            reduce using rule 57 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 57 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 57 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 57 (AccessArray -> ID ArraySize .)
    [               shift and go to state 108


state 126

    (16) Body -> { Code } .

    ID              reduce using rule 16 (Body -> { Code } .)
    STRING          reduce using rule 16 (Body -> { Code } .)
    IF              reduce using rule 16 (Body -> { Code } .)
    WHILE           reduce using rule 16 (Body -> { Code } .)
    SWITCHCOND      reduce using rule 16 (Body -> { Code } .)
    SWITCHCASE      reduce using rule 16 (Body -> { Code } .)
    (               reduce using rule 16 (Body -> { Code } .)
    NUM             reduce using rule 16 (Body -> { Code } .)
    READ            reduce using rule 16 (Body -> { Code } .)
    NEG             reduce using rule 16 (Body -> { Code } .)
    SUB             reduce using rule 16 (Body -> { Code } .)
    $end            reduce using rule 16 (Body -> { Code } .)
    ELSE            reduce using rule 16 (Body -> { Code } .)
    }               reduce using rule 16 (Body -> { Code } .)
    :               reduce using rule 16 (Body -> { Code } .)


state 127

    (6) Code -> Code Block .

    }               reduce using rule 6 (Code -> Code Block .)
    ID              reduce using rule 6 (Code -> Code Block .)
    STRING          reduce using rule 6 (Code -> Code Block .)
    IF              reduce using rule 6 (Code -> Code Block .)
    WHILE           reduce using rule 6 (Code -> Code Block .)
    SWITCHCOND      reduce using rule 6 (Code -> Code Block .)
    SWITCHCASE      reduce using rule 6 (Code -> Code Block .)
    (               reduce using rule 6 (Code -> Code Block .)
    NUM             reduce using rule 6 (Code -> Code Block .)
    READ            reduce using rule 6 (Code -> Code Block .)
    NEG             reduce using rule 6 (Code -> Code Block .)
    SUB             reduce using rule 6 (Code -> Code Block .)


state 128

    (53) DeclArraySize -> DeclArraySize [ . NUM ]

    NUM             shift and go to state 153


state 129

    (60) DeclAtrib -> ID ID LARROW AtribOp .
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    ;               reduce using rule 60 (DeclAtrib -> ID ID LARROW AtribOp .)
    RARROW          shift and go to state 111


state 130

    (54) DeclArraySize -> [ NUM . ]

    ]               shift and go to state 154


state 131

    (90) FunCall -> ID ( FunArg ) .

    ;               reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    PRINT           reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    POW             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    MUL             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    DIV             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    ADD             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    SUB             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    MOD             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    DIFF            reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    AND             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    OR              reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    LESSER          reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    GREATER         reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    LEQ             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    GEQ             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    EQUAL           reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    RARROW          reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    )               reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    {               reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    ID              reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    STRING          reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    IF              reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    WHILE           reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    SWITCHCOND      reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    SWITCHCASE      reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    (               reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    NUM             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    READ            reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    NEG             reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    ,               reduce using rule 90 (FunCall -> ID ( FunArg ) .)
    ]               reduce using rule 90 (FunCall -> ID ( FunArg ) .)


state 132

    (93) FunRec -> FunRec , . AtribOp
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (69) Op -> . OpBin
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (90) FunCall -> . ID ( FunArg )
    (57) AccessArray -> . ID ArraySize

    ID              shift and go to state 58
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    AtribOp                        shift and go to state 155
    AtribNum                       shift and go to state 30
    Op                             shift and go to state 57
    AtribArray                     shift and go to state 59
    OpBin                          shift and go to state 25
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    FunCall                        shift and go to state 60
    AccessArray                    shift and go to state 40

state 133

    (20) FunCases -> FunExtra RARROW . ID

    ID              shift and go to state 156


state 134

    (24) FunExtra -> FunExtra , . ID

    ID              shift and go to state 157


state 135

    (21) FunCases -> RARROW ID .

    {               reduce using rule 21 (FunCases -> RARROW ID .)
    ID              reduce using rule 21 (FunCases -> RARROW ID .)
    STRING          reduce using rule 21 (FunCases -> RARROW ID .)
    IF              reduce using rule 21 (FunCases -> RARROW ID .)
    WHILE           reduce using rule 21 (FunCases -> RARROW ID .)
    SWITCHCOND      reduce using rule 21 (FunCases -> RARROW ID .)
    SWITCHCASE      reduce using rule 21 (FunCases -> RARROW ID .)
    (               reduce using rule 21 (FunCases -> RARROW ID .)
    NUM             reduce using rule 21 (FunCases -> RARROW ID .)
    READ            reduce using rule 21 (FunCases -> RARROW ID .)
    NEG             reduce using rule 21 (FunCases -> RARROW ID .)
    SUB             reduce using rule 21 (FunCases -> RARROW ID .)


state 136

    (55) AtribArray -> ID ArraySize LARROW AtribOp .
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    )               reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    {               reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ID              reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    STRING          reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    IF              reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    WHILE           reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCHCOND      reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCHCASE      reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    (               reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NUM             reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    READ            reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NEG             reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SUB             reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ,               reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ]               reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .)
    RARROW          shift and go to state 111

  ! RARROW          [ reduce using rule 55 (AtribArray -> ID ArraySize LARROW AtribOp .) ]


state 137

    (58) ArraySize -> ArraySize [ AtribOp . ]
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 158
    RARROW          shift and go to state 111


state 138

    (59) ArraySize -> [ AtribOp ] .

    LARROW          reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    [               reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    PRINT           reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    POW             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    MUL             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    DIV             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    ADD             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    SUB             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    MOD             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    DIFF            reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    AND             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    OR              reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    LESSER          reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    GREATER         reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    LEQ             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    GEQ             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    EQUAL           reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    ;               reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    RARROW          reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    )               reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    {               reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    ID              reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    STRING          reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    IF              reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    WHILE           reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    SWITCHCOND      reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    SWITCHCASE      reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    (               reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    NUM             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    READ            reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    NEG             reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    ,               reduce using rule 59 (ArraySize -> [ AtribOp ] .)
    ]               reduce using rule 59 (ArraySize -> [ AtribOp ] .)


state 139

    (63) AtribNum -> AtribOp RARROW ID .
    (56) AtribArray -> AtribOp RARROW ID . ArraySize
    (58) ArraySize -> . ArraySize [ AtribOp ]
    (59) ArraySize -> . [ AtribOp ]

    )               reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    RARROW          reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    {               reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    ID              reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    STRING          reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    IF              reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    WHILE           reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    SWITCHCOND      reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    SWITCHCASE      reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    (               reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    NUM             reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    READ            reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    NEG             reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    SUB             reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    ,               reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    ;               reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    ]               reduce using rule 63 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 55

    ArraySize                      shift and go to state 144

state 140

    (62) AtribNum -> ID LARROW AtribOp .
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    )               reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    {               reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    ID              reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    STRING          reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    IF              reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    WHILE           reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    SWITCHCOND      reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    SWITCHCASE      reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    (               reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    NUM             reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    READ            reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    NEG             reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    SUB             reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    ,               reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    ;               reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    ]               reduce using rule 62 (AtribNum -> ID LARROW AtribOp .)
    RARROW          shift and go to state 111

  ! RARROW          [ reduce using rule 62 (AtribNum -> ID LARROW AtribOp .) ]


state 141

    (29) IfElse -> IfScope AtribOp Body ElseScope . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    {               shift and go to state 45
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    Body                           shift and go to state 159
    Block                          shift and go to state 46
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 142

    (28) ElseScope -> ELSE .

    {               reduce using rule 28 (ElseScope -> ELSE .)
    ID              reduce using rule 28 (ElseScope -> ELSE .)
    STRING          reduce using rule 28 (ElseScope -> ELSE .)
    IF              reduce using rule 28 (ElseScope -> ELSE .)
    WHILE           reduce using rule 28 (ElseScope -> ELSE .)
    SWITCHCOND      reduce using rule 28 (ElseScope -> ELSE .)
    SWITCHCASE      reduce using rule 28 (ElseScope -> ELSE .)
    (               reduce using rule 28 (ElseScope -> ELSE .)
    NUM             reduce using rule 28 (ElseScope -> ELSE .)
    READ            reduce using rule 28 (ElseScope -> ELSE .)
    NEG             reduce using rule 28 (ElseScope -> ELSE .)
    SUB             reduce using rule 28 (ElseScope -> ELSE .)


state 143

    (61) DeclAtrib -> AtribOp RARROW ID ID .

    ;               reduce using rule 61 (DeclAtrib -> AtribOp RARROW ID ID .)


state 144

    (56) AtribArray -> AtribOp RARROW ID ArraySize .
    (58) ArraySize -> ArraySize . [ AtribOp ]

    ;               reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    RARROW          reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    )               reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    {               reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ID              reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    STRING          reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    IF              reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    WHILE           reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCHCOND      reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCHCASE      reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    (               reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NUM             reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    READ            reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NEG             reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SUB             reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ,               reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ]               reduce using rule 56 (AtribArray -> AtribOp RARROW ID ArraySize .)
    [               shift and go to state 108


state 145

    (31) While -> WhileScope ( AtribOp ) . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    {               shift and go to state 45
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    WhileScope                     shift and go to state 22
    AtribOp                        shift and go to state 21
    Body                           shift and go to state 160
    Block                          shift and go to state 46
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    IfScope                        shift and go to state 20
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 146

    (34) Switch -> SwitchScope Conds { Cases . }
    (39) Cases -> Cases . Case
    (41) Case -> . ID : Body
    (42) Case -> . : Body

    }               shift and go to state 161
    ID              shift and go to state 148
    :               shift and go to state 149

    Case                           shift and go to state 162

state 147

    (40) Cases -> Case .

    }               reduce using rule 40 (Cases -> Case .)
    ID              reduce using rule 40 (Cases -> Case .)
    :               reduce using rule 40 (Cases -> Case .)


state 148

    (41) Case -> ID . : Body

    :               shift and go to state 163


state 149

    (42) Case -> : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    {               shift and go to state 45
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Body                           shift and go to state 164
    Block                          shift and go to state 46
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 150

    (35) Conds -> Conds , Cond .

    {               reduce using rule 35 (Conds -> Conds , Cond .)
    ,               reduce using rule 35 (Conds -> Conds , Cond .)


state 151

    (37) Cond -> ID ( AtribOp . )
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 165
    RARROW          shift and go to state 111


state 152

    (38) Cond -> ( AtribOp ) .

    {               reduce using rule 38 (Cond -> ( AtribOp ) .)
    ,               reduce using rule 38 (Cond -> ( AtribOp ) .)


state 153

    (53) DeclArraySize -> DeclArraySize [ NUM . ]

    ]               shift and go to state 166


state 154

    (54) DeclArraySize -> [ NUM ] .

    [               reduce using rule 54 (DeclArraySize -> [ NUM ] .)
    ;               reduce using rule 54 (DeclArraySize -> [ NUM ] .)


state 155

    (93) FunRec -> FunRec , AtribOp .
    (63) AtribNum -> AtribOp . RARROW ID
    (56) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 93 (FunRec -> FunRec , AtribOp .)
    )               reduce using rule 93 (FunRec -> FunRec , AtribOp .)
    RARROW          shift and go to state 111


state 156

    (20) FunCases -> FunExtra RARROW ID .

    {               reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    ID              reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    STRING          reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    IF              reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    WHILE           reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    SWITCHCOND      reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    SWITCHCASE      reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    (               reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    NUM             reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    READ            reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    NEG             reduce using rule 20 (FunCases -> FunExtra RARROW ID .)
    SUB             reduce using rule 20 (FunCases -> FunExtra RARROW ID .)


state 157

    (24) FunExtra -> FunExtra , ID .

    RARROW          reduce using rule 24 (FunExtra -> FunExtra , ID .)
    ,               reduce using rule 24 (FunExtra -> FunExtra , ID .)
    {               reduce using rule 24 (FunExtra -> FunExtra , ID .)
    ID              reduce using rule 24 (FunExtra -> FunExtra , ID .)
    STRING          reduce using rule 24 (FunExtra -> FunExtra , ID .)
    IF              reduce using rule 24 (FunExtra -> FunExtra , ID .)
    WHILE           reduce using rule 24 (FunExtra -> FunExtra , ID .)
    SWITCHCOND      reduce using rule 24 (FunExtra -> FunExtra , ID .)
    SWITCHCASE      reduce using rule 24 (FunExtra -> FunExtra , ID .)
    (               reduce using rule 24 (FunExtra -> FunExtra , ID .)
    NUM             reduce using rule 24 (FunExtra -> FunExtra , ID .)
    READ            reduce using rule 24 (FunExtra -> FunExtra , ID .)
    NEG             reduce using rule 24 (FunExtra -> FunExtra , ID .)
    SUB             reduce using rule 24 (FunExtra -> FunExtra , ID .)


state 158

    (58) ArraySize -> ArraySize [ AtribOp ] .

    LARROW          reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    [               reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    PRINT           reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    POW             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    MUL             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    DIV             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    ADD             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    SUB             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    MOD             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    DIFF            reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    AND             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    OR              reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    LESSER          reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    GREATER         reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    LEQ             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    GEQ             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    EQUAL           reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    ;               reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    RARROW          reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    )               reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    {               reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    ID              reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    STRING          reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    IF              reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    WHILE           reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCHCOND      reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCHCASE      reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    (               reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    NUM             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    READ            reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    NEG             reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    ,               reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)
    ]               reduce using rule 58 (ArraySize -> ArraySize [ AtribOp ] .)


state 159

    (29) IfElse -> IfScope AtribOp Body ElseScope Body .

    ID              reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    STRING          reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    IF              reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    WHILE           reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCHCOND      reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCHCASE      reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    (               reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NUM             reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    READ            reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NEG             reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SUB             reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    $end            reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    }               reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ELSE            reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    :               reduce using rule 29 (IfElse -> IfScope AtribOp Body ElseScope Body .)


state 160

    (31) While -> WhileScope ( AtribOp ) Body .

    ID              reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    STRING          reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    IF              reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    WHILE           reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    SWITCHCOND      reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    SWITCHCASE      reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    (               reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    NUM             reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    READ            reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    NEG             reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    SUB             reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    $end            reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    }               reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    ELSE            reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)
    :               reduce using rule 31 (While -> WhileScope ( AtribOp ) Body .)


state 161

    (34) Switch -> SwitchScope Conds { Cases } .

    ID              reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    STRING          reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    IF              reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    WHILE           reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    SWITCHCOND      reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    SWITCHCASE      reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    (               reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    NUM             reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    READ            reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    NEG             reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    SUB             reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    $end            reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    }               reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    ELSE            reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)
    :               reduce using rule 34 (Switch -> SwitchScope Conds { Cases } .)


state 162

    (39) Cases -> Cases Case .

    }               reduce using rule 39 (Cases -> Cases Case .)
    ID              reduce using rule 39 (Cases -> Cases Case .)
    :               reduce using rule 39 (Cases -> Cases Case .)


state 163

    (41) Case -> ID : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (90) FunCall -> . ID ( FunArg )
    (43) Exp -> . STRING PRINT
    (44) Exp -> . Atrib
    (45) Exp -> . Op
    (46) Exp -> . Decl
    (47) Exp -> . DeclArray
    (48) Exp -> . DeclAtrib
    (27) If -> . IfScope AtribOp Body
    (29) IfElse -> . IfScope AtribOp Body ElseScope Body
    (31) While -> . WhileScope ( AtribOp ) Body
    (34) Switch -> . SwitchScope Conds { Cases }
    (65) Atrib -> . ID LARROW AtribOp
    (66) Atrib -> . AtribOp RARROW ID
    (67) Atrib -> . ID SWAP ID
    (68) Atrib -> . AtribArray
    (69) Op -> . OpBin
    (51) Decl -> . ID ID
    (52) DeclArray -> . ID ID DeclArraySize
    (60) DeclAtrib -> . ID ID LARROW AtribOp
    (61) DeclAtrib -> . AtribOp RARROW ID ID
    (26) IfScope -> . IF
    (30) WhileScope -> . WHILE
    (32) SwitchScope -> . SWITCHCOND
    (33) SwitchScope -> . SWITCHCASE
    (49) AtribOp -> . AtribNum
    (50) AtribOp -> . Op
    (55) AtribArray -> . ID ArraySize LARROW AtribOp
    (56) AtribArray -> . AtribOp RARROW ID ArraySize
    (74) OpBin -> . OpBin OpLogico TermMod
    (75) OpBin -> . TermMod
    (62) AtribNum -> . ID LARROW AtribOp
    (63) AtribNum -> . AtribOp RARROW ID
    (64) AtribNum -> . AtribArray
    (76) TermMod -> . TermMod OpMod TermPlus
    (77) TermMod -> . TermPlus
    (78) TermPlus -> . TermPlus OpPlus TermMult
    (79) TermPlus -> . TermMult
    (80) TermMult -> . TermMult OpMult TermPow
    (81) TermMult -> . TermPow
    (82) TermPow -> . TermPow OpPow Base
    (83) TermPow -> . Base
    (84) Base -> . OpUno
    (85) Base -> . ( AtribOp )
    (86) Base -> . ID
    (87) Base -> . NUM
    (88) Base -> . FunCall
    (89) Base -> . READ
    (70) OpUno -> . NEG Base
    (71) OpUno -> . AccessArray
    (72) OpUno -> . SUB Base
    (73) OpUno -> . Base PRINT
    (57) AccessArray -> . ID ArraySize

    {               shift and go to state 45
    ID              shift and go to state 47
    STRING          shift and go to state 14
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    SWITCHCOND      shift and go to state 28
    SWITCHCASE      shift and go to state 29
    (               shift and go to state 13
    NUM             shift and go to state 37
    READ            shift and go to state 38
    NEG             shift and go to state 39
    SUB             shift and go to state 41

    Body                           shift and go to state 167
    Block                          shift and go to state 46
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 15
    Op                             shift and go to state 16
    Decl                           shift and go to state 17
    DeclArray                      shift and go to state 18
    DeclAtrib                      shift and go to state 19
    IfScope                        shift and go to state 20
    AtribOp                        shift and go to state 21
    WhileScope                     shift and go to state 22
    SwitchScope                    shift and go to state 23
    AtribArray                     shift and go to state 24
    OpBin                          shift and go to state 25
    AtribNum                       shift and go to state 30
    TermMod                        shift and go to state 31
    TermPlus                       shift and go to state 32
    TermMult                       shift and go to state 33
    TermPow                        shift and go to state 34
    Base                           shift and go to state 35
    OpUno                          shift and go to state 36
    AccessArray                    shift and go to state 40

state 164

    (42) Case -> : Body .

    }               reduce using rule 42 (Case -> : Body .)
    ID              reduce using rule 42 (Case -> : Body .)
    :               reduce using rule 42 (Case -> : Body .)


state 165

    (37) Cond -> ID ( AtribOp ) .

    {               reduce using rule 37 (Cond -> ID ( AtribOp ) .)
    ,               reduce using rule 37 (Cond -> ID ( AtribOp ) .)


state 166

    (53) DeclArraySize -> DeclArraySize [ NUM ] .

    [               reduce using rule 53 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ;               reduce using rule 53 (DeclArraySize -> DeclArraySize [ NUM ] .)


state 167

    (41) Case -> ID : Body .

    }               reduce using rule 41 (Case -> ID : Body .)
    ID              reduce using rule 41 (Case -> ID : Body .)
    :               reduce using rule 41 (Case -> ID : Body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 5 resolved as shift
WARNING: shift/reduce conflict for SUB in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for ( in state 58 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 89 resolved as shift
WARNING: shift/reduce conflict for ( in state 90 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 91 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 105 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 113 resolved as shift
WARNING: shift/reduce conflict for SUB in state 121 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 136 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (Axiom -> <empty>)
WARNING: rejected rule (Start -> <empty>) in state 0

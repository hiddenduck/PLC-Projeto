Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Start
Rule 1     Start -> Axiom
Rule 2     Start -> <empty>
Rule 3     Axiom -> Axiom Block
Rule 4     Axiom -> Axiom Function
Rule 5     Axiom -> <empty>
Rule 6     Code -> Code Block
Rule 7     Code -> Block
Rule 8     Block -> FunCall ;
Rule 9     Block -> Exp ;
Rule 10    Block -> If
Rule 11    Block -> IfElse
Rule 12    Block -> While
Rule 13    Block -> Switch
Rule 14    Body -> { }
Rule 15    Body -> Block
Rule 16    Body -> { Code }
Rule 17    Function -> ID FunScope FunCases Body
Rule 18    FunScope -> :
Rule 19    FunCases -> FunExtra RARROW ID
Rule 20    FunCases -> RARROW ID
Rule 21    FunCases -> FunExtra
Rule 22    FunCases -> <empty>
Rule 23    FunExtra -> FunExtra , ID
Rule 24    FunExtra -> ID
Rule 25    IfScope -> IF
Rule 26    If -> IfScope AtribOp Body
Rule 27    ElseScope -> ELSE
Rule 28    IfElse -> IfScope AtribOp Body ElseScope Body
Rule 29    WhileScope -> WHILE
Rule 30    While -> WhileScope ( AtribOp ) Body
Rule 31    SwitchScope -> SWITCHCOND
Rule 32    SwitchScope -> SWITCHCASE
Rule 33    Switch -> SwitchScope Conds { Cases }
Rule 34    Conds -> Conds , Cond
Rule 35    Conds -> Cond
Rule 36    Cond -> ID ( AtribOp )
Rule 37    Cond -> ( AtribOp )
Rule 38    Cases -> Cases Case
Rule 39    Cases -> Case
Rule 40    Case -> ID : Body
Rule 41    Case -> : Body
Rule 42    Exp -> Atrib
Rule 43    Exp -> Op
Rule 44    Exp -> Decl
Rule 45    Exp -> DeclArray
Rule 46    Exp -> DeclAtrib
Rule 47    AtribOp -> AtribNum
Rule 48    AtribOp -> Op
Rule 49    Decl -> ID ID
Rule 50    DeclArray -> ID ID DeclArraySize
Rule 51    DeclArraySize -> DeclArraySize [ NUM ]
Rule 52    DeclArraySize -> [ NUM ]
Rule 53    AtribArray -> ID ArraySize LARROW AtribOp
Rule 54    AtribArray -> AtribOp RARROW ID ArraySize
Rule 55    ArraySize -> ArraySize [ AtribOp ]
Rule 56    ArraySize -> [ AtribOp ]
Rule 57    DeclAtrib -> ID ID LARROW AtribOp
Rule 58    DeclAtrib -> AtribOp RARROW ID ID
Rule 59    AtribNum -> ID LARROW AtribOp
Rule 60    AtribNum -> AtribOp RARROW ID
Rule 61    AtribNum -> AtribArray
Rule 62    Atrib -> ID LARROW AtribOp
Rule 63    Atrib -> AtribOp RARROW ID
Rule 64    Atrib -> ID SWAP ID
Rule 65    Atrib -> AtribArray
Rule 66    Op -> OpBin
Rule 67    OpUno -> NEG Base
Rule 68    OpUno -> AccessArray
Rule 69    OpUno -> SUB Base
Rule 70    OpUno -> Base PRINT
Rule 71    AccessArray -> ID ArraySize
Rule 72    OpBin -> OpBin OpLogico TermPlus
Rule 73    OpBin -> TermPlus
Rule 74    TermPlus -> TermPlus OpPlus TermMult
Rule 75    TermPlus -> TermMult
Rule 76    TermMult -> TermMult OpMult TermPow
Rule 77    TermMult -> TermPow
Rule 78    TermPow -> TermPow OpPow Base
Rule 79    TermPow -> Base
Rule 80    Base -> OpUno
Rule 81    Base -> ( AtribOp )
Rule 82    Base -> ID
Rule 83    Base -> NUM
Rule 84    Base -> FunCall
Rule 85    Base -> READ
Rule 86    FunCall -> ID ( FunArg )
Rule 87    FunArg -> FunRec
Rule 88    FunArg -> <empty>
Rule 89    FunRec -> FunRec , AtribOp
Rule 90    FunRec -> AtribOp
Rule 91    OpLogico -> AND
Rule 92    OpLogico -> OR
Rule 93    OpLogico -> LESSER
Rule 94    OpLogico -> GREATER
Rule 95    OpLogico -> LEQ
Rule 96    OpLogico -> GEQ
Rule 97    OpLogico -> EQUAL
Rule 98    OpPlus -> ADD
Rule 99    OpPlus -> SUB
Rule 100   OpMult -> MUL
Rule 101   OpMult -> DIV
Rule 102   OpPow -> POW

Terminals, with rules where they appear

(                    : 30 36 37 81 86
)                    : 30 36 37 81 86
,                    : 23 34 89
:                    : 18 40 41
;                    : 8 9
ADD                  : 98
AND                  : 91
DIV                  : 101
ELSE                 : 27
EQUAL                : 97
GEQ                  : 96
GREATER              : 94
ID                   : 17 19 20 23 24 36 40 49 49 50 50 53 54 57 57 58 58 59 60 62 63 64 64 71 82 86
IF                   : 25
LARROW               : 53 57 59 62
LEQ                  : 95
LESSER               : 93
MUL                  : 100
NEG                  : 67
NUM                  : 51 52 83
OR                   : 92
POW                  : 102
PRINT                : 70
RARROW               : 19 20 54 58 60 63
READ                 : 85
SUB                  : 69 99
SWAP                 : 64
SWITCHCASE           : 32
SWITCHCOND           : 31
WHILE                : 29
[                    : 51 52 55 56
]                    : 51 52 55 56
error                : 
{                    : 14 16 33
}                    : 14 16 33

Nonterminals, with rules where they appear

AccessArray          : 68
ArraySize            : 53 54 55 71
Atrib                : 42
AtribArray           : 61 65
AtribNum             : 47
AtribOp              : 26 28 30 36 37 53 54 55 56 57 58 59 60 62 63 81 89 90
Axiom                : 1 3 4
Base                 : 67 69 70 78 79
Block                : 3 6 7 15
Body                 : 17 26 28 28 30 40 41
Case                 : 38 39
Cases                : 33 38
Code                 : 6 16
Cond                 : 34 35
Conds                : 33 34
Decl                 : 44
DeclArray            : 45
DeclArraySize        : 50 51
DeclAtrib            : 46
ElseScope            : 28
Exp                  : 9
FunArg               : 86
FunCall              : 8 84
FunCases             : 17
FunExtra             : 19 21 23
FunRec               : 87 89
FunScope             : 17
Function             : 4
If                   : 10
IfElse               : 11
IfScope              : 26 28
Op                   : 43 48
OpBin                : 66 72
OpLogico             : 72
OpMult               : 76
OpPlus               : 74
OpPow                : 78
OpUno                : 80
Start                : 0
Switch               : 13
SwitchScope          : 33
TermMult             : 74 75 76
TermPlus             : 72 73 74
TermPow              : 76 77 78
While                : 12
WhileScope           : 30

Parsing method: LALR

state 0

    (0) S' -> . Start
    (1) Start -> . Axiom
    (2) Start -> .
    (3) Axiom -> . Axiom Block
    (4) Axiom -> . Axiom Function
    (5) Axiom -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (Start -> .)
    $end            reduce using rule 2 (Start -> .)
    ID              reduce using rule 5 (Axiom -> .)
    IF              reduce using rule 5 (Axiom -> .)
    WHILE           reduce using rule 5 (Axiom -> .)
    SWITCHCOND      reduce using rule 5 (Axiom -> .)
    SWITCHCASE      reduce using rule 5 (Axiom -> .)
    (               reduce using rule 5 (Axiom -> .)
    NUM             reduce using rule 5 (Axiom -> .)
    READ            reduce using rule 5 (Axiom -> .)
    NEG             reduce using rule 5 (Axiom -> .)
    SUB             reduce using rule 5 (Axiom -> .)

  ! $end            [ reduce using rule 5 (Axiom -> .) ]

    Start                          shift and go to state 1
    Axiom                          shift and go to state 2

state 1

    (0) S' -> Start .



state 2

    (1) Start -> Axiom .
    (3) Axiom -> Axiom . Block
    (4) Axiom -> Axiom . Function
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (17) Function -> . ID FunScope FunCases Body
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    $end            reduce using rule 1 (Start -> Axiom .)
    ID              shift and go to state 11
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Block                          shift and go to state 3
    Function                       shift and go to state 4
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 3

    (3) Axiom -> Axiom Block .

    ID              reduce using rule 3 (Axiom -> Axiom Block .)
    IF              reduce using rule 3 (Axiom -> Axiom Block .)
    WHILE           reduce using rule 3 (Axiom -> Axiom Block .)
    SWITCHCOND      reduce using rule 3 (Axiom -> Axiom Block .)
    SWITCHCASE      reduce using rule 3 (Axiom -> Axiom Block .)
    (               reduce using rule 3 (Axiom -> Axiom Block .)
    NUM             reduce using rule 3 (Axiom -> Axiom Block .)
    READ            reduce using rule 3 (Axiom -> Axiom Block .)
    NEG             reduce using rule 3 (Axiom -> Axiom Block .)
    SUB             reduce using rule 3 (Axiom -> Axiom Block .)
    $end            reduce using rule 3 (Axiom -> Axiom Block .)


state 4

    (4) Axiom -> Axiom Function .

    ID              reduce using rule 4 (Axiom -> Axiom Function .)
    IF              reduce using rule 4 (Axiom -> Axiom Function .)
    WHILE           reduce using rule 4 (Axiom -> Axiom Function .)
    SWITCHCOND      reduce using rule 4 (Axiom -> Axiom Function .)
    SWITCHCASE      reduce using rule 4 (Axiom -> Axiom Function .)
    (               reduce using rule 4 (Axiom -> Axiom Function .)
    NUM             reduce using rule 4 (Axiom -> Axiom Function .)
    READ            reduce using rule 4 (Axiom -> Axiom Function .)
    NEG             reduce using rule 4 (Axiom -> Axiom Function .)
    SUB             reduce using rule 4 (Axiom -> Axiom Function .)
    $end            reduce using rule 4 (Axiom -> Axiom Function .)


state 5

    (8) Block -> FunCall . ;
    (84) Base -> FunCall .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 39
    PRINT           reduce using rule 84 (Base -> FunCall .)
    POW             reduce using rule 84 (Base -> FunCall .)
    MUL             reduce using rule 84 (Base -> FunCall .)
    DIV             reduce using rule 84 (Base -> FunCall .)
    ADD             reduce using rule 84 (Base -> FunCall .)
    SUB             reduce using rule 84 (Base -> FunCall .)
    AND             reduce using rule 84 (Base -> FunCall .)
    OR              reduce using rule 84 (Base -> FunCall .)
    LESSER          reduce using rule 84 (Base -> FunCall .)
    GREATER         reduce using rule 84 (Base -> FunCall .)
    LEQ             reduce using rule 84 (Base -> FunCall .)
    GEQ             reduce using rule 84 (Base -> FunCall .)
    EQUAL           reduce using rule 84 (Base -> FunCall .)
    RARROW          reduce using rule 84 (Base -> FunCall .)

  ! ;               [ reduce using rule 84 (Base -> FunCall .) ]


state 6

    (9) Block -> Exp . ;

    ;               shift and go to state 40


state 7

    (10) Block -> If .

    ID              reduce using rule 10 (Block -> If .)
    IF              reduce using rule 10 (Block -> If .)
    WHILE           reduce using rule 10 (Block -> If .)
    SWITCHCOND      reduce using rule 10 (Block -> If .)
    SWITCHCASE      reduce using rule 10 (Block -> If .)
    (               reduce using rule 10 (Block -> If .)
    NUM             reduce using rule 10 (Block -> If .)
    READ            reduce using rule 10 (Block -> If .)
    NEG             reduce using rule 10 (Block -> If .)
    SUB             reduce using rule 10 (Block -> If .)
    $end            reduce using rule 10 (Block -> If .)
    ELSE            reduce using rule 10 (Block -> If .)
    }               reduce using rule 10 (Block -> If .)
    :               reduce using rule 10 (Block -> If .)


state 8

    (11) Block -> IfElse .

    ID              reduce using rule 11 (Block -> IfElse .)
    IF              reduce using rule 11 (Block -> IfElse .)
    WHILE           reduce using rule 11 (Block -> IfElse .)
    SWITCHCOND      reduce using rule 11 (Block -> IfElse .)
    SWITCHCASE      reduce using rule 11 (Block -> IfElse .)
    (               reduce using rule 11 (Block -> IfElse .)
    NUM             reduce using rule 11 (Block -> IfElse .)
    READ            reduce using rule 11 (Block -> IfElse .)
    NEG             reduce using rule 11 (Block -> IfElse .)
    SUB             reduce using rule 11 (Block -> IfElse .)
    $end            reduce using rule 11 (Block -> IfElse .)
    ELSE            reduce using rule 11 (Block -> IfElse .)
    }               reduce using rule 11 (Block -> IfElse .)
    :               reduce using rule 11 (Block -> IfElse .)


state 9

    (12) Block -> While .

    ID              reduce using rule 12 (Block -> While .)
    IF              reduce using rule 12 (Block -> While .)
    WHILE           reduce using rule 12 (Block -> While .)
    SWITCHCOND      reduce using rule 12 (Block -> While .)
    SWITCHCASE      reduce using rule 12 (Block -> While .)
    (               reduce using rule 12 (Block -> While .)
    NUM             reduce using rule 12 (Block -> While .)
    READ            reduce using rule 12 (Block -> While .)
    NEG             reduce using rule 12 (Block -> While .)
    SUB             reduce using rule 12 (Block -> While .)
    $end            reduce using rule 12 (Block -> While .)
    ELSE            reduce using rule 12 (Block -> While .)
    }               reduce using rule 12 (Block -> While .)
    :               reduce using rule 12 (Block -> While .)


state 10

    (13) Block -> Switch .

    ID              reduce using rule 13 (Block -> Switch .)
    IF              reduce using rule 13 (Block -> Switch .)
    WHILE           reduce using rule 13 (Block -> Switch .)
    SWITCHCOND      reduce using rule 13 (Block -> Switch .)
    SWITCHCASE      reduce using rule 13 (Block -> Switch .)
    (               reduce using rule 13 (Block -> Switch .)
    NUM             reduce using rule 13 (Block -> Switch .)
    READ            reduce using rule 13 (Block -> Switch .)
    NEG             reduce using rule 13 (Block -> Switch .)
    SUB             reduce using rule 13 (Block -> Switch .)
    $end            reduce using rule 13 (Block -> Switch .)
    ELSE            reduce using rule 13 (Block -> Switch .)
    }               reduce using rule 13 (Block -> Switch .)
    :               reduce using rule 13 (Block -> Switch .)


state 11

    (17) Function -> ID . FunScope FunCases Body
    (86) FunCall -> ID . ( FunArg )
    (62) Atrib -> ID . LARROW AtribOp
    (64) Atrib -> ID . SWAP ID
    (49) Decl -> ID . ID
    (50) DeclArray -> ID . ID DeclArraySize
    (57) DeclAtrib -> ID . ID LARROW AtribOp
    (53) AtribArray -> ID . ArraySize LARROW AtribOp
    (59) AtribNum -> ID . LARROW AtribOp
    (82) Base -> ID .
    (71) AccessArray -> ID . ArraySize
    (18) FunScope -> . :
    (55) ArraySize -> . ArraySize [ AtribOp ]
    (56) ArraySize -> . [ AtribOp ]

    (               shift and go to state 43
    LARROW          shift and go to state 44
    SWAP            shift and go to state 45
    ID              shift and go to state 41
    PRINT           reduce using rule 82 (Base -> ID .)
    POW             reduce using rule 82 (Base -> ID .)
    MUL             reduce using rule 82 (Base -> ID .)
    DIV             reduce using rule 82 (Base -> ID .)
    ADD             reduce using rule 82 (Base -> ID .)
    SUB             reduce using rule 82 (Base -> ID .)
    AND             reduce using rule 82 (Base -> ID .)
    OR              reduce using rule 82 (Base -> ID .)
    LESSER          reduce using rule 82 (Base -> ID .)
    GREATER         reduce using rule 82 (Base -> ID .)
    LEQ             reduce using rule 82 (Base -> ID .)
    GEQ             reduce using rule 82 (Base -> ID .)
    EQUAL           reduce using rule 82 (Base -> ID .)
    ;               reduce using rule 82 (Base -> ID .)
    RARROW          reduce using rule 82 (Base -> ID .)
    :               shift and go to state 47
    [               shift and go to state 48

    FunScope                       shift and go to state 42
    ArraySize                      shift and go to state 46

state 12

    (81) Base -> ( . AtribOp )
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 49
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 13

    (42) Exp -> Atrib .

    ;               reduce using rule 42 (Exp -> Atrib .)


state 14

    (43) Exp -> Op .
    (48) AtribOp -> Op .

    ;               reduce using rule 43 (Exp -> Op .)
    RARROW          reduce using rule 48 (AtribOp -> Op .)


state 15

    (44) Exp -> Decl .

    ;               reduce using rule 44 (Exp -> Decl .)


state 16

    (45) Exp -> DeclArray .

    ;               reduce using rule 45 (Exp -> DeclArray .)


state 17

    (46) Exp -> DeclAtrib .

    ;               reduce using rule 46 (Exp -> DeclAtrib .)


state 18

    (26) If -> IfScope . AtribOp Body
    (28) IfElse -> IfScope . AtribOp Body ElseScope Body
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 54
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 19

    (63) Atrib -> AtribOp . RARROW ID
    (58) DeclAtrib -> AtribOp . RARROW ID ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize
    (60) AtribNum -> AtribOp . RARROW ID

    RARROW          shift and go to state 55


state 20

    (30) While -> WhileScope . ( AtribOp ) Body

    (               shift and go to state 56


state 21

    (33) Switch -> SwitchScope . Conds { Cases }
    (34) Conds -> . Conds , Cond
    (35) Conds -> . Cond
    (36) Cond -> . ID ( AtribOp )
    (37) Cond -> . ( AtribOp )

    ID              shift and go to state 59
    (               shift and go to state 60

    Conds                          shift and go to state 57
    Cond                           shift and go to state 58

state 22

    (65) Atrib -> AtribArray .
    (61) AtribNum -> AtribArray .

    ;               reduce using rule 65 (Atrib -> AtribArray .)
    RARROW          reduce using rule 61 (AtribNum -> AtribArray .)


state 23

    (66) Op -> OpBin .
    (72) OpBin -> OpBin . OpLogico TermPlus
    (91) OpLogico -> . AND
    (92) OpLogico -> . OR
    (93) OpLogico -> . LESSER
    (94) OpLogico -> . GREATER
    (95) OpLogico -> . LEQ
    (96) OpLogico -> . GEQ
    (97) OpLogico -> . EQUAL

    ;               reduce using rule 66 (Op -> OpBin .)
    RARROW          reduce using rule 66 (Op -> OpBin .)
    )               reduce using rule 66 (Op -> OpBin .)
    {               reduce using rule 66 (Op -> OpBin .)
    ID              reduce using rule 66 (Op -> OpBin .)
    IF              reduce using rule 66 (Op -> OpBin .)
    WHILE           reduce using rule 66 (Op -> OpBin .)
    SWITCHCOND      reduce using rule 66 (Op -> OpBin .)
    SWITCHCASE      reduce using rule 66 (Op -> OpBin .)
    (               reduce using rule 66 (Op -> OpBin .)
    NUM             reduce using rule 66 (Op -> OpBin .)
    READ            reduce using rule 66 (Op -> OpBin .)
    NEG             reduce using rule 66 (Op -> OpBin .)
    SUB             reduce using rule 66 (Op -> OpBin .)
    ,               reduce using rule 66 (Op -> OpBin .)
    ]               reduce using rule 66 (Op -> OpBin .)
    AND             shift and go to state 62
    OR              shift and go to state 63
    LESSER          shift and go to state 64
    GREATER         shift and go to state 65
    LEQ             shift and go to state 66
    GEQ             shift and go to state 67
    EQUAL           shift and go to state 68

    OpLogico                       shift and go to state 61

state 24

    (25) IfScope -> IF .

    ID              reduce using rule 25 (IfScope -> IF .)
    (               reduce using rule 25 (IfScope -> IF .)
    NUM             reduce using rule 25 (IfScope -> IF .)
    READ            reduce using rule 25 (IfScope -> IF .)
    NEG             reduce using rule 25 (IfScope -> IF .)
    SUB             reduce using rule 25 (IfScope -> IF .)


state 25

    (29) WhileScope -> WHILE .

    (               reduce using rule 29 (WhileScope -> WHILE .)


state 26

    (31) SwitchScope -> SWITCHCOND .

    ID              reduce using rule 31 (SwitchScope -> SWITCHCOND .)
    (               reduce using rule 31 (SwitchScope -> SWITCHCOND .)


state 27

    (32) SwitchScope -> SWITCHCASE .

    ID              reduce using rule 32 (SwitchScope -> SWITCHCASE .)
    (               reduce using rule 32 (SwitchScope -> SWITCHCASE .)


state 28

    (47) AtribOp -> AtribNum .

    RARROW          reduce using rule 47 (AtribOp -> AtribNum .)
    )               reduce using rule 47 (AtribOp -> AtribNum .)
    {               reduce using rule 47 (AtribOp -> AtribNum .)
    ID              reduce using rule 47 (AtribOp -> AtribNum .)
    IF              reduce using rule 47 (AtribOp -> AtribNum .)
    WHILE           reduce using rule 47 (AtribOp -> AtribNum .)
    SWITCHCOND      reduce using rule 47 (AtribOp -> AtribNum .)
    SWITCHCASE      reduce using rule 47 (AtribOp -> AtribNum .)
    (               reduce using rule 47 (AtribOp -> AtribNum .)
    NUM             reduce using rule 47 (AtribOp -> AtribNum .)
    READ            reduce using rule 47 (AtribOp -> AtribNum .)
    NEG             reduce using rule 47 (AtribOp -> AtribNum .)
    SUB             reduce using rule 47 (AtribOp -> AtribNum .)
    ,               reduce using rule 47 (AtribOp -> AtribNum .)
    ;               reduce using rule 47 (AtribOp -> AtribNum .)
    ]               reduce using rule 47 (AtribOp -> AtribNum .)


state 29

    (73) OpBin -> TermPlus .
    (74) TermPlus -> TermPlus . OpPlus TermMult
    (98) OpPlus -> . ADD
    (99) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 73 (OpBin -> TermPlus .)
    OR              reduce using rule 73 (OpBin -> TermPlus .)
    LESSER          reduce using rule 73 (OpBin -> TermPlus .)
    GREATER         reduce using rule 73 (OpBin -> TermPlus .)
    LEQ             reduce using rule 73 (OpBin -> TermPlus .)
    GEQ             reduce using rule 73 (OpBin -> TermPlus .)
    EQUAL           reduce using rule 73 (OpBin -> TermPlus .)
    ;               reduce using rule 73 (OpBin -> TermPlus .)
    RARROW          reduce using rule 73 (OpBin -> TermPlus .)
    )               reduce using rule 73 (OpBin -> TermPlus .)
    {               reduce using rule 73 (OpBin -> TermPlus .)
    ID              reduce using rule 73 (OpBin -> TermPlus .)
    IF              reduce using rule 73 (OpBin -> TermPlus .)
    WHILE           reduce using rule 73 (OpBin -> TermPlus .)
    SWITCHCOND      reduce using rule 73 (OpBin -> TermPlus .)
    SWITCHCASE      reduce using rule 73 (OpBin -> TermPlus .)
    (               reduce using rule 73 (OpBin -> TermPlus .)
    NUM             reduce using rule 73 (OpBin -> TermPlus .)
    READ            reduce using rule 73 (OpBin -> TermPlus .)
    NEG             reduce using rule 73 (OpBin -> TermPlus .)
    ,               reduce using rule 73 (OpBin -> TermPlus .)
    ]               reduce using rule 73 (OpBin -> TermPlus .)
    ADD             shift and go to state 70
    SUB             shift and go to state 71

  ! SUB             [ reduce using rule 73 (OpBin -> TermPlus .) ]

    OpPlus                         shift and go to state 69

state 30

    (75) TermPlus -> TermMult .
    (76) TermMult -> TermMult . OpMult TermPow
    (100) OpMult -> . MUL
    (101) OpMult -> . DIV

    ADD             reduce using rule 75 (TermPlus -> TermMult .)
    SUB             reduce using rule 75 (TermPlus -> TermMult .)
    AND             reduce using rule 75 (TermPlus -> TermMult .)
    OR              reduce using rule 75 (TermPlus -> TermMult .)
    LESSER          reduce using rule 75 (TermPlus -> TermMult .)
    GREATER         reduce using rule 75 (TermPlus -> TermMult .)
    LEQ             reduce using rule 75 (TermPlus -> TermMult .)
    GEQ             reduce using rule 75 (TermPlus -> TermMult .)
    EQUAL           reduce using rule 75 (TermPlus -> TermMult .)
    ;               reduce using rule 75 (TermPlus -> TermMult .)
    RARROW          reduce using rule 75 (TermPlus -> TermMult .)
    )               reduce using rule 75 (TermPlus -> TermMult .)
    {               reduce using rule 75 (TermPlus -> TermMult .)
    ID              reduce using rule 75 (TermPlus -> TermMult .)
    IF              reduce using rule 75 (TermPlus -> TermMult .)
    WHILE           reduce using rule 75 (TermPlus -> TermMult .)
    SWITCHCOND      reduce using rule 75 (TermPlus -> TermMult .)
    SWITCHCASE      reduce using rule 75 (TermPlus -> TermMult .)
    (               reduce using rule 75 (TermPlus -> TermMult .)
    NUM             reduce using rule 75 (TermPlus -> TermMult .)
    READ            reduce using rule 75 (TermPlus -> TermMult .)
    NEG             reduce using rule 75 (TermPlus -> TermMult .)
    ,               reduce using rule 75 (TermPlus -> TermMult .)
    ]               reduce using rule 75 (TermPlus -> TermMult .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

    OpMult                         shift and go to state 72

state 31

    (77) TermMult -> TermPow .
    (78) TermPow -> TermPow . OpPow Base
    (102) OpPow -> . POW

    MUL             reduce using rule 77 (TermMult -> TermPow .)
    DIV             reduce using rule 77 (TermMult -> TermPow .)
    ADD             reduce using rule 77 (TermMult -> TermPow .)
    SUB             reduce using rule 77 (TermMult -> TermPow .)
    AND             reduce using rule 77 (TermMult -> TermPow .)
    OR              reduce using rule 77 (TermMult -> TermPow .)
    LESSER          reduce using rule 77 (TermMult -> TermPow .)
    GREATER         reduce using rule 77 (TermMult -> TermPow .)
    LEQ             reduce using rule 77 (TermMult -> TermPow .)
    GEQ             reduce using rule 77 (TermMult -> TermPow .)
    EQUAL           reduce using rule 77 (TermMult -> TermPow .)
    ;               reduce using rule 77 (TermMult -> TermPow .)
    RARROW          reduce using rule 77 (TermMult -> TermPow .)
    )               reduce using rule 77 (TermMult -> TermPow .)
    {               reduce using rule 77 (TermMult -> TermPow .)
    ID              reduce using rule 77 (TermMult -> TermPow .)
    IF              reduce using rule 77 (TermMult -> TermPow .)
    WHILE           reduce using rule 77 (TermMult -> TermPow .)
    SWITCHCOND      reduce using rule 77 (TermMult -> TermPow .)
    SWITCHCASE      reduce using rule 77 (TermMult -> TermPow .)
    (               reduce using rule 77 (TermMult -> TermPow .)
    NUM             reduce using rule 77 (TermMult -> TermPow .)
    READ            reduce using rule 77 (TermMult -> TermPow .)
    NEG             reduce using rule 77 (TermMult -> TermPow .)
    ,               reduce using rule 77 (TermMult -> TermPow .)
    ]               reduce using rule 77 (TermMult -> TermPow .)
    POW             shift and go to state 76

    OpPow                          shift and go to state 75

state 32

    (79) TermPow -> Base .
    (70) OpUno -> Base . PRINT

    POW             reduce using rule 79 (TermPow -> Base .)
    MUL             reduce using rule 79 (TermPow -> Base .)
    DIV             reduce using rule 79 (TermPow -> Base .)
    ADD             reduce using rule 79 (TermPow -> Base .)
    SUB             reduce using rule 79 (TermPow -> Base .)
    AND             reduce using rule 79 (TermPow -> Base .)
    OR              reduce using rule 79 (TermPow -> Base .)
    LESSER          reduce using rule 79 (TermPow -> Base .)
    GREATER         reduce using rule 79 (TermPow -> Base .)
    LEQ             reduce using rule 79 (TermPow -> Base .)
    GEQ             reduce using rule 79 (TermPow -> Base .)
    EQUAL           reduce using rule 79 (TermPow -> Base .)
    ;               reduce using rule 79 (TermPow -> Base .)
    RARROW          reduce using rule 79 (TermPow -> Base .)
    )               reduce using rule 79 (TermPow -> Base .)
    {               reduce using rule 79 (TermPow -> Base .)
    ID              reduce using rule 79 (TermPow -> Base .)
    IF              reduce using rule 79 (TermPow -> Base .)
    WHILE           reduce using rule 79 (TermPow -> Base .)
    SWITCHCOND      reduce using rule 79 (TermPow -> Base .)
    SWITCHCASE      reduce using rule 79 (TermPow -> Base .)
    (               reduce using rule 79 (TermPow -> Base .)
    NUM             reduce using rule 79 (TermPow -> Base .)
    READ            reduce using rule 79 (TermPow -> Base .)
    NEG             reduce using rule 79 (TermPow -> Base .)
    ,               reduce using rule 79 (TermPow -> Base .)
    ]               reduce using rule 79 (TermPow -> Base .)
    PRINT           shift and go to state 77


state 33

    (80) Base -> OpUno .

    PRINT           reduce using rule 80 (Base -> OpUno .)
    POW             reduce using rule 80 (Base -> OpUno .)
    MUL             reduce using rule 80 (Base -> OpUno .)
    DIV             reduce using rule 80 (Base -> OpUno .)
    ADD             reduce using rule 80 (Base -> OpUno .)
    SUB             reduce using rule 80 (Base -> OpUno .)
    AND             reduce using rule 80 (Base -> OpUno .)
    OR              reduce using rule 80 (Base -> OpUno .)
    LESSER          reduce using rule 80 (Base -> OpUno .)
    GREATER         reduce using rule 80 (Base -> OpUno .)
    LEQ             reduce using rule 80 (Base -> OpUno .)
    GEQ             reduce using rule 80 (Base -> OpUno .)
    EQUAL           reduce using rule 80 (Base -> OpUno .)
    ;               reduce using rule 80 (Base -> OpUno .)
    RARROW          reduce using rule 80 (Base -> OpUno .)
    )               reduce using rule 80 (Base -> OpUno .)
    {               reduce using rule 80 (Base -> OpUno .)
    ID              reduce using rule 80 (Base -> OpUno .)
    IF              reduce using rule 80 (Base -> OpUno .)
    WHILE           reduce using rule 80 (Base -> OpUno .)
    SWITCHCOND      reduce using rule 80 (Base -> OpUno .)
    SWITCHCASE      reduce using rule 80 (Base -> OpUno .)
    (               reduce using rule 80 (Base -> OpUno .)
    NUM             reduce using rule 80 (Base -> OpUno .)
    READ            reduce using rule 80 (Base -> OpUno .)
    NEG             reduce using rule 80 (Base -> OpUno .)
    ,               reduce using rule 80 (Base -> OpUno .)
    ]               reduce using rule 80 (Base -> OpUno .)


state 34

    (83) Base -> NUM .

    PRINT           reduce using rule 83 (Base -> NUM .)
    POW             reduce using rule 83 (Base -> NUM .)
    MUL             reduce using rule 83 (Base -> NUM .)
    DIV             reduce using rule 83 (Base -> NUM .)
    ADD             reduce using rule 83 (Base -> NUM .)
    SUB             reduce using rule 83 (Base -> NUM .)
    AND             reduce using rule 83 (Base -> NUM .)
    OR              reduce using rule 83 (Base -> NUM .)
    LESSER          reduce using rule 83 (Base -> NUM .)
    GREATER         reduce using rule 83 (Base -> NUM .)
    LEQ             reduce using rule 83 (Base -> NUM .)
    GEQ             reduce using rule 83 (Base -> NUM .)
    EQUAL           reduce using rule 83 (Base -> NUM .)
    ;               reduce using rule 83 (Base -> NUM .)
    RARROW          reduce using rule 83 (Base -> NUM .)
    )               reduce using rule 83 (Base -> NUM .)
    {               reduce using rule 83 (Base -> NUM .)
    ID              reduce using rule 83 (Base -> NUM .)
    IF              reduce using rule 83 (Base -> NUM .)
    WHILE           reduce using rule 83 (Base -> NUM .)
    SWITCHCOND      reduce using rule 83 (Base -> NUM .)
    SWITCHCASE      reduce using rule 83 (Base -> NUM .)
    (               reduce using rule 83 (Base -> NUM .)
    NUM             reduce using rule 83 (Base -> NUM .)
    READ            reduce using rule 83 (Base -> NUM .)
    NEG             reduce using rule 83 (Base -> NUM .)
    ,               reduce using rule 83 (Base -> NUM .)
    ]               reduce using rule 83 (Base -> NUM .)


state 35

    (85) Base -> READ .

    PRINT           reduce using rule 85 (Base -> READ .)
    POW             reduce using rule 85 (Base -> READ .)
    MUL             reduce using rule 85 (Base -> READ .)
    DIV             reduce using rule 85 (Base -> READ .)
    ADD             reduce using rule 85 (Base -> READ .)
    SUB             reduce using rule 85 (Base -> READ .)
    AND             reduce using rule 85 (Base -> READ .)
    OR              reduce using rule 85 (Base -> READ .)
    LESSER          reduce using rule 85 (Base -> READ .)
    GREATER         reduce using rule 85 (Base -> READ .)
    LEQ             reduce using rule 85 (Base -> READ .)
    GEQ             reduce using rule 85 (Base -> READ .)
    EQUAL           reduce using rule 85 (Base -> READ .)
    ;               reduce using rule 85 (Base -> READ .)
    RARROW          reduce using rule 85 (Base -> READ .)
    )               reduce using rule 85 (Base -> READ .)
    {               reduce using rule 85 (Base -> READ .)
    ID              reduce using rule 85 (Base -> READ .)
    IF              reduce using rule 85 (Base -> READ .)
    WHILE           reduce using rule 85 (Base -> READ .)
    SWITCHCOND      reduce using rule 85 (Base -> READ .)
    SWITCHCASE      reduce using rule 85 (Base -> READ .)
    (               reduce using rule 85 (Base -> READ .)
    NUM             reduce using rule 85 (Base -> READ .)
    READ            reduce using rule 85 (Base -> READ .)
    NEG             reduce using rule 85 (Base -> READ .)
    ,               reduce using rule 85 (Base -> READ .)
    ]               reduce using rule 85 (Base -> READ .)


state 36

    (67) OpUno -> NEG . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 79
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Base                           shift and go to state 78
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 37

    (68) OpUno -> AccessArray .

    PRINT           reduce using rule 68 (OpUno -> AccessArray .)
    POW             reduce using rule 68 (OpUno -> AccessArray .)
    MUL             reduce using rule 68 (OpUno -> AccessArray .)
    DIV             reduce using rule 68 (OpUno -> AccessArray .)
    ADD             reduce using rule 68 (OpUno -> AccessArray .)
    SUB             reduce using rule 68 (OpUno -> AccessArray .)
    AND             reduce using rule 68 (OpUno -> AccessArray .)
    OR              reduce using rule 68 (OpUno -> AccessArray .)
    LESSER          reduce using rule 68 (OpUno -> AccessArray .)
    GREATER         reduce using rule 68 (OpUno -> AccessArray .)
    LEQ             reduce using rule 68 (OpUno -> AccessArray .)
    GEQ             reduce using rule 68 (OpUno -> AccessArray .)
    EQUAL           reduce using rule 68 (OpUno -> AccessArray .)
    ;               reduce using rule 68 (OpUno -> AccessArray .)
    RARROW          reduce using rule 68 (OpUno -> AccessArray .)
    )               reduce using rule 68 (OpUno -> AccessArray .)
    {               reduce using rule 68 (OpUno -> AccessArray .)
    ID              reduce using rule 68 (OpUno -> AccessArray .)
    IF              reduce using rule 68 (OpUno -> AccessArray .)
    WHILE           reduce using rule 68 (OpUno -> AccessArray .)
    SWITCHCOND      reduce using rule 68 (OpUno -> AccessArray .)
    SWITCHCASE      reduce using rule 68 (OpUno -> AccessArray .)
    (               reduce using rule 68 (OpUno -> AccessArray .)
    NUM             reduce using rule 68 (OpUno -> AccessArray .)
    READ            reduce using rule 68 (OpUno -> AccessArray .)
    NEG             reduce using rule 68 (OpUno -> AccessArray .)
    ,               reduce using rule 68 (OpUno -> AccessArray .)
    ]               reduce using rule 68 (OpUno -> AccessArray .)


state 38

    (69) OpUno -> SUB . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 79
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Base                           shift and go to state 80
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 39

    (8) Block -> FunCall ; .

    ID              reduce using rule 8 (Block -> FunCall ; .)
    IF              reduce using rule 8 (Block -> FunCall ; .)
    WHILE           reduce using rule 8 (Block -> FunCall ; .)
    SWITCHCOND      reduce using rule 8 (Block -> FunCall ; .)
    SWITCHCASE      reduce using rule 8 (Block -> FunCall ; .)
    (               reduce using rule 8 (Block -> FunCall ; .)
    NUM             reduce using rule 8 (Block -> FunCall ; .)
    READ            reduce using rule 8 (Block -> FunCall ; .)
    NEG             reduce using rule 8 (Block -> FunCall ; .)
    SUB             reduce using rule 8 (Block -> FunCall ; .)
    $end            reduce using rule 8 (Block -> FunCall ; .)
    ELSE            reduce using rule 8 (Block -> FunCall ; .)
    }               reduce using rule 8 (Block -> FunCall ; .)
    :               reduce using rule 8 (Block -> FunCall ; .)


state 40

    (9) Block -> Exp ; .

    ID              reduce using rule 9 (Block -> Exp ; .)
    IF              reduce using rule 9 (Block -> Exp ; .)
    WHILE           reduce using rule 9 (Block -> Exp ; .)
    SWITCHCOND      reduce using rule 9 (Block -> Exp ; .)
    SWITCHCASE      reduce using rule 9 (Block -> Exp ; .)
    (               reduce using rule 9 (Block -> Exp ; .)
    NUM             reduce using rule 9 (Block -> Exp ; .)
    READ            reduce using rule 9 (Block -> Exp ; .)
    NEG             reduce using rule 9 (Block -> Exp ; .)
    SUB             reduce using rule 9 (Block -> Exp ; .)
    $end            reduce using rule 9 (Block -> Exp ; .)
    ELSE            reduce using rule 9 (Block -> Exp ; .)
    }               reduce using rule 9 (Block -> Exp ; .)
    :               reduce using rule 9 (Block -> Exp ; .)


state 41

    (49) Decl -> ID ID .
    (50) DeclArray -> ID ID . DeclArraySize
    (57) DeclAtrib -> ID ID . LARROW AtribOp
    (51) DeclArraySize -> . DeclArraySize [ NUM ]
    (52) DeclArraySize -> . [ NUM ]

    ;               reduce using rule 49 (Decl -> ID ID .)
    LARROW          shift and go to state 82
    [               shift and go to state 83

    DeclArraySize                  shift and go to state 81

state 42

    (17) Function -> ID FunScope . FunCases Body
    (19) FunCases -> . FunExtra RARROW ID
    (20) FunCases -> . RARROW ID
    (21) FunCases -> . FunExtra
    (22) FunCases -> .
    (23) FunExtra -> . FunExtra , ID
    (24) FunExtra -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RARROW          shift and go to state 87
    {               reduce using rule 22 (FunCases -> .)
    IF              reduce using rule 22 (FunCases -> .)
    WHILE           reduce using rule 22 (FunCases -> .)
    SWITCHCOND      reduce using rule 22 (FunCases -> .)
    SWITCHCASE      reduce using rule 22 (FunCases -> .)
    (               reduce using rule 22 (FunCases -> .)
    NUM             reduce using rule 22 (FunCases -> .)
    READ            reduce using rule 22 (FunCases -> .)
    NEG             reduce using rule 22 (FunCases -> .)
    SUB             reduce using rule 22 (FunCases -> .)
    ID              shift and go to state 84

  ! ID              [ reduce using rule 22 (FunCases -> .) ]

    FunCases                       shift and go to state 85
    FunExtra                       shift and go to state 86

state 43

    (86) FunCall -> ID ( . FunArg )
    (87) FunArg -> . FunRec
    (88) FunArg -> .
    (89) FunRec -> . FunRec , AtribOp
    (90) FunRec -> . AtribOp
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    )               reduce using rule 88 (FunArg -> .)
    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    FunArg                         shift and go to state 88
    FunRec                         shift and go to state 89
    AtribOp                        shift and go to state 90
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 44

    (62) Atrib -> ID LARROW . AtribOp
    (59) AtribNum -> ID LARROW . AtribOp
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 91
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 45

    (64) Atrib -> ID SWAP . ID

    ID              shift and go to state 92


state 46

    (53) AtribArray -> ID ArraySize . LARROW AtribOp
    (71) AccessArray -> ID ArraySize .
    (55) ArraySize -> ArraySize . [ AtribOp ]

    LARROW          shift and go to state 93
    PRINT           reduce using rule 71 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 71 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 71 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 71 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 71 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 71 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 71 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 71 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 71 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 71 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 71 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 71 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 71 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 71 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 71 (AccessArray -> ID ArraySize .)
    )               reduce using rule 71 (AccessArray -> ID ArraySize .)
    {               reduce using rule 71 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 71 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 71 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 71 (AccessArray -> ID ArraySize .)
    SWITCHCOND      reduce using rule 71 (AccessArray -> ID ArraySize .)
    SWITCHCASE      reduce using rule 71 (AccessArray -> ID ArraySize .)
    (               reduce using rule 71 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 71 (AccessArray -> ID ArraySize .)
    READ            reduce using rule 71 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 71 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 71 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 71 (AccessArray -> ID ArraySize .)
    [               shift and go to state 94


state 47

    (18) FunScope -> : .

    RARROW          reduce using rule 18 (FunScope -> : .)
    ID              reduce using rule 18 (FunScope -> : .)
    {               reduce using rule 18 (FunScope -> : .)
    IF              reduce using rule 18 (FunScope -> : .)
    WHILE           reduce using rule 18 (FunScope -> : .)
    SWITCHCOND      reduce using rule 18 (FunScope -> : .)
    SWITCHCASE      reduce using rule 18 (FunScope -> : .)
    (               reduce using rule 18 (FunScope -> : .)
    NUM             reduce using rule 18 (FunScope -> : .)
    READ            reduce using rule 18 (FunScope -> : .)
    NEG             reduce using rule 18 (FunScope -> : .)
    SUB             reduce using rule 18 (FunScope -> : .)


state 48

    (56) ArraySize -> [ . AtribOp ]
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 95
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 49

    (81) Base -> ( AtribOp . )
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 96
    RARROW          shift and go to state 97


state 50

    (48) AtribOp -> Op .

    )               reduce using rule 48 (AtribOp -> Op .)
    RARROW          reduce using rule 48 (AtribOp -> Op .)
    {               reduce using rule 48 (AtribOp -> Op .)
    ID              reduce using rule 48 (AtribOp -> Op .)
    IF              reduce using rule 48 (AtribOp -> Op .)
    WHILE           reduce using rule 48 (AtribOp -> Op .)
    SWITCHCOND      reduce using rule 48 (AtribOp -> Op .)
    SWITCHCASE      reduce using rule 48 (AtribOp -> Op .)
    (               reduce using rule 48 (AtribOp -> Op .)
    NUM             reduce using rule 48 (AtribOp -> Op .)
    READ            reduce using rule 48 (AtribOp -> Op .)
    NEG             reduce using rule 48 (AtribOp -> Op .)
    SUB             reduce using rule 48 (AtribOp -> Op .)
    ,               reduce using rule 48 (AtribOp -> Op .)
    ;               reduce using rule 48 (AtribOp -> Op .)
    ]               reduce using rule 48 (AtribOp -> Op .)


state 51

    (59) AtribNum -> ID . LARROW AtribOp
    (53) AtribArray -> ID . ArraySize LARROW AtribOp
    (82) Base -> ID .
    (86) FunCall -> ID . ( FunArg )
    (71) AccessArray -> ID . ArraySize
    (55) ArraySize -> . ArraySize [ AtribOp ]
    (56) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    LARROW          shift and go to state 98
    PRINT           reduce using rule 82 (Base -> ID .)
    POW             reduce using rule 82 (Base -> ID .)
    MUL             reduce using rule 82 (Base -> ID .)
    DIV             reduce using rule 82 (Base -> ID .)
    ADD             reduce using rule 82 (Base -> ID .)
    SUB             reduce using rule 82 (Base -> ID .)
    AND             reduce using rule 82 (Base -> ID .)
    OR              reduce using rule 82 (Base -> ID .)
    LESSER          reduce using rule 82 (Base -> ID .)
    GREATER         reduce using rule 82 (Base -> ID .)
    LEQ             reduce using rule 82 (Base -> ID .)
    GEQ             reduce using rule 82 (Base -> ID .)
    EQUAL           reduce using rule 82 (Base -> ID .)
    )               reduce using rule 82 (Base -> ID .)
    RARROW          reduce using rule 82 (Base -> ID .)
    {               reduce using rule 82 (Base -> ID .)
    ID              reduce using rule 82 (Base -> ID .)
    IF              reduce using rule 82 (Base -> ID .)
    WHILE           reduce using rule 82 (Base -> ID .)
    SWITCHCOND      reduce using rule 82 (Base -> ID .)
    SWITCHCASE      reduce using rule 82 (Base -> ID .)
    NUM             reduce using rule 82 (Base -> ID .)
    READ            reduce using rule 82 (Base -> ID .)
    NEG             reduce using rule 82 (Base -> ID .)
    ,               reduce using rule 82 (Base -> ID .)
    ;               reduce using rule 82 (Base -> ID .)
    ]               reduce using rule 82 (Base -> ID .)
    (               shift and go to state 43
    [               shift and go to state 48

  ! (               [ reduce using rule 82 (Base -> ID .) ]

    ArraySize                      shift and go to state 46

state 52

    (61) AtribNum -> AtribArray .

    )               reduce using rule 61 (AtribNum -> AtribArray .)
    RARROW          reduce using rule 61 (AtribNum -> AtribArray .)
    {               reduce using rule 61 (AtribNum -> AtribArray .)
    ID              reduce using rule 61 (AtribNum -> AtribArray .)
    IF              reduce using rule 61 (AtribNum -> AtribArray .)
    WHILE           reduce using rule 61 (AtribNum -> AtribArray .)
    SWITCHCOND      reduce using rule 61 (AtribNum -> AtribArray .)
    SWITCHCASE      reduce using rule 61 (AtribNum -> AtribArray .)
    (               reduce using rule 61 (AtribNum -> AtribArray .)
    NUM             reduce using rule 61 (AtribNum -> AtribArray .)
    READ            reduce using rule 61 (AtribNum -> AtribArray .)
    NEG             reduce using rule 61 (AtribNum -> AtribArray .)
    SUB             reduce using rule 61 (AtribNum -> AtribArray .)
    ,               reduce using rule 61 (AtribNum -> AtribArray .)
    ;               reduce using rule 61 (AtribNum -> AtribArray .)
    ]               reduce using rule 61 (AtribNum -> AtribArray .)


state 53

    (84) Base -> FunCall .

    PRINT           reduce using rule 84 (Base -> FunCall .)
    POW             reduce using rule 84 (Base -> FunCall .)
    MUL             reduce using rule 84 (Base -> FunCall .)
    DIV             reduce using rule 84 (Base -> FunCall .)
    ADD             reduce using rule 84 (Base -> FunCall .)
    SUB             reduce using rule 84 (Base -> FunCall .)
    AND             reduce using rule 84 (Base -> FunCall .)
    OR              reduce using rule 84 (Base -> FunCall .)
    LESSER          reduce using rule 84 (Base -> FunCall .)
    GREATER         reduce using rule 84 (Base -> FunCall .)
    LEQ             reduce using rule 84 (Base -> FunCall .)
    GEQ             reduce using rule 84 (Base -> FunCall .)
    EQUAL           reduce using rule 84 (Base -> FunCall .)
    )               reduce using rule 84 (Base -> FunCall .)
    RARROW          reduce using rule 84 (Base -> FunCall .)
    {               reduce using rule 84 (Base -> FunCall .)
    ID              reduce using rule 84 (Base -> FunCall .)
    IF              reduce using rule 84 (Base -> FunCall .)
    WHILE           reduce using rule 84 (Base -> FunCall .)
    SWITCHCOND      reduce using rule 84 (Base -> FunCall .)
    SWITCHCASE      reduce using rule 84 (Base -> FunCall .)
    (               reduce using rule 84 (Base -> FunCall .)
    NUM             reduce using rule 84 (Base -> FunCall .)
    READ            reduce using rule 84 (Base -> FunCall .)
    NEG             reduce using rule 84 (Base -> FunCall .)
    ;               reduce using rule 84 (Base -> FunCall .)
    ,               reduce using rule 84 (Base -> FunCall .)
    ]               reduce using rule 84 (Base -> FunCall .)


state 54

    (26) If -> IfScope AtribOp . Body
    (28) IfElse -> IfScope AtribOp . Body ElseScope Body
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    RARROW          shift and go to state 97
    {               shift and go to state 101
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    Body                           shift and go to state 99
    Block                          shift and go to state 102
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 55

    (63) Atrib -> AtribOp RARROW . ID
    (58) DeclAtrib -> AtribOp RARROW . ID ID
    (54) AtribArray -> AtribOp RARROW . ID ArraySize
    (60) AtribNum -> AtribOp RARROW . ID

    ID              shift and go to state 103


state 56

    (30) While -> WhileScope ( . AtribOp ) Body
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 104
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 57

    (33) Switch -> SwitchScope Conds . { Cases }
    (34) Conds -> Conds . , Cond

    {               shift and go to state 105
    ,               shift and go to state 106


state 58

    (35) Conds -> Cond .

    {               reduce using rule 35 (Conds -> Cond .)
    ,               reduce using rule 35 (Conds -> Cond .)


state 59

    (36) Cond -> ID . ( AtribOp )

    (               shift and go to state 107


state 60

    (37) Cond -> ( . AtribOp )
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 108
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 61

    (72) OpBin -> OpBin OpLogico . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 79
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    TermPlus                       shift and go to state 109
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 62

    (91) OpLogico -> AND .

    (               reduce using rule 91 (OpLogico -> AND .)
    ID              reduce using rule 91 (OpLogico -> AND .)
    NUM             reduce using rule 91 (OpLogico -> AND .)
    READ            reduce using rule 91 (OpLogico -> AND .)
    NEG             reduce using rule 91 (OpLogico -> AND .)
    SUB             reduce using rule 91 (OpLogico -> AND .)


state 63

    (92) OpLogico -> OR .

    (               reduce using rule 92 (OpLogico -> OR .)
    ID              reduce using rule 92 (OpLogico -> OR .)
    NUM             reduce using rule 92 (OpLogico -> OR .)
    READ            reduce using rule 92 (OpLogico -> OR .)
    NEG             reduce using rule 92 (OpLogico -> OR .)
    SUB             reduce using rule 92 (OpLogico -> OR .)


state 64

    (93) OpLogico -> LESSER .

    (               reduce using rule 93 (OpLogico -> LESSER .)
    ID              reduce using rule 93 (OpLogico -> LESSER .)
    NUM             reduce using rule 93 (OpLogico -> LESSER .)
    READ            reduce using rule 93 (OpLogico -> LESSER .)
    NEG             reduce using rule 93 (OpLogico -> LESSER .)
    SUB             reduce using rule 93 (OpLogico -> LESSER .)


state 65

    (94) OpLogico -> GREATER .

    (               reduce using rule 94 (OpLogico -> GREATER .)
    ID              reduce using rule 94 (OpLogico -> GREATER .)
    NUM             reduce using rule 94 (OpLogico -> GREATER .)
    READ            reduce using rule 94 (OpLogico -> GREATER .)
    NEG             reduce using rule 94 (OpLogico -> GREATER .)
    SUB             reduce using rule 94 (OpLogico -> GREATER .)


state 66

    (95) OpLogico -> LEQ .

    (               reduce using rule 95 (OpLogico -> LEQ .)
    ID              reduce using rule 95 (OpLogico -> LEQ .)
    NUM             reduce using rule 95 (OpLogico -> LEQ .)
    READ            reduce using rule 95 (OpLogico -> LEQ .)
    NEG             reduce using rule 95 (OpLogico -> LEQ .)
    SUB             reduce using rule 95 (OpLogico -> LEQ .)


state 67

    (96) OpLogico -> GEQ .

    (               reduce using rule 96 (OpLogico -> GEQ .)
    ID              reduce using rule 96 (OpLogico -> GEQ .)
    NUM             reduce using rule 96 (OpLogico -> GEQ .)
    READ            reduce using rule 96 (OpLogico -> GEQ .)
    NEG             reduce using rule 96 (OpLogico -> GEQ .)
    SUB             reduce using rule 96 (OpLogico -> GEQ .)


state 68

    (97) OpLogico -> EQUAL .

    (               reduce using rule 97 (OpLogico -> EQUAL .)
    ID              reduce using rule 97 (OpLogico -> EQUAL .)
    NUM             reduce using rule 97 (OpLogico -> EQUAL .)
    READ            reduce using rule 97 (OpLogico -> EQUAL .)
    NEG             reduce using rule 97 (OpLogico -> EQUAL .)
    SUB             reduce using rule 97 (OpLogico -> EQUAL .)


state 69

    (74) TermPlus -> TermPlus OpPlus . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 79
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    TermMult                       shift and go to state 110
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 70

    (98) OpPlus -> ADD .

    (               reduce using rule 98 (OpPlus -> ADD .)
    ID              reduce using rule 98 (OpPlus -> ADD .)
    NUM             reduce using rule 98 (OpPlus -> ADD .)
    READ            reduce using rule 98 (OpPlus -> ADD .)
    NEG             reduce using rule 98 (OpPlus -> ADD .)
    SUB             reduce using rule 98 (OpPlus -> ADD .)


state 71

    (99) OpPlus -> SUB .

    (               reduce using rule 99 (OpPlus -> SUB .)
    ID              reduce using rule 99 (OpPlus -> SUB .)
    NUM             reduce using rule 99 (OpPlus -> SUB .)
    READ            reduce using rule 99 (OpPlus -> SUB .)
    NEG             reduce using rule 99 (OpPlus -> SUB .)
    SUB             reduce using rule 99 (OpPlus -> SUB .)


state 72

    (76) TermMult -> TermMult OpMult . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 79
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    TermPow                        shift and go to state 111
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 73

    (100) OpMult -> MUL .

    (               reduce using rule 100 (OpMult -> MUL .)
    ID              reduce using rule 100 (OpMult -> MUL .)
    NUM             reduce using rule 100 (OpMult -> MUL .)
    READ            reduce using rule 100 (OpMult -> MUL .)
    NEG             reduce using rule 100 (OpMult -> MUL .)
    SUB             reduce using rule 100 (OpMult -> MUL .)


state 74

    (101) OpMult -> DIV .

    (               reduce using rule 101 (OpMult -> DIV .)
    ID              reduce using rule 101 (OpMult -> DIV .)
    NUM             reduce using rule 101 (OpMult -> DIV .)
    READ            reduce using rule 101 (OpMult -> DIV .)
    NEG             reduce using rule 101 (OpMult -> DIV .)
    SUB             reduce using rule 101 (OpMult -> DIV .)


state 75

    (78) TermPow -> TermPow OpPow . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 79
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Base                           shift and go to state 112
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 76

    (102) OpPow -> POW .

    (               reduce using rule 102 (OpPow -> POW .)
    ID              reduce using rule 102 (OpPow -> POW .)
    NUM             reduce using rule 102 (OpPow -> POW .)
    READ            reduce using rule 102 (OpPow -> POW .)
    NEG             reduce using rule 102 (OpPow -> POW .)
    SUB             reduce using rule 102 (OpPow -> POW .)


state 77

    (70) OpUno -> Base PRINT .

    PRINT           reduce using rule 70 (OpUno -> Base PRINT .)
    POW             reduce using rule 70 (OpUno -> Base PRINT .)
    MUL             reduce using rule 70 (OpUno -> Base PRINT .)
    DIV             reduce using rule 70 (OpUno -> Base PRINT .)
    ADD             reduce using rule 70 (OpUno -> Base PRINT .)
    SUB             reduce using rule 70 (OpUno -> Base PRINT .)
    AND             reduce using rule 70 (OpUno -> Base PRINT .)
    OR              reduce using rule 70 (OpUno -> Base PRINT .)
    LESSER          reduce using rule 70 (OpUno -> Base PRINT .)
    GREATER         reduce using rule 70 (OpUno -> Base PRINT .)
    LEQ             reduce using rule 70 (OpUno -> Base PRINT .)
    GEQ             reduce using rule 70 (OpUno -> Base PRINT .)
    EQUAL           reduce using rule 70 (OpUno -> Base PRINT .)
    ;               reduce using rule 70 (OpUno -> Base PRINT .)
    RARROW          reduce using rule 70 (OpUno -> Base PRINT .)
    )               reduce using rule 70 (OpUno -> Base PRINT .)
    {               reduce using rule 70 (OpUno -> Base PRINT .)
    ID              reduce using rule 70 (OpUno -> Base PRINT .)
    IF              reduce using rule 70 (OpUno -> Base PRINT .)
    WHILE           reduce using rule 70 (OpUno -> Base PRINT .)
    SWITCHCOND      reduce using rule 70 (OpUno -> Base PRINT .)
    SWITCHCASE      reduce using rule 70 (OpUno -> Base PRINT .)
    (               reduce using rule 70 (OpUno -> Base PRINT .)
    NUM             reduce using rule 70 (OpUno -> Base PRINT .)
    READ            reduce using rule 70 (OpUno -> Base PRINT .)
    NEG             reduce using rule 70 (OpUno -> Base PRINT .)
    ,               reduce using rule 70 (OpUno -> Base PRINT .)
    ]               reduce using rule 70 (OpUno -> Base PRINT .)


state 78

    (67) OpUno -> NEG Base .
    (70) OpUno -> Base . PRINT

  ! shift/reduce conflict for PRINT resolved as shift
    POW             reduce using rule 67 (OpUno -> NEG Base .)
    MUL             reduce using rule 67 (OpUno -> NEG Base .)
    DIV             reduce using rule 67 (OpUno -> NEG Base .)
    ADD             reduce using rule 67 (OpUno -> NEG Base .)
    SUB             reduce using rule 67 (OpUno -> NEG Base .)
    AND             reduce using rule 67 (OpUno -> NEG Base .)
    OR              reduce using rule 67 (OpUno -> NEG Base .)
    LESSER          reduce using rule 67 (OpUno -> NEG Base .)
    GREATER         reduce using rule 67 (OpUno -> NEG Base .)
    LEQ             reduce using rule 67 (OpUno -> NEG Base .)
    GEQ             reduce using rule 67 (OpUno -> NEG Base .)
    EQUAL           reduce using rule 67 (OpUno -> NEG Base .)
    ;               reduce using rule 67 (OpUno -> NEG Base .)
    RARROW          reduce using rule 67 (OpUno -> NEG Base .)
    )               reduce using rule 67 (OpUno -> NEG Base .)
    {               reduce using rule 67 (OpUno -> NEG Base .)
    ID              reduce using rule 67 (OpUno -> NEG Base .)
    IF              reduce using rule 67 (OpUno -> NEG Base .)
    WHILE           reduce using rule 67 (OpUno -> NEG Base .)
    SWITCHCOND      reduce using rule 67 (OpUno -> NEG Base .)
    SWITCHCASE      reduce using rule 67 (OpUno -> NEG Base .)
    (               reduce using rule 67 (OpUno -> NEG Base .)
    NUM             reduce using rule 67 (OpUno -> NEG Base .)
    READ            reduce using rule 67 (OpUno -> NEG Base .)
    NEG             reduce using rule 67 (OpUno -> NEG Base .)
    ,               reduce using rule 67 (OpUno -> NEG Base .)
    ]               reduce using rule 67 (OpUno -> NEG Base .)
    PRINT           shift and go to state 77

  ! PRINT           [ reduce using rule 67 (OpUno -> NEG Base .) ]


state 79

    (82) Base -> ID .
    (86) FunCall -> ID . ( FunArg )
    (71) AccessArray -> ID . ArraySize
    (55) ArraySize -> . ArraySize [ AtribOp ]
    (56) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    PRINT           reduce using rule 82 (Base -> ID .)
    POW             reduce using rule 82 (Base -> ID .)
    MUL             reduce using rule 82 (Base -> ID .)
    DIV             reduce using rule 82 (Base -> ID .)
    ADD             reduce using rule 82 (Base -> ID .)
    SUB             reduce using rule 82 (Base -> ID .)
    AND             reduce using rule 82 (Base -> ID .)
    OR              reduce using rule 82 (Base -> ID .)
    LESSER          reduce using rule 82 (Base -> ID .)
    GREATER         reduce using rule 82 (Base -> ID .)
    LEQ             reduce using rule 82 (Base -> ID .)
    GEQ             reduce using rule 82 (Base -> ID .)
    EQUAL           reduce using rule 82 (Base -> ID .)
    ;               reduce using rule 82 (Base -> ID .)
    RARROW          reduce using rule 82 (Base -> ID .)
    )               reduce using rule 82 (Base -> ID .)
    {               reduce using rule 82 (Base -> ID .)
    ID              reduce using rule 82 (Base -> ID .)
    IF              reduce using rule 82 (Base -> ID .)
    WHILE           reduce using rule 82 (Base -> ID .)
    SWITCHCOND      reduce using rule 82 (Base -> ID .)
    SWITCHCASE      reduce using rule 82 (Base -> ID .)
    NUM             reduce using rule 82 (Base -> ID .)
    READ            reduce using rule 82 (Base -> ID .)
    NEG             reduce using rule 82 (Base -> ID .)
    ,               reduce using rule 82 (Base -> ID .)
    ]               reduce using rule 82 (Base -> ID .)
    (               shift and go to state 43
    [               shift and go to state 48

  ! (               [ reduce using rule 82 (Base -> ID .) ]

    ArraySize                      shift and go to state 113

state 80

    (69) OpUno -> SUB Base .
    (70) OpUno -> Base . PRINT

  ! shift/reduce conflict for PRINT resolved as shift
    POW             reduce using rule 69 (OpUno -> SUB Base .)
    MUL             reduce using rule 69 (OpUno -> SUB Base .)
    DIV             reduce using rule 69 (OpUno -> SUB Base .)
    ADD             reduce using rule 69 (OpUno -> SUB Base .)
    SUB             reduce using rule 69 (OpUno -> SUB Base .)
    AND             reduce using rule 69 (OpUno -> SUB Base .)
    OR              reduce using rule 69 (OpUno -> SUB Base .)
    LESSER          reduce using rule 69 (OpUno -> SUB Base .)
    GREATER         reduce using rule 69 (OpUno -> SUB Base .)
    LEQ             reduce using rule 69 (OpUno -> SUB Base .)
    GEQ             reduce using rule 69 (OpUno -> SUB Base .)
    EQUAL           reduce using rule 69 (OpUno -> SUB Base .)
    ;               reduce using rule 69 (OpUno -> SUB Base .)
    RARROW          reduce using rule 69 (OpUno -> SUB Base .)
    )               reduce using rule 69 (OpUno -> SUB Base .)
    {               reduce using rule 69 (OpUno -> SUB Base .)
    ID              reduce using rule 69 (OpUno -> SUB Base .)
    IF              reduce using rule 69 (OpUno -> SUB Base .)
    WHILE           reduce using rule 69 (OpUno -> SUB Base .)
    SWITCHCOND      reduce using rule 69 (OpUno -> SUB Base .)
    SWITCHCASE      reduce using rule 69 (OpUno -> SUB Base .)
    (               reduce using rule 69 (OpUno -> SUB Base .)
    NUM             reduce using rule 69 (OpUno -> SUB Base .)
    READ            reduce using rule 69 (OpUno -> SUB Base .)
    NEG             reduce using rule 69 (OpUno -> SUB Base .)
    ,               reduce using rule 69 (OpUno -> SUB Base .)
    ]               reduce using rule 69 (OpUno -> SUB Base .)
    PRINT           shift and go to state 77

  ! PRINT           [ reduce using rule 69 (OpUno -> SUB Base .) ]


state 81

    (50) DeclArray -> ID ID DeclArraySize .
    (51) DeclArraySize -> DeclArraySize . [ NUM ]

    ;               reduce using rule 50 (DeclArray -> ID ID DeclArraySize .)
    [               shift and go to state 114


state 82

    (57) DeclAtrib -> ID ID LARROW . AtribOp
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 115
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 83

    (52) DeclArraySize -> [ . NUM ]

    NUM             shift and go to state 116


state 84

    (24) FunExtra -> ID .

    RARROW          reduce using rule 24 (FunExtra -> ID .)
    ,               reduce using rule 24 (FunExtra -> ID .)
    {               reduce using rule 24 (FunExtra -> ID .)
    ID              reduce using rule 24 (FunExtra -> ID .)
    IF              reduce using rule 24 (FunExtra -> ID .)
    WHILE           reduce using rule 24 (FunExtra -> ID .)
    SWITCHCOND      reduce using rule 24 (FunExtra -> ID .)
    SWITCHCASE      reduce using rule 24 (FunExtra -> ID .)
    (               reduce using rule 24 (FunExtra -> ID .)
    NUM             reduce using rule 24 (FunExtra -> ID .)
    READ            reduce using rule 24 (FunExtra -> ID .)
    NEG             reduce using rule 24 (FunExtra -> ID .)
    SUB             reduce using rule 24 (FunExtra -> ID .)


state 85

    (17) Function -> ID FunScope FunCases . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    {               shift and go to state 101
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Body                           shift and go to state 117
    Block                          shift and go to state 102
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 86

    (19) FunCases -> FunExtra . RARROW ID
    (21) FunCases -> FunExtra .
    (23) FunExtra -> FunExtra . , ID

    RARROW          shift and go to state 118
    {               reduce using rule 21 (FunCases -> FunExtra .)
    ID              reduce using rule 21 (FunCases -> FunExtra .)
    IF              reduce using rule 21 (FunCases -> FunExtra .)
    WHILE           reduce using rule 21 (FunCases -> FunExtra .)
    SWITCHCOND      reduce using rule 21 (FunCases -> FunExtra .)
    SWITCHCASE      reduce using rule 21 (FunCases -> FunExtra .)
    (               reduce using rule 21 (FunCases -> FunExtra .)
    NUM             reduce using rule 21 (FunCases -> FunExtra .)
    READ            reduce using rule 21 (FunCases -> FunExtra .)
    NEG             reduce using rule 21 (FunCases -> FunExtra .)
    SUB             reduce using rule 21 (FunCases -> FunExtra .)
    ,               shift and go to state 119


state 87

    (20) FunCases -> RARROW . ID

    ID              shift and go to state 120


state 88

    (86) FunCall -> ID ( FunArg . )

    )               shift and go to state 121


state 89

    (87) FunArg -> FunRec .
    (89) FunRec -> FunRec . , AtribOp

    )               reduce using rule 87 (FunArg -> FunRec .)
    ,               shift and go to state 122


state 90

    (90) FunRec -> AtribOp .
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 90 (FunRec -> AtribOp .)
    )               reduce using rule 90 (FunRec -> AtribOp .)
    RARROW          shift and go to state 97


state 91

    (62) Atrib -> ID LARROW AtribOp .
    (59) AtribNum -> ID LARROW AtribOp .
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 62 (Atrib -> ID LARROW AtribOp .)
    RARROW          shift and go to state 97

  ! RARROW          [ reduce using rule 59 (AtribNum -> ID LARROW AtribOp .) ]


state 92

    (64) Atrib -> ID SWAP ID .

    ;               reduce using rule 64 (Atrib -> ID SWAP ID .)


state 93

    (53) AtribArray -> ID ArraySize LARROW . AtribOp
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 123
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 94

    (55) ArraySize -> ArraySize [ . AtribOp ]
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 124
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 95

    (56) ArraySize -> [ AtribOp . ]
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 125
    RARROW          shift and go to state 97


state 96

    (81) Base -> ( AtribOp ) .

    PRINT           reduce using rule 81 (Base -> ( AtribOp ) .)
    POW             reduce using rule 81 (Base -> ( AtribOp ) .)
    MUL             reduce using rule 81 (Base -> ( AtribOp ) .)
    DIV             reduce using rule 81 (Base -> ( AtribOp ) .)
    ADD             reduce using rule 81 (Base -> ( AtribOp ) .)
    SUB             reduce using rule 81 (Base -> ( AtribOp ) .)
    AND             reduce using rule 81 (Base -> ( AtribOp ) .)
    OR              reduce using rule 81 (Base -> ( AtribOp ) .)
    LESSER          reduce using rule 81 (Base -> ( AtribOp ) .)
    GREATER         reduce using rule 81 (Base -> ( AtribOp ) .)
    LEQ             reduce using rule 81 (Base -> ( AtribOp ) .)
    GEQ             reduce using rule 81 (Base -> ( AtribOp ) .)
    EQUAL           reduce using rule 81 (Base -> ( AtribOp ) .)
    ;               reduce using rule 81 (Base -> ( AtribOp ) .)
    RARROW          reduce using rule 81 (Base -> ( AtribOp ) .)
    )               reduce using rule 81 (Base -> ( AtribOp ) .)
    {               reduce using rule 81 (Base -> ( AtribOp ) .)
    ID              reduce using rule 81 (Base -> ( AtribOp ) .)
    IF              reduce using rule 81 (Base -> ( AtribOp ) .)
    WHILE           reduce using rule 81 (Base -> ( AtribOp ) .)
    SWITCHCOND      reduce using rule 81 (Base -> ( AtribOp ) .)
    SWITCHCASE      reduce using rule 81 (Base -> ( AtribOp ) .)
    (               reduce using rule 81 (Base -> ( AtribOp ) .)
    NUM             reduce using rule 81 (Base -> ( AtribOp ) .)
    READ            reduce using rule 81 (Base -> ( AtribOp ) .)
    NEG             reduce using rule 81 (Base -> ( AtribOp ) .)
    ,               reduce using rule 81 (Base -> ( AtribOp ) .)
    ]               reduce using rule 81 (Base -> ( AtribOp ) .)


state 97

    (60) AtribNum -> AtribOp RARROW . ID
    (54) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 126


state 98

    (59) AtribNum -> ID LARROW . AtribOp
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 127
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 99

    (26) If -> IfScope AtribOp Body .
    (28) IfElse -> IfScope AtribOp Body . ElseScope Body
    (27) ElseScope -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 26 (If -> IfScope AtribOp Body .)
    IF              reduce using rule 26 (If -> IfScope AtribOp Body .)
    WHILE           reduce using rule 26 (If -> IfScope AtribOp Body .)
    SWITCHCOND      reduce using rule 26 (If -> IfScope AtribOp Body .)
    SWITCHCASE      reduce using rule 26 (If -> IfScope AtribOp Body .)
    (               reduce using rule 26 (If -> IfScope AtribOp Body .)
    NUM             reduce using rule 26 (If -> IfScope AtribOp Body .)
    READ            reduce using rule 26 (If -> IfScope AtribOp Body .)
    NEG             reduce using rule 26 (If -> IfScope AtribOp Body .)
    SUB             reduce using rule 26 (If -> IfScope AtribOp Body .)
    $end            reduce using rule 26 (If -> IfScope AtribOp Body .)
    }               reduce using rule 26 (If -> IfScope AtribOp Body .)
    :               reduce using rule 26 (If -> IfScope AtribOp Body .)
    ELSE            shift and go to state 129

  ! ELSE            [ reduce using rule 26 (If -> IfScope AtribOp Body .) ]

    ElseScope                      shift and go to state 128

state 100

    (86) FunCall -> ID . ( FunArg )
    (62) Atrib -> ID . LARROW AtribOp
    (64) Atrib -> ID . SWAP ID
    (49) Decl -> ID . ID
    (50) DeclArray -> ID . ID DeclArraySize
    (57) DeclAtrib -> ID . ID LARROW AtribOp
    (53) AtribArray -> ID . ArraySize LARROW AtribOp
    (59) AtribNum -> ID . LARROW AtribOp
    (82) Base -> ID .
    (71) AccessArray -> ID . ArraySize
    (55) ArraySize -> . ArraySize [ AtribOp ]
    (56) ArraySize -> . [ AtribOp ]

    (               shift and go to state 43
    LARROW          shift and go to state 44
    SWAP            shift and go to state 45
    ID              shift and go to state 41
    PRINT           reduce using rule 82 (Base -> ID .)
    POW             reduce using rule 82 (Base -> ID .)
    MUL             reduce using rule 82 (Base -> ID .)
    DIV             reduce using rule 82 (Base -> ID .)
    ADD             reduce using rule 82 (Base -> ID .)
    SUB             reduce using rule 82 (Base -> ID .)
    AND             reduce using rule 82 (Base -> ID .)
    OR              reduce using rule 82 (Base -> ID .)
    LESSER          reduce using rule 82 (Base -> ID .)
    GREATER         reduce using rule 82 (Base -> ID .)
    LEQ             reduce using rule 82 (Base -> ID .)
    GEQ             reduce using rule 82 (Base -> ID .)
    EQUAL           reduce using rule 82 (Base -> ID .)
    ;               reduce using rule 82 (Base -> ID .)
    RARROW          reduce using rule 82 (Base -> ID .)
    [               shift and go to state 48

    ArraySize                      shift and go to state 46

state 101

    (14) Body -> { . }
    (16) Body -> { . Code }
    (6) Code -> . Code Block
    (7) Code -> . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    }               shift and go to state 130
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Code                           shift and go to state 131
    Block                          shift and go to state 132
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 102

    (15) Body -> Block .

    ELSE            reduce using rule 15 (Body -> Block .)
    ID              reduce using rule 15 (Body -> Block .)
    IF              reduce using rule 15 (Body -> Block .)
    WHILE           reduce using rule 15 (Body -> Block .)
    SWITCHCOND      reduce using rule 15 (Body -> Block .)
    SWITCHCASE      reduce using rule 15 (Body -> Block .)
    (               reduce using rule 15 (Body -> Block .)
    NUM             reduce using rule 15 (Body -> Block .)
    READ            reduce using rule 15 (Body -> Block .)
    NEG             reduce using rule 15 (Body -> Block .)
    SUB             reduce using rule 15 (Body -> Block .)
    $end            reduce using rule 15 (Body -> Block .)
    }               reduce using rule 15 (Body -> Block .)
    :               reduce using rule 15 (Body -> Block .)


state 103

    (63) Atrib -> AtribOp RARROW ID .
    (58) DeclAtrib -> AtribOp RARROW ID . ID
    (54) AtribArray -> AtribOp RARROW ID . ArraySize
    (60) AtribNum -> AtribOp RARROW ID .
    (55) ArraySize -> . ArraySize [ AtribOp ]
    (56) ArraySize -> . [ AtribOp ]

    ;               reduce using rule 63 (Atrib -> AtribOp RARROW ID .)
    ID              shift and go to state 133
    RARROW          reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 48

    ArraySize                      shift and go to state 134

state 104

    (30) While -> WhileScope ( AtribOp . ) Body
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 135
    RARROW          shift and go to state 97


state 105

    (33) Switch -> SwitchScope Conds { . Cases }
    (38) Cases -> . Cases Case
    (39) Cases -> . Case
    (40) Case -> . ID : Body
    (41) Case -> . : Body

    ID              shift and go to state 138
    :               shift and go to state 139

    Cases                          shift and go to state 136
    Case                           shift and go to state 137

state 106

    (34) Conds -> Conds , . Cond
    (36) Cond -> . ID ( AtribOp )
    (37) Cond -> . ( AtribOp )

    ID              shift and go to state 59
    (               shift and go to state 60

    Cond                           shift and go to state 140

state 107

    (36) Cond -> ID ( . AtribOp )
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 141
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 108

    (37) Cond -> ( AtribOp . )
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 142
    RARROW          shift and go to state 97


state 109

    (72) OpBin -> OpBin OpLogico TermPlus .
    (74) TermPlus -> TermPlus . OpPlus TermMult
    (98) OpPlus -> . ADD
    (99) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    OR              reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    LESSER          reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    GREATER         reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    LEQ             reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    GEQ             reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    EQUAL           reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    ;               reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    RARROW          reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    )               reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    {               reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    ID              reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    IF              reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    WHILE           reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCHCOND      reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCHCASE      reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    (               reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    NUM             reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    READ            reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    NEG             reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    ,               reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    ]               reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .)
    ADD             shift and go to state 70
    SUB             shift and go to state 71

  ! SUB             [ reduce using rule 72 (OpBin -> OpBin OpLogico TermPlus .) ]

    OpPlus                         shift and go to state 69

state 110

    (74) TermPlus -> TermPlus OpPlus TermMult .
    (76) TermMult -> TermMult . OpMult TermPow
    (100) OpMult -> . MUL
    (101) OpMult -> . DIV

    ADD             reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    SUB             reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    AND             reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    OR              reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    LESSER          reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    GREATER         reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    LEQ             reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    GEQ             reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    EQUAL           reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    ;               reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    RARROW          reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    )               reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    {               reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    ID              reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    IF              reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    WHILE           reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCHCOND      reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCHCASE      reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    (               reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    NUM             reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    READ            reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    NEG             reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    ,               reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    ]               reduce using rule 74 (TermPlus -> TermPlus OpPlus TermMult .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

    OpMult                         shift and go to state 72

state 111

    (76) TermMult -> TermMult OpMult TermPow .
    (78) TermPow -> TermPow . OpPow Base
    (102) OpPow -> . POW

    MUL             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    DIV             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    ADD             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    SUB             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    AND             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    OR              reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    LESSER          reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    GREATER         reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    LEQ             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    GEQ             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    EQUAL           reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    ;               reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    RARROW          reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    )               reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    {               reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    ID              reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    IF              reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    WHILE           reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    SWITCHCOND      reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    SWITCHCASE      reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    (               reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    NUM             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    READ            reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    NEG             reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    ,               reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    ]               reduce using rule 76 (TermMult -> TermMult OpMult TermPow .)
    POW             shift and go to state 76

    OpPow                          shift and go to state 75

state 112

    (78) TermPow -> TermPow OpPow Base .
    (70) OpUno -> Base . PRINT

    POW             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    MUL             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    DIV             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    ADD             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    SUB             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    AND             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    OR              reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    LESSER          reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    GREATER         reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    LEQ             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    GEQ             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    EQUAL           reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    ;               reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    RARROW          reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    )               reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    {               reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    ID              reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    IF              reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    WHILE           reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    SWITCHCOND      reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    SWITCHCASE      reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    (               reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    NUM             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    READ            reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    NEG             reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    ,               reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    ]               reduce using rule 78 (TermPow -> TermPow OpPow Base .)
    PRINT           shift and go to state 77


state 113

    (71) AccessArray -> ID ArraySize .
    (55) ArraySize -> ArraySize . [ AtribOp ]

    PRINT           reduce using rule 71 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 71 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 71 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 71 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 71 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 71 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 71 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 71 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 71 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 71 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 71 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 71 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 71 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 71 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 71 (AccessArray -> ID ArraySize .)
    )               reduce using rule 71 (AccessArray -> ID ArraySize .)
    {               reduce using rule 71 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 71 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 71 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 71 (AccessArray -> ID ArraySize .)
    SWITCHCOND      reduce using rule 71 (AccessArray -> ID ArraySize .)
    SWITCHCASE      reduce using rule 71 (AccessArray -> ID ArraySize .)
    (               reduce using rule 71 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 71 (AccessArray -> ID ArraySize .)
    READ            reduce using rule 71 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 71 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 71 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 71 (AccessArray -> ID ArraySize .)
    [               shift and go to state 94


state 114

    (51) DeclArraySize -> DeclArraySize [ . NUM ]

    NUM             shift and go to state 143


state 115

    (57) DeclAtrib -> ID ID LARROW AtribOp .
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    ;               reduce using rule 57 (DeclAtrib -> ID ID LARROW AtribOp .)
    RARROW          shift and go to state 97


state 116

    (52) DeclArraySize -> [ NUM . ]

    ]               shift and go to state 144


state 117

    (17) Function -> ID FunScope FunCases Body .

    ID              reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    IF              reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    WHILE           reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SWITCHCOND      reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SWITCHCASE      reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    (               reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    NUM             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    READ            reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    NEG             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SUB             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    $end            reduce using rule 17 (Function -> ID FunScope FunCases Body .)


state 118

    (19) FunCases -> FunExtra RARROW . ID

    ID              shift and go to state 145


state 119

    (23) FunExtra -> FunExtra , . ID

    ID              shift and go to state 146


state 120

    (20) FunCases -> RARROW ID .

    {               reduce using rule 20 (FunCases -> RARROW ID .)
    ID              reduce using rule 20 (FunCases -> RARROW ID .)
    IF              reduce using rule 20 (FunCases -> RARROW ID .)
    WHILE           reduce using rule 20 (FunCases -> RARROW ID .)
    SWITCHCOND      reduce using rule 20 (FunCases -> RARROW ID .)
    SWITCHCASE      reduce using rule 20 (FunCases -> RARROW ID .)
    (               reduce using rule 20 (FunCases -> RARROW ID .)
    NUM             reduce using rule 20 (FunCases -> RARROW ID .)
    READ            reduce using rule 20 (FunCases -> RARROW ID .)
    NEG             reduce using rule 20 (FunCases -> RARROW ID .)
    SUB             reduce using rule 20 (FunCases -> RARROW ID .)


state 121

    (86) FunCall -> ID ( FunArg ) .

    ;               reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    PRINT           reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    POW             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    MUL             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    DIV             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    ADD             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    SUB             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    AND             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    OR              reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    LESSER          reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    GREATER         reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    LEQ             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    GEQ             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    EQUAL           reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    RARROW          reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    )               reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    {               reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    ID              reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    IF              reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    WHILE           reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    SWITCHCOND      reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    SWITCHCASE      reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    (               reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    NUM             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    READ            reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    NEG             reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    ,               reduce using rule 86 (FunCall -> ID ( FunArg ) .)
    ]               reduce using rule 86 (FunCall -> ID ( FunArg ) .)


state 122

    (89) FunRec -> FunRec , . AtribOp
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (66) Op -> . OpBin
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (86) FunCall -> . ID ( FunArg )
    (71) AccessArray -> . ID ArraySize

    ID              shift and go to state 51
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    AtribOp                        shift and go to state 147
    AtribNum                       shift and go to state 28
    Op                             shift and go to state 50
    AtribArray                     shift and go to state 52
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    FunCall                        shift and go to state 53
    AccessArray                    shift and go to state 37

state 123

    (53) AtribArray -> ID ArraySize LARROW AtribOp .
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    )               reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    {               reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ID              reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    IF              reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    WHILE           reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCHCOND      reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCHCASE      reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    (               reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NUM             reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    READ            reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NEG             reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SUB             reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ,               reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ]               reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .)
    RARROW          shift and go to state 97

  ! RARROW          [ reduce using rule 53 (AtribArray -> ID ArraySize LARROW AtribOp .) ]


state 124

    (55) ArraySize -> ArraySize [ AtribOp . ]
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 148
    RARROW          shift and go to state 97


state 125

    (56) ArraySize -> [ AtribOp ] .

    LARROW          reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    [               reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    PRINT           reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    POW             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    MUL             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    DIV             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    ADD             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    SUB             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    AND             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    OR              reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    LESSER          reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    GREATER         reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    LEQ             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    GEQ             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    EQUAL           reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    ;               reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    RARROW          reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    )               reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    {               reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    ID              reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    IF              reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    WHILE           reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    SWITCHCOND      reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    SWITCHCASE      reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    (               reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    NUM             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    READ            reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    NEG             reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    ,               reduce using rule 56 (ArraySize -> [ AtribOp ] .)
    ]               reduce using rule 56 (ArraySize -> [ AtribOp ] .)


state 126

    (60) AtribNum -> AtribOp RARROW ID .
    (54) AtribArray -> AtribOp RARROW ID . ArraySize
    (55) ArraySize -> . ArraySize [ AtribOp ]
    (56) ArraySize -> . [ AtribOp ]

    )               reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    RARROW          reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    {               reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    ID              reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    IF              reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    WHILE           reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    SWITCHCOND      reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    SWITCHCASE      reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    (               reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    NUM             reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    READ            reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    NEG             reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    SUB             reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    ,               reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    ;               reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    ]               reduce using rule 60 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 48

    ArraySize                      shift and go to state 134

state 127

    (59) AtribNum -> ID LARROW AtribOp .
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    )               reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    {               reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    ID              reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    IF              reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    WHILE           reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    SWITCHCOND      reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    SWITCHCASE      reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    (               reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    NUM             reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    READ            reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    NEG             reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    SUB             reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    ,               reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    ;               reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    ]               reduce using rule 59 (AtribNum -> ID LARROW AtribOp .)
    RARROW          shift and go to state 97

  ! RARROW          [ reduce using rule 59 (AtribNum -> ID LARROW AtribOp .) ]


state 128

    (28) IfElse -> IfScope AtribOp Body ElseScope . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    {               shift and go to state 101
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    Body                           shift and go to state 149
    Block                          shift and go to state 102
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 129

    (27) ElseScope -> ELSE .

    {               reduce using rule 27 (ElseScope -> ELSE .)
    ID              reduce using rule 27 (ElseScope -> ELSE .)
    IF              reduce using rule 27 (ElseScope -> ELSE .)
    WHILE           reduce using rule 27 (ElseScope -> ELSE .)
    SWITCHCOND      reduce using rule 27 (ElseScope -> ELSE .)
    SWITCHCASE      reduce using rule 27 (ElseScope -> ELSE .)
    (               reduce using rule 27 (ElseScope -> ELSE .)
    NUM             reduce using rule 27 (ElseScope -> ELSE .)
    READ            reduce using rule 27 (ElseScope -> ELSE .)
    NEG             reduce using rule 27 (ElseScope -> ELSE .)
    SUB             reduce using rule 27 (ElseScope -> ELSE .)


state 130

    (14) Body -> { } .

    ELSE            reduce using rule 14 (Body -> { } .)
    ID              reduce using rule 14 (Body -> { } .)
    IF              reduce using rule 14 (Body -> { } .)
    WHILE           reduce using rule 14 (Body -> { } .)
    SWITCHCOND      reduce using rule 14 (Body -> { } .)
    SWITCHCASE      reduce using rule 14 (Body -> { } .)
    (               reduce using rule 14 (Body -> { } .)
    NUM             reduce using rule 14 (Body -> { } .)
    READ            reduce using rule 14 (Body -> { } .)
    NEG             reduce using rule 14 (Body -> { } .)
    SUB             reduce using rule 14 (Body -> { } .)
    $end            reduce using rule 14 (Body -> { } .)
    }               reduce using rule 14 (Body -> { } .)
    :               reduce using rule 14 (Body -> { } .)


state 131

    (16) Body -> { Code . }
    (6) Code -> Code . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    }               shift and go to state 150
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Block                          shift and go to state 151
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 132

    (7) Code -> Block .

    }               reduce using rule 7 (Code -> Block .)
    ID              reduce using rule 7 (Code -> Block .)
    IF              reduce using rule 7 (Code -> Block .)
    WHILE           reduce using rule 7 (Code -> Block .)
    SWITCHCOND      reduce using rule 7 (Code -> Block .)
    SWITCHCASE      reduce using rule 7 (Code -> Block .)
    (               reduce using rule 7 (Code -> Block .)
    NUM             reduce using rule 7 (Code -> Block .)
    READ            reduce using rule 7 (Code -> Block .)
    NEG             reduce using rule 7 (Code -> Block .)
    SUB             reduce using rule 7 (Code -> Block .)


state 133

    (58) DeclAtrib -> AtribOp RARROW ID ID .

    ;               reduce using rule 58 (DeclAtrib -> AtribOp RARROW ID ID .)


state 134

    (54) AtribArray -> AtribOp RARROW ID ArraySize .
    (55) ArraySize -> ArraySize . [ AtribOp ]

    ;               reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    RARROW          reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    )               reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    {               reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ID              reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    IF              reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    WHILE           reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCHCOND      reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCHCASE      reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    (               reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NUM             reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    READ            reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NEG             reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SUB             reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ,               reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ]               reduce using rule 54 (AtribArray -> AtribOp RARROW ID ArraySize .)
    [               shift and go to state 94


state 135

    (30) While -> WhileScope ( AtribOp ) . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    {               shift and go to state 101
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    WhileScope                     shift and go to state 20
    AtribOp                        shift and go to state 19
    Body                           shift and go to state 152
    Block                          shift and go to state 102
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 136

    (33) Switch -> SwitchScope Conds { Cases . }
    (38) Cases -> Cases . Case
    (40) Case -> . ID : Body
    (41) Case -> . : Body

    }               shift and go to state 153
    ID              shift and go to state 138
    :               shift and go to state 139

    Case                           shift and go to state 154

state 137

    (39) Cases -> Case .

    }               reduce using rule 39 (Cases -> Case .)
    ID              reduce using rule 39 (Cases -> Case .)
    :               reduce using rule 39 (Cases -> Case .)


state 138

    (40) Case -> ID . : Body

    :               shift and go to state 155


state 139

    (41) Case -> : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    {               shift and go to state 101
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Body                           shift and go to state 156
    Block                          shift and go to state 102
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 140

    (34) Conds -> Conds , Cond .

    {               reduce using rule 34 (Conds -> Conds , Cond .)
    ,               reduce using rule 34 (Conds -> Conds , Cond .)


state 141

    (36) Cond -> ID ( AtribOp . )
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 157
    RARROW          shift and go to state 97


state 142

    (37) Cond -> ( AtribOp ) .

    {               reduce using rule 37 (Cond -> ( AtribOp ) .)
    ,               reduce using rule 37 (Cond -> ( AtribOp ) .)


state 143

    (51) DeclArraySize -> DeclArraySize [ NUM . ]

    ]               shift and go to state 158


state 144

    (52) DeclArraySize -> [ NUM ] .

    [               reduce using rule 52 (DeclArraySize -> [ NUM ] .)
    ;               reduce using rule 52 (DeclArraySize -> [ NUM ] .)


state 145

    (19) FunCases -> FunExtra RARROW ID .

    {               reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    ID              reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    IF              reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    WHILE           reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SWITCHCOND      reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SWITCHCASE      reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    (               reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    NUM             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    READ            reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    NEG             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SUB             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)


state 146

    (23) FunExtra -> FunExtra , ID .

    RARROW          reduce using rule 23 (FunExtra -> FunExtra , ID .)
    ,               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    {               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    ID              reduce using rule 23 (FunExtra -> FunExtra , ID .)
    IF              reduce using rule 23 (FunExtra -> FunExtra , ID .)
    WHILE           reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SWITCHCOND      reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SWITCHCASE      reduce using rule 23 (FunExtra -> FunExtra , ID .)
    (               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    NUM             reduce using rule 23 (FunExtra -> FunExtra , ID .)
    READ            reduce using rule 23 (FunExtra -> FunExtra , ID .)
    NEG             reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SUB             reduce using rule 23 (FunExtra -> FunExtra , ID .)


state 147

    (89) FunRec -> FunRec , AtribOp .
    (60) AtribNum -> AtribOp . RARROW ID
    (54) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 89 (FunRec -> FunRec , AtribOp .)
    )               reduce using rule 89 (FunRec -> FunRec , AtribOp .)
    RARROW          shift and go to state 97


state 148

    (55) ArraySize -> ArraySize [ AtribOp ] .

    LARROW          reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    [               reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    PRINT           reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    POW             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    MUL             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    DIV             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    ADD             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    SUB             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    AND             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    OR              reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    LESSER          reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    GREATER         reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    LEQ             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    GEQ             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    EQUAL           reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    ;               reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    RARROW          reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    )               reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    {               reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    ID              reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    IF              reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    WHILE           reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCHCOND      reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCHCASE      reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    (               reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    NUM             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    READ            reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    NEG             reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    ,               reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)
    ]               reduce using rule 55 (ArraySize -> ArraySize [ AtribOp ] .)


state 149

    (28) IfElse -> IfScope AtribOp Body ElseScope Body .

    ID              reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    IF              reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    WHILE           reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCHCOND      reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCHCASE      reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    (               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NUM             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    READ            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NEG             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SUB             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    $end            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ELSE            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    }               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    :               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)


state 150

    (16) Body -> { Code } .

    ELSE            reduce using rule 16 (Body -> { Code } .)
    ID              reduce using rule 16 (Body -> { Code } .)
    IF              reduce using rule 16 (Body -> { Code } .)
    WHILE           reduce using rule 16 (Body -> { Code } .)
    SWITCHCOND      reduce using rule 16 (Body -> { Code } .)
    SWITCHCASE      reduce using rule 16 (Body -> { Code } .)
    (               reduce using rule 16 (Body -> { Code } .)
    NUM             reduce using rule 16 (Body -> { Code } .)
    READ            reduce using rule 16 (Body -> { Code } .)
    NEG             reduce using rule 16 (Body -> { Code } .)
    SUB             reduce using rule 16 (Body -> { Code } .)
    $end            reduce using rule 16 (Body -> { Code } .)
    }               reduce using rule 16 (Body -> { Code } .)
    :               reduce using rule 16 (Body -> { Code } .)


state 151

    (6) Code -> Code Block .

    }               reduce using rule 6 (Code -> Code Block .)
    ID              reduce using rule 6 (Code -> Code Block .)
    IF              reduce using rule 6 (Code -> Code Block .)
    WHILE           reduce using rule 6 (Code -> Code Block .)
    SWITCHCOND      reduce using rule 6 (Code -> Code Block .)
    SWITCHCASE      reduce using rule 6 (Code -> Code Block .)
    (               reduce using rule 6 (Code -> Code Block .)
    NUM             reduce using rule 6 (Code -> Code Block .)
    READ            reduce using rule 6 (Code -> Code Block .)
    NEG             reduce using rule 6 (Code -> Code Block .)
    SUB             reduce using rule 6 (Code -> Code Block .)


state 152

    (30) While -> WhileScope ( AtribOp ) Body .

    ID              reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    IF              reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    WHILE           reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SWITCHCOND      reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SWITCHCASE      reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    (               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    NUM             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    READ            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    NEG             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SUB             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    $end            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    ELSE            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    }               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    :               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)


state 153

    (33) Switch -> SwitchScope Conds { Cases } .

    ID              reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    IF              reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    WHILE           reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    SWITCHCOND      reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    SWITCHCASE      reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    (               reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    NUM             reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    READ            reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    NEG             reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    SUB             reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    $end            reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    ELSE            reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    }               reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    :               reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)


state 154

    (38) Cases -> Cases Case .

    }               reduce using rule 38 (Cases -> Cases Case .)
    ID              reduce using rule 38 (Cases -> Cases Case .)
    :               reduce using rule 38 (Cases -> Cases Case .)


state 155

    (40) Case -> ID : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (86) FunCall -> . ID ( FunArg )
    (42) Exp -> . Atrib
    (43) Exp -> . Op
    (44) Exp -> . Decl
    (45) Exp -> . DeclArray
    (46) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (62) Atrib -> . ID LARROW AtribOp
    (63) Atrib -> . AtribOp RARROW ID
    (64) Atrib -> . ID SWAP ID
    (65) Atrib -> . AtribArray
    (66) Op -> . OpBin
    (49) Decl -> . ID ID
    (50) DeclArray -> . ID ID DeclArraySize
    (57) DeclAtrib -> . ID ID LARROW AtribOp
    (58) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (47) AtribOp -> . AtribNum
    (48) AtribOp -> . Op
    (53) AtribArray -> . ID ArraySize LARROW AtribOp
    (54) AtribArray -> . AtribOp RARROW ID ArraySize
    (72) OpBin -> . OpBin OpLogico TermPlus
    (73) OpBin -> . TermPlus
    (59) AtribNum -> . ID LARROW AtribOp
    (60) AtribNum -> . AtribOp RARROW ID
    (61) AtribNum -> . AtribArray
    (74) TermPlus -> . TermPlus OpPlus TermMult
    (75) TermPlus -> . TermMult
    (76) TermMult -> . TermMult OpMult TermPow
    (77) TermMult -> . TermPow
    (78) TermPow -> . TermPow OpPow Base
    (79) TermPow -> . Base
    (80) Base -> . OpUno
    (81) Base -> . ( AtribOp )
    (82) Base -> . ID
    (83) Base -> . NUM
    (84) Base -> . FunCall
    (85) Base -> . READ
    (67) OpUno -> . NEG Base
    (68) OpUno -> . AccessArray
    (69) OpUno -> . SUB Base
    (70) OpUno -> . Base PRINT
    (71) AccessArray -> . ID ArraySize

    {               shift and go to state 101
    ID              shift and go to state 100
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCHCOND      shift and go to state 26
    SWITCHCASE      shift and go to state 27
    (               shift and go to state 12
    NUM             shift and go to state 34
    READ            shift and go to state 35
    NEG             shift and go to state 36
    SUB             shift and go to state 38

    Body                           shift and go to state 159
    Block                          shift and go to state 102
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 28
    TermPlus                       shift and go to state 29
    TermMult                       shift and go to state 30
    TermPow                        shift and go to state 31
    Base                           shift and go to state 32
    OpUno                          shift and go to state 33
    AccessArray                    shift and go to state 37

state 156

    (41) Case -> : Body .

    }               reduce using rule 41 (Case -> : Body .)
    ID              reduce using rule 41 (Case -> : Body .)
    :               reduce using rule 41 (Case -> : Body .)


state 157

    (36) Cond -> ID ( AtribOp ) .

    {               reduce using rule 36 (Cond -> ID ( AtribOp ) .)
    ,               reduce using rule 36 (Cond -> ID ( AtribOp ) .)


state 158

    (51) DeclArraySize -> DeclArraySize [ NUM ] .

    [               reduce using rule 51 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ;               reduce using rule 51 (DeclArraySize -> DeclArraySize [ NUM ] .)


state 159

    (40) Case -> ID : Body .

    }               reduce using rule 40 (Case -> ID : Body .)
    ID              reduce using rule 40 (Case -> ID : Body .)
    :               reduce using rule 40 (Case -> ID : Body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 5 resolved as shift
WARNING: shift/reduce conflict for SUB in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for ( in state 51 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 78 resolved as shift
WARNING: shift/reduce conflict for ( in state 79 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 80 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 91 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 99 resolved as shift
WARNING: shift/reduce conflict for SUB in state 109 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 123 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (Start -> <empty>)
WARNING: rejected rule (Axiom -> <empty>) in state 0

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Start
Rule 1     Start -> Axiom
Rule 2     Start -> <empty>
Rule 3     Axiom -> Axiom Block
Rule 4     Axiom -> Axiom Function
Rule 5     Axiom -> <empty>
Rule 6     Code -> Code Block
Rule 7     Code -> Block
Rule 8     Block -> FunCall ;
Rule 9     Block -> Exp ;
Rule 10    Block -> If
Rule 11    Block -> IfElse
Rule 12    Block -> While
Rule 13    Block -> Switch
Rule 14    Body -> { }
Rule 15    Body -> Block
Rule 16    Body -> { Code }
Rule 17    Function -> ID FunScope FunCases Body
Rule 18    FunScope -> :
Rule 19    FunCases -> FunExtra RARROW ID
Rule 20    FunCases -> RARROW ID
Rule 21    FunCases -> FunExtra
Rule 22    FunCases -> <empty>
Rule 23    FunExtra -> FunExtra , ID
Rule 24    FunExtra -> ID
Rule 25    IfScope -> IF
Rule 26    If -> IfScope AtribOp Body
Rule 27    ElseScope -> ELSE
Rule 28    IfElse -> IfScope AtribOp Body ElseScope Body
Rule 29    WhileScope -> WHILE
Rule 30    While -> WhileScope ( AtribOp ) Body
Rule 31    SwitchScope -> SWITCH
Rule 32    Switch -> SwitchScope Conds { Cases }
Rule 33    Conds -> Conds , Cond
Rule 34    Conds -> Cond
Rule 35    Cond -> ID ( AtribOp )
Rule 36    Cond -> ( AtribOp )
Rule 37    Cases -> Cases Case
Rule 38    Cases -> Case
Rule 39    Case -> ID : Body
Rule 40    Case -> : Body
Rule 41    Exp -> Atrib
Rule 42    Exp -> Op
Rule 43    Exp -> Decl
Rule 44    Exp -> DeclArray
Rule 45    Exp -> DeclAtrib
Rule 46    AtribOp -> AtribNum
Rule 47    AtribOp -> Op
Rule 48    Decl -> ID ID
Rule 49    DeclArray -> ID ID DeclArraySize
Rule 50    DeclArraySize -> DeclArraySize [ NUM ]
Rule 51    DeclArraySize -> [ NUM ]
Rule 52    AtribArray -> ID ArraySize LARROW AtribOp
Rule 53    AtribArray -> AtribOp RARROW ID ArraySize
Rule 54    ArraySize -> ArraySize [ AtribOp ]
Rule 55    ArraySize -> [ AtribOp ]
Rule 56    DeclAtrib -> ID ID LARROW AtribOp
Rule 57    DeclAtrib -> AtribOp RARROW ID ID
Rule 58    AtribNum -> ID LARROW AtribOp
Rule 59    AtribNum -> AtribOp RARROW ID
Rule 60    AtribNum -> AtribArray
Rule 61    Atrib -> ID LARROW AtribOp
Rule 62    Atrib -> AtribOp RARROW ID
Rule 63    Atrib -> ID SWAP ID
Rule 64    Atrib -> AtribArray
Rule 65    Op -> OpBin
Rule 66    OpUno -> NEG Base
Rule 67    OpUno -> AccessArray
Rule 68    OpUno -> SUB Base
Rule 69    OpUno -> Base ?
Rule 70    AccessArray -> ID ArraySize
Rule 71    OpBin -> OpBin OpLogico TermPlus
Rule 72    OpBin -> TermPlus
Rule 73    TermPlus -> TermPlus OpPlus TermMult
Rule 74    TermPlus -> TermMult
Rule 75    TermMult -> TermMult OpMult TermPow
Rule 76    TermMult -> TermPow
Rule 77    TermPow -> TermPow OpPow Base
Rule 78    TermPow -> Base
Rule 79    Base -> OpUno
Rule 80    Base -> ( AtribOp )
Rule 81    Base -> ID
Rule 82    Base -> NUM
Rule 83    Base -> FunCall
Rule 84    Base -> ¿
Rule 85    FunCall -> ID ( FunArg )
Rule 86    FunArg -> FunRec
Rule 87    FunArg -> <empty>
Rule 88    FunRec -> FunRec , AtribOp
Rule 89    FunRec -> AtribOp
Rule 90    OpLogico -> AND
Rule 91    OpLogico -> OR
Rule 92    OpLogico -> LESSER
Rule 93    OpLogico -> GREATER
Rule 94    OpLogico -> LEQ
Rule 95    OpLogico -> GEQ
Rule 96    OpLogico -> EQUAL
Rule 97    OpPlus -> ADD
Rule 98    OpPlus -> SUB
Rule 99    OpMult -> MUL
Rule 100   OpMult -> DIV
Rule 101   OpPow -> POW

Terminals, with rules where they appear

(                    : 30 35 36 80 85
)                    : 30 35 36 80 85
,                    : 23 33 88
:                    : 18 39 40
;                    : 8 9
?                    : 69
ADD                  : 97
AND                  : 90
DIV                  : 100
ELSE                 : 27
EQUAL                : 96
GEQ                  : 95
GREATER              : 93
ID                   : 17 19 20 23 24 35 39 48 48 49 49 52 53 56 56 57 57 58 59 61 62 63 63 70 81 85
IF                   : 25
LARROW               : 52 56 58 61
LEQ                  : 94
LESSER               : 92
MUL                  : 99
NEG                  : 66
NUM                  : 50 51 82
OR                   : 91
POW                  : 101
RARROW               : 19 20 53 57 59 62
SUB                  : 68 98
SWAP                 : 63
SWITCH               : 31
WHILE                : 29
[                    : 50 51 54 55
]                    : 50 51 54 55
error                : 
{                    : 14 16 32
}                    : 14 16 32
¿                    : 84

Nonterminals, with rules where they appear

AccessArray          : 67
ArraySize            : 52 53 54 70
Atrib                : 41
AtribArray           : 60 64
AtribNum             : 46
AtribOp              : 26 28 30 35 36 52 53 54 55 56 57 58 59 61 62 80 88 89
Axiom                : 1 3 4
Base                 : 66 68 69 77 78
Block                : 3 6 7 15
Body                 : 17 26 28 28 30 39 40
Case                 : 37 38
Cases                : 32 37
Code                 : 6 16
Cond                 : 33 34
Conds                : 32 33
Decl                 : 43
DeclArray            : 44
DeclArraySize        : 49 50
DeclAtrib            : 45
ElseScope            : 28
Exp                  : 9
FunArg               : 85
FunCall              : 8 83
FunCases             : 17
FunExtra             : 19 21 23
FunRec               : 86 88
FunScope             : 17
Function             : 4
If                   : 10
IfElse               : 11
IfScope              : 26 28
Op                   : 42 47
OpBin                : 65 71
OpLogico             : 71
OpMult               : 75
OpPlus               : 73
OpPow                : 77
OpUno                : 79
Start                : 0
Switch               : 13
SwitchScope          : 32
TermMult             : 73 74 75
TermPlus             : 71 72 73
TermPow              : 75 76 77
While                : 12
WhileScope           : 30

Parsing method: LALR

state 0

    (0) S' -> . Start
    (1) Start -> . Axiom
    (2) Start -> .
    (3) Axiom -> . Axiom Block
    (4) Axiom -> . Axiom Function
    (5) Axiom -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (Start -> .)
    $end            reduce using rule 2 (Start -> .)
    ID              reduce using rule 5 (Axiom -> .)
    IF              reduce using rule 5 (Axiom -> .)
    WHILE           reduce using rule 5 (Axiom -> .)
    SWITCH          reduce using rule 5 (Axiom -> .)
    (               reduce using rule 5 (Axiom -> .)
    NUM             reduce using rule 5 (Axiom -> .)
    ¿               reduce using rule 5 (Axiom -> .)
    NEG             reduce using rule 5 (Axiom -> .)
    SUB             reduce using rule 5 (Axiom -> .)

  ! $end            [ reduce using rule 5 (Axiom -> .) ]

    Start                          shift and go to state 1
    Axiom                          shift and go to state 2

state 1

    (0) S' -> Start .



state 2

    (1) Start -> Axiom .
    (3) Axiom -> Axiom . Block
    (4) Axiom -> Axiom . Function
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (17) Function -> . ID FunScope FunCases Body
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    $end            reduce using rule 1 (Start -> Axiom .)
    ID              shift and go to state 11
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Block                          shift and go to state 3
    Function                       shift and go to state 4
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 3

    (3) Axiom -> Axiom Block .

    ID              reduce using rule 3 (Axiom -> Axiom Block .)
    IF              reduce using rule 3 (Axiom -> Axiom Block .)
    WHILE           reduce using rule 3 (Axiom -> Axiom Block .)
    SWITCH          reduce using rule 3 (Axiom -> Axiom Block .)
    (               reduce using rule 3 (Axiom -> Axiom Block .)
    NUM             reduce using rule 3 (Axiom -> Axiom Block .)
    ¿               reduce using rule 3 (Axiom -> Axiom Block .)
    NEG             reduce using rule 3 (Axiom -> Axiom Block .)
    SUB             reduce using rule 3 (Axiom -> Axiom Block .)
    $end            reduce using rule 3 (Axiom -> Axiom Block .)


state 4

    (4) Axiom -> Axiom Function .

    ID              reduce using rule 4 (Axiom -> Axiom Function .)
    IF              reduce using rule 4 (Axiom -> Axiom Function .)
    WHILE           reduce using rule 4 (Axiom -> Axiom Function .)
    SWITCH          reduce using rule 4 (Axiom -> Axiom Function .)
    (               reduce using rule 4 (Axiom -> Axiom Function .)
    NUM             reduce using rule 4 (Axiom -> Axiom Function .)
    ¿               reduce using rule 4 (Axiom -> Axiom Function .)
    NEG             reduce using rule 4 (Axiom -> Axiom Function .)
    SUB             reduce using rule 4 (Axiom -> Axiom Function .)
    $end            reduce using rule 4 (Axiom -> Axiom Function .)


state 5

    (8) Block -> FunCall . ;
    (83) Base -> FunCall .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 38
    ?               reduce using rule 83 (Base -> FunCall .)
    POW             reduce using rule 83 (Base -> FunCall .)
    MUL             reduce using rule 83 (Base -> FunCall .)
    DIV             reduce using rule 83 (Base -> FunCall .)
    ADD             reduce using rule 83 (Base -> FunCall .)
    SUB             reduce using rule 83 (Base -> FunCall .)
    AND             reduce using rule 83 (Base -> FunCall .)
    OR              reduce using rule 83 (Base -> FunCall .)
    LESSER          reduce using rule 83 (Base -> FunCall .)
    GREATER         reduce using rule 83 (Base -> FunCall .)
    LEQ             reduce using rule 83 (Base -> FunCall .)
    GEQ             reduce using rule 83 (Base -> FunCall .)
    EQUAL           reduce using rule 83 (Base -> FunCall .)
    RARROW          reduce using rule 83 (Base -> FunCall .)

  ! ;               [ reduce using rule 83 (Base -> FunCall .) ]


state 6

    (9) Block -> Exp . ;

    ;               shift and go to state 39


state 7

    (10) Block -> If .

    ID              reduce using rule 10 (Block -> If .)
    IF              reduce using rule 10 (Block -> If .)
    WHILE           reduce using rule 10 (Block -> If .)
    SWITCH          reduce using rule 10 (Block -> If .)
    (               reduce using rule 10 (Block -> If .)
    NUM             reduce using rule 10 (Block -> If .)
    ¿               reduce using rule 10 (Block -> If .)
    NEG             reduce using rule 10 (Block -> If .)
    SUB             reduce using rule 10 (Block -> If .)
    $end            reduce using rule 10 (Block -> If .)
    ELSE            reduce using rule 10 (Block -> If .)
    }               reduce using rule 10 (Block -> If .)
    :               reduce using rule 10 (Block -> If .)


state 8

    (11) Block -> IfElse .

    ID              reduce using rule 11 (Block -> IfElse .)
    IF              reduce using rule 11 (Block -> IfElse .)
    WHILE           reduce using rule 11 (Block -> IfElse .)
    SWITCH          reduce using rule 11 (Block -> IfElse .)
    (               reduce using rule 11 (Block -> IfElse .)
    NUM             reduce using rule 11 (Block -> IfElse .)
    ¿               reduce using rule 11 (Block -> IfElse .)
    NEG             reduce using rule 11 (Block -> IfElse .)
    SUB             reduce using rule 11 (Block -> IfElse .)
    $end            reduce using rule 11 (Block -> IfElse .)
    ELSE            reduce using rule 11 (Block -> IfElse .)
    }               reduce using rule 11 (Block -> IfElse .)
    :               reduce using rule 11 (Block -> IfElse .)


state 9

    (12) Block -> While .

    ID              reduce using rule 12 (Block -> While .)
    IF              reduce using rule 12 (Block -> While .)
    WHILE           reduce using rule 12 (Block -> While .)
    SWITCH          reduce using rule 12 (Block -> While .)
    (               reduce using rule 12 (Block -> While .)
    NUM             reduce using rule 12 (Block -> While .)
    ¿               reduce using rule 12 (Block -> While .)
    NEG             reduce using rule 12 (Block -> While .)
    SUB             reduce using rule 12 (Block -> While .)
    $end            reduce using rule 12 (Block -> While .)
    ELSE            reduce using rule 12 (Block -> While .)
    }               reduce using rule 12 (Block -> While .)
    :               reduce using rule 12 (Block -> While .)


state 10

    (13) Block -> Switch .

    ID              reduce using rule 13 (Block -> Switch .)
    IF              reduce using rule 13 (Block -> Switch .)
    WHILE           reduce using rule 13 (Block -> Switch .)
    SWITCH          reduce using rule 13 (Block -> Switch .)
    (               reduce using rule 13 (Block -> Switch .)
    NUM             reduce using rule 13 (Block -> Switch .)
    ¿               reduce using rule 13 (Block -> Switch .)
    NEG             reduce using rule 13 (Block -> Switch .)
    SUB             reduce using rule 13 (Block -> Switch .)
    $end            reduce using rule 13 (Block -> Switch .)
    ELSE            reduce using rule 13 (Block -> Switch .)
    }               reduce using rule 13 (Block -> Switch .)
    :               reduce using rule 13 (Block -> Switch .)


state 11

    (17) Function -> ID . FunScope FunCases Body
    (85) FunCall -> ID . ( FunArg )
    (61) Atrib -> ID . LARROW AtribOp
    (63) Atrib -> ID . SWAP ID
    (48) Decl -> ID . ID
    (49) DeclArray -> ID . ID DeclArraySize
    (56) DeclAtrib -> ID . ID LARROW AtribOp
    (52) AtribArray -> ID . ArraySize LARROW AtribOp
    (58) AtribNum -> ID . LARROW AtribOp
    (81) Base -> ID .
    (70) AccessArray -> ID . ArraySize
    (18) FunScope -> . :
    (54) ArraySize -> . ArraySize [ AtribOp ]
    (55) ArraySize -> . [ AtribOp ]

    (               shift and go to state 42
    LARROW          shift and go to state 43
    SWAP            shift and go to state 44
    ID              shift and go to state 40
    ?               reduce using rule 81 (Base -> ID .)
    POW             reduce using rule 81 (Base -> ID .)
    MUL             reduce using rule 81 (Base -> ID .)
    DIV             reduce using rule 81 (Base -> ID .)
    ADD             reduce using rule 81 (Base -> ID .)
    SUB             reduce using rule 81 (Base -> ID .)
    AND             reduce using rule 81 (Base -> ID .)
    OR              reduce using rule 81 (Base -> ID .)
    LESSER          reduce using rule 81 (Base -> ID .)
    GREATER         reduce using rule 81 (Base -> ID .)
    LEQ             reduce using rule 81 (Base -> ID .)
    GEQ             reduce using rule 81 (Base -> ID .)
    EQUAL           reduce using rule 81 (Base -> ID .)
    ;               reduce using rule 81 (Base -> ID .)
    RARROW          reduce using rule 81 (Base -> ID .)
    :               shift and go to state 46
    [               shift and go to state 47

    FunScope                       shift and go to state 41
    ArraySize                      shift and go to state 45

state 12

    (80) Base -> ( . AtribOp )
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 48
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 13

    (41) Exp -> Atrib .

    ;               reduce using rule 41 (Exp -> Atrib .)


state 14

    (42) Exp -> Op .
    (47) AtribOp -> Op .

    ;               reduce using rule 42 (Exp -> Op .)
    RARROW          reduce using rule 47 (AtribOp -> Op .)


state 15

    (43) Exp -> Decl .

    ;               reduce using rule 43 (Exp -> Decl .)


state 16

    (44) Exp -> DeclArray .

    ;               reduce using rule 44 (Exp -> DeclArray .)


state 17

    (45) Exp -> DeclAtrib .

    ;               reduce using rule 45 (Exp -> DeclAtrib .)


state 18

    (26) If -> IfScope . AtribOp Body
    (28) IfElse -> IfScope . AtribOp Body ElseScope Body
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 53
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 19

    (62) Atrib -> AtribOp . RARROW ID
    (57) DeclAtrib -> AtribOp . RARROW ID ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize
    (59) AtribNum -> AtribOp . RARROW ID

    RARROW          shift and go to state 54


state 20

    (30) While -> WhileScope . ( AtribOp ) Body

    (               shift and go to state 55


state 21

    (32) Switch -> SwitchScope . Conds { Cases }
    (33) Conds -> . Conds , Cond
    (34) Conds -> . Cond
    (35) Cond -> . ID ( AtribOp )
    (36) Cond -> . ( AtribOp )

    ID              shift and go to state 58
    (               shift and go to state 59

    Conds                          shift and go to state 56
    Cond                           shift and go to state 57

state 22

    (64) Atrib -> AtribArray .
    (60) AtribNum -> AtribArray .

    ;               reduce using rule 64 (Atrib -> AtribArray .)
    RARROW          reduce using rule 60 (AtribNum -> AtribArray .)


state 23

    (65) Op -> OpBin .
    (71) OpBin -> OpBin . OpLogico TermPlus
    (90) OpLogico -> . AND
    (91) OpLogico -> . OR
    (92) OpLogico -> . LESSER
    (93) OpLogico -> . GREATER
    (94) OpLogico -> . LEQ
    (95) OpLogico -> . GEQ
    (96) OpLogico -> . EQUAL

    ;               reduce using rule 65 (Op -> OpBin .)
    RARROW          reduce using rule 65 (Op -> OpBin .)
    )               reduce using rule 65 (Op -> OpBin .)
    {               reduce using rule 65 (Op -> OpBin .)
    ID              reduce using rule 65 (Op -> OpBin .)
    IF              reduce using rule 65 (Op -> OpBin .)
    WHILE           reduce using rule 65 (Op -> OpBin .)
    SWITCH          reduce using rule 65 (Op -> OpBin .)
    (               reduce using rule 65 (Op -> OpBin .)
    NUM             reduce using rule 65 (Op -> OpBin .)
    ¿               reduce using rule 65 (Op -> OpBin .)
    NEG             reduce using rule 65 (Op -> OpBin .)
    SUB             reduce using rule 65 (Op -> OpBin .)
    ,               reduce using rule 65 (Op -> OpBin .)
    ]               reduce using rule 65 (Op -> OpBin .)
    AND             shift and go to state 61
    OR              shift and go to state 62
    LESSER          shift and go to state 63
    GREATER         shift and go to state 64
    LEQ             shift and go to state 65
    GEQ             shift and go to state 66
    EQUAL           shift and go to state 67

    OpLogico                       shift and go to state 60

state 24

    (25) IfScope -> IF .

    ID              reduce using rule 25 (IfScope -> IF .)
    (               reduce using rule 25 (IfScope -> IF .)
    NUM             reduce using rule 25 (IfScope -> IF .)
    ¿               reduce using rule 25 (IfScope -> IF .)
    NEG             reduce using rule 25 (IfScope -> IF .)
    SUB             reduce using rule 25 (IfScope -> IF .)


state 25

    (29) WhileScope -> WHILE .

    (               reduce using rule 29 (WhileScope -> WHILE .)


state 26

    (31) SwitchScope -> SWITCH .

    ID              reduce using rule 31 (SwitchScope -> SWITCH .)
    (               reduce using rule 31 (SwitchScope -> SWITCH .)


state 27

    (46) AtribOp -> AtribNum .

    RARROW          reduce using rule 46 (AtribOp -> AtribNum .)
    )               reduce using rule 46 (AtribOp -> AtribNum .)
    {               reduce using rule 46 (AtribOp -> AtribNum .)
    ID              reduce using rule 46 (AtribOp -> AtribNum .)
    IF              reduce using rule 46 (AtribOp -> AtribNum .)
    WHILE           reduce using rule 46 (AtribOp -> AtribNum .)
    SWITCH          reduce using rule 46 (AtribOp -> AtribNum .)
    (               reduce using rule 46 (AtribOp -> AtribNum .)
    NUM             reduce using rule 46 (AtribOp -> AtribNum .)
    ¿               reduce using rule 46 (AtribOp -> AtribNum .)
    NEG             reduce using rule 46 (AtribOp -> AtribNum .)
    SUB             reduce using rule 46 (AtribOp -> AtribNum .)
    ,               reduce using rule 46 (AtribOp -> AtribNum .)
    ;               reduce using rule 46 (AtribOp -> AtribNum .)
    ]               reduce using rule 46 (AtribOp -> AtribNum .)


state 28

    (72) OpBin -> TermPlus .
    (73) TermPlus -> TermPlus . OpPlus TermMult
    (97) OpPlus -> . ADD
    (98) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 72 (OpBin -> TermPlus .)
    OR              reduce using rule 72 (OpBin -> TermPlus .)
    LESSER          reduce using rule 72 (OpBin -> TermPlus .)
    GREATER         reduce using rule 72 (OpBin -> TermPlus .)
    LEQ             reduce using rule 72 (OpBin -> TermPlus .)
    GEQ             reduce using rule 72 (OpBin -> TermPlus .)
    EQUAL           reduce using rule 72 (OpBin -> TermPlus .)
    ;               reduce using rule 72 (OpBin -> TermPlus .)
    RARROW          reduce using rule 72 (OpBin -> TermPlus .)
    )               reduce using rule 72 (OpBin -> TermPlus .)
    {               reduce using rule 72 (OpBin -> TermPlus .)
    ID              reduce using rule 72 (OpBin -> TermPlus .)
    IF              reduce using rule 72 (OpBin -> TermPlus .)
    WHILE           reduce using rule 72 (OpBin -> TermPlus .)
    SWITCH          reduce using rule 72 (OpBin -> TermPlus .)
    (               reduce using rule 72 (OpBin -> TermPlus .)
    NUM             reduce using rule 72 (OpBin -> TermPlus .)
    ¿               reduce using rule 72 (OpBin -> TermPlus .)
    NEG             reduce using rule 72 (OpBin -> TermPlus .)
    ,               reduce using rule 72 (OpBin -> TermPlus .)
    ]               reduce using rule 72 (OpBin -> TermPlus .)
    ADD             shift and go to state 69
    SUB             shift and go to state 70

  ! SUB             [ reduce using rule 72 (OpBin -> TermPlus .) ]

    OpPlus                         shift and go to state 68

state 29

    (74) TermPlus -> TermMult .
    (75) TermMult -> TermMult . OpMult TermPow
    (99) OpMult -> . MUL
    (100) OpMult -> . DIV

    ADD             reduce using rule 74 (TermPlus -> TermMult .)
    SUB             reduce using rule 74 (TermPlus -> TermMult .)
    AND             reduce using rule 74 (TermPlus -> TermMult .)
    OR              reduce using rule 74 (TermPlus -> TermMult .)
    LESSER          reduce using rule 74 (TermPlus -> TermMult .)
    GREATER         reduce using rule 74 (TermPlus -> TermMult .)
    LEQ             reduce using rule 74 (TermPlus -> TermMult .)
    GEQ             reduce using rule 74 (TermPlus -> TermMult .)
    EQUAL           reduce using rule 74 (TermPlus -> TermMult .)
    ;               reduce using rule 74 (TermPlus -> TermMult .)
    RARROW          reduce using rule 74 (TermPlus -> TermMult .)
    )               reduce using rule 74 (TermPlus -> TermMult .)
    {               reduce using rule 74 (TermPlus -> TermMult .)
    ID              reduce using rule 74 (TermPlus -> TermMult .)
    IF              reduce using rule 74 (TermPlus -> TermMult .)
    WHILE           reduce using rule 74 (TermPlus -> TermMult .)
    SWITCH          reduce using rule 74 (TermPlus -> TermMult .)
    (               reduce using rule 74 (TermPlus -> TermMult .)
    NUM             reduce using rule 74 (TermPlus -> TermMult .)
    ¿               reduce using rule 74 (TermPlus -> TermMult .)
    NEG             reduce using rule 74 (TermPlus -> TermMult .)
    ,               reduce using rule 74 (TermPlus -> TermMult .)
    ]               reduce using rule 74 (TermPlus -> TermMult .)
    MUL             shift and go to state 72
    DIV             shift and go to state 73

    OpMult                         shift and go to state 71

state 30

    (76) TermMult -> TermPow .
    (77) TermPow -> TermPow . OpPow Base
    (101) OpPow -> . POW

    MUL             reduce using rule 76 (TermMult -> TermPow .)
    DIV             reduce using rule 76 (TermMult -> TermPow .)
    ADD             reduce using rule 76 (TermMult -> TermPow .)
    SUB             reduce using rule 76 (TermMult -> TermPow .)
    AND             reduce using rule 76 (TermMult -> TermPow .)
    OR              reduce using rule 76 (TermMult -> TermPow .)
    LESSER          reduce using rule 76 (TermMult -> TermPow .)
    GREATER         reduce using rule 76 (TermMult -> TermPow .)
    LEQ             reduce using rule 76 (TermMult -> TermPow .)
    GEQ             reduce using rule 76 (TermMult -> TermPow .)
    EQUAL           reduce using rule 76 (TermMult -> TermPow .)
    ;               reduce using rule 76 (TermMult -> TermPow .)
    RARROW          reduce using rule 76 (TermMult -> TermPow .)
    )               reduce using rule 76 (TermMult -> TermPow .)
    {               reduce using rule 76 (TermMult -> TermPow .)
    ID              reduce using rule 76 (TermMult -> TermPow .)
    IF              reduce using rule 76 (TermMult -> TermPow .)
    WHILE           reduce using rule 76 (TermMult -> TermPow .)
    SWITCH          reduce using rule 76 (TermMult -> TermPow .)
    (               reduce using rule 76 (TermMult -> TermPow .)
    NUM             reduce using rule 76 (TermMult -> TermPow .)
    ¿               reduce using rule 76 (TermMult -> TermPow .)
    NEG             reduce using rule 76 (TermMult -> TermPow .)
    ,               reduce using rule 76 (TermMult -> TermPow .)
    ]               reduce using rule 76 (TermMult -> TermPow .)
    POW             shift and go to state 75

    OpPow                          shift and go to state 74

state 31

    (78) TermPow -> Base .
    (69) OpUno -> Base . ?

    POW             reduce using rule 78 (TermPow -> Base .)
    MUL             reduce using rule 78 (TermPow -> Base .)
    DIV             reduce using rule 78 (TermPow -> Base .)
    ADD             reduce using rule 78 (TermPow -> Base .)
    SUB             reduce using rule 78 (TermPow -> Base .)
    AND             reduce using rule 78 (TermPow -> Base .)
    OR              reduce using rule 78 (TermPow -> Base .)
    LESSER          reduce using rule 78 (TermPow -> Base .)
    GREATER         reduce using rule 78 (TermPow -> Base .)
    LEQ             reduce using rule 78 (TermPow -> Base .)
    GEQ             reduce using rule 78 (TermPow -> Base .)
    EQUAL           reduce using rule 78 (TermPow -> Base .)
    ;               reduce using rule 78 (TermPow -> Base .)
    RARROW          reduce using rule 78 (TermPow -> Base .)
    )               reduce using rule 78 (TermPow -> Base .)
    {               reduce using rule 78 (TermPow -> Base .)
    ID              reduce using rule 78 (TermPow -> Base .)
    IF              reduce using rule 78 (TermPow -> Base .)
    WHILE           reduce using rule 78 (TermPow -> Base .)
    SWITCH          reduce using rule 78 (TermPow -> Base .)
    (               reduce using rule 78 (TermPow -> Base .)
    NUM             reduce using rule 78 (TermPow -> Base .)
    ¿               reduce using rule 78 (TermPow -> Base .)
    NEG             reduce using rule 78 (TermPow -> Base .)
    ,               reduce using rule 78 (TermPow -> Base .)
    ]               reduce using rule 78 (TermPow -> Base .)
    ?               shift and go to state 76


state 32

    (79) Base -> OpUno .

    ?               reduce using rule 79 (Base -> OpUno .)
    POW             reduce using rule 79 (Base -> OpUno .)
    MUL             reduce using rule 79 (Base -> OpUno .)
    DIV             reduce using rule 79 (Base -> OpUno .)
    ADD             reduce using rule 79 (Base -> OpUno .)
    SUB             reduce using rule 79 (Base -> OpUno .)
    AND             reduce using rule 79 (Base -> OpUno .)
    OR              reduce using rule 79 (Base -> OpUno .)
    LESSER          reduce using rule 79 (Base -> OpUno .)
    GREATER         reduce using rule 79 (Base -> OpUno .)
    LEQ             reduce using rule 79 (Base -> OpUno .)
    GEQ             reduce using rule 79 (Base -> OpUno .)
    EQUAL           reduce using rule 79 (Base -> OpUno .)
    ;               reduce using rule 79 (Base -> OpUno .)
    RARROW          reduce using rule 79 (Base -> OpUno .)
    )               reduce using rule 79 (Base -> OpUno .)
    {               reduce using rule 79 (Base -> OpUno .)
    ID              reduce using rule 79 (Base -> OpUno .)
    IF              reduce using rule 79 (Base -> OpUno .)
    WHILE           reduce using rule 79 (Base -> OpUno .)
    SWITCH          reduce using rule 79 (Base -> OpUno .)
    (               reduce using rule 79 (Base -> OpUno .)
    NUM             reduce using rule 79 (Base -> OpUno .)
    ¿               reduce using rule 79 (Base -> OpUno .)
    NEG             reduce using rule 79 (Base -> OpUno .)
    ,               reduce using rule 79 (Base -> OpUno .)
    ]               reduce using rule 79 (Base -> OpUno .)


state 33

    (82) Base -> NUM .

    ?               reduce using rule 82 (Base -> NUM .)
    POW             reduce using rule 82 (Base -> NUM .)
    MUL             reduce using rule 82 (Base -> NUM .)
    DIV             reduce using rule 82 (Base -> NUM .)
    ADD             reduce using rule 82 (Base -> NUM .)
    SUB             reduce using rule 82 (Base -> NUM .)
    AND             reduce using rule 82 (Base -> NUM .)
    OR              reduce using rule 82 (Base -> NUM .)
    LESSER          reduce using rule 82 (Base -> NUM .)
    GREATER         reduce using rule 82 (Base -> NUM .)
    LEQ             reduce using rule 82 (Base -> NUM .)
    GEQ             reduce using rule 82 (Base -> NUM .)
    EQUAL           reduce using rule 82 (Base -> NUM .)
    ;               reduce using rule 82 (Base -> NUM .)
    RARROW          reduce using rule 82 (Base -> NUM .)
    )               reduce using rule 82 (Base -> NUM .)
    {               reduce using rule 82 (Base -> NUM .)
    ID              reduce using rule 82 (Base -> NUM .)
    IF              reduce using rule 82 (Base -> NUM .)
    WHILE           reduce using rule 82 (Base -> NUM .)
    SWITCH          reduce using rule 82 (Base -> NUM .)
    (               reduce using rule 82 (Base -> NUM .)
    NUM             reduce using rule 82 (Base -> NUM .)
    ¿               reduce using rule 82 (Base -> NUM .)
    NEG             reduce using rule 82 (Base -> NUM .)
    ,               reduce using rule 82 (Base -> NUM .)
    ]               reduce using rule 82 (Base -> NUM .)


state 34

    (84) Base -> ¿ .

    ?               reduce using rule 84 (Base -> ¿ .)
    POW             reduce using rule 84 (Base -> ¿ .)
    MUL             reduce using rule 84 (Base -> ¿ .)
    DIV             reduce using rule 84 (Base -> ¿ .)
    ADD             reduce using rule 84 (Base -> ¿ .)
    SUB             reduce using rule 84 (Base -> ¿ .)
    AND             reduce using rule 84 (Base -> ¿ .)
    OR              reduce using rule 84 (Base -> ¿ .)
    LESSER          reduce using rule 84 (Base -> ¿ .)
    GREATER         reduce using rule 84 (Base -> ¿ .)
    LEQ             reduce using rule 84 (Base -> ¿ .)
    GEQ             reduce using rule 84 (Base -> ¿ .)
    EQUAL           reduce using rule 84 (Base -> ¿ .)
    ;               reduce using rule 84 (Base -> ¿ .)
    RARROW          reduce using rule 84 (Base -> ¿ .)
    )               reduce using rule 84 (Base -> ¿ .)
    {               reduce using rule 84 (Base -> ¿ .)
    ID              reduce using rule 84 (Base -> ¿ .)
    IF              reduce using rule 84 (Base -> ¿ .)
    WHILE           reduce using rule 84 (Base -> ¿ .)
    SWITCH          reduce using rule 84 (Base -> ¿ .)
    (               reduce using rule 84 (Base -> ¿ .)
    NUM             reduce using rule 84 (Base -> ¿ .)
    ¿               reduce using rule 84 (Base -> ¿ .)
    NEG             reduce using rule 84 (Base -> ¿ .)
    ,               reduce using rule 84 (Base -> ¿ .)
    ]               reduce using rule 84 (Base -> ¿ .)


state 35

    (66) OpUno -> NEG . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 78
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Base                           shift and go to state 77
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 36

    (67) OpUno -> AccessArray .

    ?               reduce using rule 67 (OpUno -> AccessArray .)
    POW             reduce using rule 67 (OpUno -> AccessArray .)
    MUL             reduce using rule 67 (OpUno -> AccessArray .)
    DIV             reduce using rule 67 (OpUno -> AccessArray .)
    ADD             reduce using rule 67 (OpUno -> AccessArray .)
    SUB             reduce using rule 67 (OpUno -> AccessArray .)
    AND             reduce using rule 67 (OpUno -> AccessArray .)
    OR              reduce using rule 67 (OpUno -> AccessArray .)
    LESSER          reduce using rule 67 (OpUno -> AccessArray .)
    GREATER         reduce using rule 67 (OpUno -> AccessArray .)
    LEQ             reduce using rule 67 (OpUno -> AccessArray .)
    GEQ             reduce using rule 67 (OpUno -> AccessArray .)
    EQUAL           reduce using rule 67 (OpUno -> AccessArray .)
    ;               reduce using rule 67 (OpUno -> AccessArray .)
    RARROW          reduce using rule 67 (OpUno -> AccessArray .)
    )               reduce using rule 67 (OpUno -> AccessArray .)
    {               reduce using rule 67 (OpUno -> AccessArray .)
    ID              reduce using rule 67 (OpUno -> AccessArray .)
    IF              reduce using rule 67 (OpUno -> AccessArray .)
    WHILE           reduce using rule 67 (OpUno -> AccessArray .)
    SWITCH          reduce using rule 67 (OpUno -> AccessArray .)
    (               reduce using rule 67 (OpUno -> AccessArray .)
    NUM             reduce using rule 67 (OpUno -> AccessArray .)
    ¿               reduce using rule 67 (OpUno -> AccessArray .)
    NEG             reduce using rule 67 (OpUno -> AccessArray .)
    ,               reduce using rule 67 (OpUno -> AccessArray .)
    ]               reduce using rule 67 (OpUno -> AccessArray .)


state 37

    (68) OpUno -> SUB . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 78
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Base                           shift and go to state 79
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 38

    (8) Block -> FunCall ; .

    ID              reduce using rule 8 (Block -> FunCall ; .)
    IF              reduce using rule 8 (Block -> FunCall ; .)
    WHILE           reduce using rule 8 (Block -> FunCall ; .)
    SWITCH          reduce using rule 8 (Block -> FunCall ; .)
    (               reduce using rule 8 (Block -> FunCall ; .)
    NUM             reduce using rule 8 (Block -> FunCall ; .)
    ¿               reduce using rule 8 (Block -> FunCall ; .)
    NEG             reduce using rule 8 (Block -> FunCall ; .)
    SUB             reduce using rule 8 (Block -> FunCall ; .)
    $end            reduce using rule 8 (Block -> FunCall ; .)
    ELSE            reduce using rule 8 (Block -> FunCall ; .)
    }               reduce using rule 8 (Block -> FunCall ; .)
    :               reduce using rule 8 (Block -> FunCall ; .)


state 39

    (9) Block -> Exp ; .

    ID              reduce using rule 9 (Block -> Exp ; .)
    IF              reduce using rule 9 (Block -> Exp ; .)
    WHILE           reduce using rule 9 (Block -> Exp ; .)
    SWITCH          reduce using rule 9 (Block -> Exp ; .)
    (               reduce using rule 9 (Block -> Exp ; .)
    NUM             reduce using rule 9 (Block -> Exp ; .)
    ¿               reduce using rule 9 (Block -> Exp ; .)
    NEG             reduce using rule 9 (Block -> Exp ; .)
    SUB             reduce using rule 9 (Block -> Exp ; .)
    $end            reduce using rule 9 (Block -> Exp ; .)
    ELSE            reduce using rule 9 (Block -> Exp ; .)
    }               reduce using rule 9 (Block -> Exp ; .)
    :               reduce using rule 9 (Block -> Exp ; .)


state 40

    (48) Decl -> ID ID .
    (49) DeclArray -> ID ID . DeclArraySize
    (56) DeclAtrib -> ID ID . LARROW AtribOp
    (50) DeclArraySize -> . DeclArraySize [ NUM ]
    (51) DeclArraySize -> . [ NUM ]

    ;               reduce using rule 48 (Decl -> ID ID .)
    LARROW          shift and go to state 81
    [               shift and go to state 82

    DeclArraySize                  shift and go to state 80

state 41

    (17) Function -> ID FunScope . FunCases Body
    (19) FunCases -> . FunExtra RARROW ID
    (20) FunCases -> . RARROW ID
    (21) FunCases -> . FunExtra
    (22) FunCases -> .
    (23) FunExtra -> . FunExtra , ID
    (24) FunExtra -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RARROW          shift and go to state 86
    {               reduce using rule 22 (FunCases -> .)
    IF              reduce using rule 22 (FunCases -> .)
    WHILE           reduce using rule 22 (FunCases -> .)
    SWITCH          reduce using rule 22 (FunCases -> .)
    (               reduce using rule 22 (FunCases -> .)
    NUM             reduce using rule 22 (FunCases -> .)
    ¿               reduce using rule 22 (FunCases -> .)
    NEG             reduce using rule 22 (FunCases -> .)
    SUB             reduce using rule 22 (FunCases -> .)
    ID              shift and go to state 83

  ! ID              [ reduce using rule 22 (FunCases -> .) ]

    FunCases                       shift and go to state 84
    FunExtra                       shift and go to state 85

state 42

    (85) FunCall -> ID ( . FunArg )
    (86) FunArg -> . FunRec
    (87) FunArg -> .
    (88) FunRec -> . FunRec , AtribOp
    (89) FunRec -> . AtribOp
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    )               reduce using rule 87 (FunArg -> .)
    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    FunArg                         shift and go to state 87
    FunRec                         shift and go to state 88
    AtribOp                        shift and go to state 89
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 43

    (61) Atrib -> ID LARROW . AtribOp
    (58) AtribNum -> ID LARROW . AtribOp
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 90
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 44

    (63) Atrib -> ID SWAP . ID

    ID              shift and go to state 91


state 45

    (52) AtribArray -> ID ArraySize . LARROW AtribOp
    (70) AccessArray -> ID ArraySize .
    (54) ArraySize -> ArraySize . [ AtribOp ]

    LARROW          shift and go to state 92
    ?               reduce using rule 70 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 70 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 70 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 70 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 70 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 70 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 70 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 70 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 70 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 70 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 70 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 70 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 70 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 70 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 70 (AccessArray -> ID ArraySize .)
    )               reduce using rule 70 (AccessArray -> ID ArraySize .)
    {               reduce using rule 70 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 70 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 70 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 70 (AccessArray -> ID ArraySize .)
    SWITCH          reduce using rule 70 (AccessArray -> ID ArraySize .)
    (               reduce using rule 70 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 70 (AccessArray -> ID ArraySize .)
    ¿               reduce using rule 70 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 70 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 70 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 70 (AccessArray -> ID ArraySize .)
    [               shift and go to state 93


state 46

    (18) FunScope -> : .

    RARROW          reduce using rule 18 (FunScope -> : .)
    ID              reduce using rule 18 (FunScope -> : .)
    {               reduce using rule 18 (FunScope -> : .)
    IF              reduce using rule 18 (FunScope -> : .)
    WHILE           reduce using rule 18 (FunScope -> : .)
    SWITCH          reduce using rule 18 (FunScope -> : .)
    (               reduce using rule 18 (FunScope -> : .)
    NUM             reduce using rule 18 (FunScope -> : .)
    ¿               reduce using rule 18 (FunScope -> : .)
    NEG             reduce using rule 18 (FunScope -> : .)
    SUB             reduce using rule 18 (FunScope -> : .)


state 47

    (55) ArraySize -> [ . AtribOp ]
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 94
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 48

    (80) Base -> ( AtribOp . )
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 95
    RARROW          shift and go to state 96


state 49

    (47) AtribOp -> Op .

    )               reduce using rule 47 (AtribOp -> Op .)
    RARROW          reduce using rule 47 (AtribOp -> Op .)
    {               reduce using rule 47 (AtribOp -> Op .)
    ID              reduce using rule 47 (AtribOp -> Op .)
    IF              reduce using rule 47 (AtribOp -> Op .)
    WHILE           reduce using rule 47 (AtribOp -> Op .)
    SWITCH          reduce using rule 47 (AtribOp -> Op .)
    (               reduce using rule 47 (AtribOp -> Op .)
    NUM             reduce using rule 47 (AtribOp -> Op .)
    ¿               reduce using rule 47 (AtribOp -> Op .)
    NEG             reduce using rule 47 (AtribOp -> Op .)
    SUB             reduce using rule 47 (AtribOp -> Op .)
    ,               reduce using rule 47 (AtribOp -> Op .)
    ;               reduce using rule 47 (AtribOp -> Op .)
    ]               reduce using rule 47 (AtribOp -> Op .)


state 50

    (58) AtribNum -> ID . LARROW AtribOp
    (52) AtribArray -> ID . ArraySize LARROW AtribOp
    (81) Base -> ID .
    (85) FunCall -> ID . ( FunArg )
    (70) AccessArray -> ID . ArraySize
    (54) ArraySize -> . ArraySize [ AtribOp ]
    (55) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    LARROW          shift and go to state 97
    ?               reduce using rule 81 (Base -> ID .)
    POW             reduce using rule 81 (Base -> ID .)
    MUL             reduce using rule 81 (Base -> ID .)
    DIV             reduce using rule 81 (Base -> ID .)
    ADD             reduce using rule 81 (Base -> ID .)
    SUB             reduce using rule 81 (Base -> ID .)
    AND             reduce using rule 81 (Base -> ID .)
    OR              reduce using rule 81 (Base -> ID .)
    LESSER          reduce using rule 81 (Base -> ID .)
    GREATER         reduce using rule 81 (Base -> ID .)
    LEQ             reduce using rule 81 (Base -> ID .)
    GEQ             reduce using rule 81 (Base -> ID .)
    EQUAL           reduce using rule 81 (Base -> ID .)
    )               reduce using rule 81 (Base -> ID .)
    RARROW          reduce using rule 81 (Base -> ID .)
    {               reduce using rule 81 (Base -> ID .)
    ID              reduce using rule 81 (Base -> ID .)
    IF              reduce using rule 81 (Base -> ID .)
    WHILE           reduce using rule 81 (Base -> ID .)
    SWITCH          reduce using rule 81 (Base -> ID .)
    NUM             reduce using rule 81 (Base -> ID .)
    ¿               reduce using rule 81 (Base -> ID .)
    NEG             reduce using rule 81 (Base -> ID .)
    ,               reduce using rule 81 (Base -> ID .)
    ;               reduce using rule 81 (Base -> ID .)
    ]               reduce using rule 81 (Base -> ID .)
    (               shift and go to state 42
    [               shift and go to state 47

  ! (               [ reduce using rule 81 (Base -> ID .) ]

    ArraySize                      shift and go to state 45

state 51

    (60) AtribNum -> AtribArray .

    )               reduce using rule 60 (AtribNum -> AtribArray .)
    RARROW          reduce using rule 60 (AtribNum -> AtribArray .)
    {               reduce using rule 60 (AtribNum -> AtribArray .)
    ID              reduce using rule 60 (AtribNum -> AtribArray .)
    IF              reduce using rule 60 (AtribNum -> AtribArray .)
    WHILE           reduce using rule 60 (AtribNum -> AtribArray .)
    SWITCH          reduce using rule 60 (AtribNum -> AtribArray .)
    (               reduce using rule 60 (AtribNum -> AtribArray .)
    NUM             reduce using rule 60 (AtribNum -> AtribArray .)
    ¿               reduce using rule 60 (AtribNum -> AtribArray .)
    NEG             reduce using rule 60 (AtribNum -> AtribArray .)
    SUB             reduce using rule 60 (AtribNum -> AtribArray .)
    ,               reduce using rule 60 (AtribNum -> AtribArray .)
    ;               reduce using rule 60 (AtribNum -> AtribArray .)
    ]               reduce using rule 60 (AtribNum -> AtribArray .)


state 52

    (83) Base -> FunCall .

    ?               reduce using rule 83 (Base -> FunCall .)
    POW             reduce using rule 83 (Base -> FunCall .)
    MUL             reduce using rule 83 (Base -> FunCall .)
    DIV             reduce using rule 83 (Base -> FunCall .)
    ADD             reduce using rule 83 (Base -> FunCall .)
    SUB             reduce using rule 83 (Base -> FunCall .)
    AND             reduce using rule 83 (Base -> FunCall .)
    OR              reduce using rule 83 (Base -> FunCall .)
    LESSER          reduce using rule 83 (Base -> FunCall .)
    GREATER         reduce using rule 83 (Base -> FunCall .)
    LEQ             reduce using rule 83 (Base -> FunCall .)
    GEQ             reduce using rule 83 (Base -> FunCall .)
    EQUAL           reduce using rule 83 (Base -> FunCall .)
    )               reduce using rule 83 (Base -> FunCall .)
    RARROW          reduce using rule 83 (Base -> FunCall .)
    {               reduce using rule 83 (Base -> FunCall .)
    ID              reduce using rule 83 (Base -> FunCall .)
    IF              reduce using rule 83 (Base -> FunCall .)
    WHILE           reduce using rule 83 (Base -> FunCall .)
    SWITCH          reduce using rule 83 (Base -> FunCall .)
    (               reduce using rule 83 (Base -> FunCall .)
    NUM             reduce using rule 83 (Base -> FunCall .)
    ¿               reduce using rule 83 (Base -> FunCall .)
    NEG             reduce using rule 83 (Base -> FunCall .)
    ;               reduce using rule 83 (Base -> FunCall .)
    ,               reduce using rule 83 (Base -> FunCall .)
    ]               reduce using rule 83 (Base -> FunCall .)


state 53

    (26) If -> IfScope AtribOp . Body
    (28) IfElse -> IfScope AtribOp . Body ElseScope Body
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    RARROW          shift and go to state 96
    {               shift and go to state 100
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    Body                           shift and go to state 98
    Block                          shift and go to state 101
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 54

    (62) Atrib -> AtribOp RARROW . ID
    (57) DeclAtrib -> AtribOp RARROW . ID ID
    (53) AtribArray -> AtribOp RARROW . ID ArraySize
    (59) AtribNum -> AtribOp RARROW . ID

    ID              shift and go to state 102


state 55

    (30) While -> WhileScope ( . AtribOp ) Body
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 103
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 56

    (32) Switch -> SwitchScope Conds . { Cases }
    (33) Conds -> Conds . , Cond

    {               shift and go to state 104
    ,               shift and go to state 105


state 57

    (34) Conds -> Cond .

    {               reduce using rule 34 (Conds -> Cond .)
    ,               reduce using rule 34 (Conds -> Cond .)


state 58

    (35) Cond -> ID . ( AtribOp )

    (               shift and go to state 106


state 59

    (36) Cond -> ( . AtribOp )
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 107
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 60

    (71) OpBin -> OpBin OpLogico . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 78
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    TermPlus                       shift and go to state 108
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 61

    (90) OpLogico -> AND .

    (               reduce using rule 90 (OpLogico -> AND .)
    ID              reduce using rule 90 (OpLogico -> AND .)
    NUM             reduce using rule 90 (OpLogico -> AND .)
    ¿               reduce using rule 90 (OpLogico -> AND .)
    NEG             reduce using rule 90 (OpLogico -> AND .)
    SUB             reduce using rule 90 (OpLogico -> AND .)


state 62

    (91) OpLogico -> OR .

    (               reduce using rule 91 (OpLogico -> OR .)
    ID              reduce using rule 91 (OpLogico -> OR .)
    NUM             reduce using rule 91 (OpLogico -> OR .)
    ¿               reduce using rule 91 (OpLogico -> OR .)
    NEG             reduce using rule 91 (OpLogico -> OR .)
    SUB             reduce using rule 91 (OpLogico -> OR .)


state 63

    (92) OpLogico -> LESSER .

    (               reduce using rule 92 (OpLogico -> LESSER .)
    ID              reduce using rule 92 (OpLogico -> LESSER .)
    NUM             reduce using rule 92 (OpLogico -> LESSER .)
    ¿               reduce using rule 92 (OpLogico -> LESSER .)
    NEG             reduce using rule 92 (OpLogico -> LESSER .)
    SUB             reduce using rule 92 (OpLogico -> LESSER .)


state 64

    (93) OpLogico -> GREATER .

    (               reduce using rule 93 (OpLogico -> GREATER .)
    ID              reduce using rule 93 (OpLogico -> GREATER .)
    NUM             reduce using rule 93 (OpLogico -> GREATER .)
    ¿               reduce using rule 93 (OpLogico -> GREATER .)
    NEG             reduce using rule 93 (OpLogico -> GREATER .)
    SUB             reduce using rule 93 (OpLogico -> GREATER .)


state 65

    (94) OpLogico -> LEQ .

    (               reduce using rule 94 (OpLogico -> LEQ .)
    ID              reduce using rule 94 (OpLogico -> LEQ .)
    NUM             reduce using rule 94 (OpLogico -> LEQ .)
    ¿               reduce using rule 94 (OpLogico -> LEQ .)
    NEG             reduce using rule 94 (OpLogico -> LEQ .)
    SUB             reduce using rule 94 (OpLogico -> LEQ .)


state 66

    (95) OpLogico -> GEQ .

    (               reduce using rule 95 (OpLogico -> GEQ .)
    ID              reduce using rule 95 (OpLogico -> GEQ .)
    NUM             reduce using rule 95 (OpLogico -> GEQ .)
    ¿               reduce using rule 95 (OpLogico -> GEQ .)
    NEG             reduce using rule 95 (OpLogico -> GEQ .)
    SUB             reduce using rule 95 (OpLogico -> GEQ .)


state 67

    (96) OpLogico -> EQUAL .

    (               reduce using rule 96 (OpLogico -> EQUAL .)
    ID              reduce using rule 96 (OpLogico -> EQUAL .)
    NUM             reduce using rule 96 (OpLogico -> EQUAL .)
    ¿               reduce using rule 96 (OpLogico -> EQUAL .)
    NEG             reduce using rule 96 (OpLogico -> EQUAL .)
    SUB             reduce using rule 96 (OpLogico -> EQUAL .)


state 68

    (73) TermPlus -> TermPlus OpPlus . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 78
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    TermMult                       shift and go to state 109
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 69

    (97) OpPlus -> ADD .

    (               reduce using rule 97 (OpPlus -> ADD .)
    ID              reduce using rule 97 (OpPlus -> ADD .)
    NUM             reduce using rule 97 (OpPlus -> ADD .)
    ¿               reduce using rule 97 (OpPlus -> ADD .)
    NEG             reduce using rule 97 (OpPlus -> ADD .)
    SUB             reduce using rule 97 (OpPlus -> ADD .)


state 70

    (98) OpPlus -> SUB .

    (               reduce using rule 98 (OpPlus -> SUB .)
    ID              reduce using rule 98 (OpPlus -> SUB .)
    NUM             reduce using rule 98 (OpPlus -> SUB .)
    ¿               reduce using rule 98 (OpPlus -> SUB .)
    NEG             reduce using rule 98 (OpPlus -> SUB .)
    SUB             reduce using rule 98 (OpPlus -> SUB .)


state 71

    (75) TermMult -> TermMult OpMult . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 78
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    TermPow                        shift and go to state 110
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 72

    (99) OpMult -> MUL .

    (               reduce using rule 99 (OpMult -> MUL .)
    ID              reduce using rule 99 (OpMult -> MUL .)
    NUM             reduce using rule 99 (OpMult -> MUL .)
    ¿               reduce using rule 99 (OpMult -> MUL .)
    NEG             reduce using rule 99 (OpMult -> MUL .)
    SUB             reduce using rule 99 (OpMult -> MUL .)


state 73

    (100) OpMult -> DIV .

    (               reduce using rule 100 (OpMult -> DIV .)
    ID              reduce using rule 100 (OpMult -> DIV .)
    NUM             reduce using rule 100 (OpMult -> DIV .)
    ¿               reduce using rule 100 (OpMult -> DIV .)
    NEG             reduce using rule 100 (OpMult -> DIV .)
    SUB             reduce using rule 100 (OpMult -> DIV .)


state 74

    (77) TermPow -> TermPow OpPow . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 78
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Base                           shift and go to state 111
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 75

    (101) OpPow -> POW .

    (               reduce using rule 101 (OpPow -> POW .)
    ID              reduce using rule 101 (OpPow -> POW .)
    NUM             reduce using rule 101 (OpPow -> POW .)
    ¿               reduce using rule 101 (OpPow -> POW .)
    NEG             reduce using rule 101 (OpPow -> POW .)
    SUB             reduce using rule 101 (OpPow -> POW .)


state 76

    (69) OpUno -> Base ? .

    ?               reduce using rule 69 (OpUno -> Base ? .)
    POW             reduce using rule 69 (OpUno -> Base ? .)
    MUL             reduce using rule 69 (OpUno -> Base ? .)
    DIV             reduce using rule 69 (OpUno -> Base ? .)
    ADD             reduce using rule 69 (OpUno -> Base ? .)
    SUB             reduce using rule 69 (OpUno -> Base ? .)
    AND             reduce using rule 69 (OpUno -> Base ? .)
    OR              reduce using rule 69 (OpUno -> Base ? .)
    LESSER          reduce using rule 69 (OpUno -> Base ? .)
    GREATER         reduce using rule 69 (OpUno -> Base ? .)
    LEQ             reduce using rule 69 (OpUno -> Base ? .)
    GEQ             reduce using rule 69 (OpUno -> Base ? .)
    EQUAL           reduce using rule 69 (OpUno -> Base ? .)
    ;               reduce using rule 69 (OpUno -> Base ? .)
    RARROW          reduce using rule 69 (OpUno -> Base ? .)
    )               reduce using rule 69 (OpUno -> Base ? .)
    {               reduce using rule 69 (OpUno -> Base ? .)
    ID              reduce using rule 69 (OpUno -> Base ? .)
    IF              reduce using rule 69 (OpUno -> Base ? .)
    WHILE           reduce using rule 69 (OpUno -> Base ? .)
    SWITCH          reduce using rule 69 (OpUno -> Base ? .)
    (               reduce using rule 69 (OpUno -> Base ? .)
    NUM             reduce using rule 69 (OpUno -> Base ? .)
    ¿               reduce using rule 69 (OpUno -> Base ? .)
    NEG             reduce using rule 69 (OpUno -> Base ? .)
    ,               reduce using rule 69 (OpUno -> Base ? .)
    ]               reduce using rule 69 (OpUno -> Base ? .)


state 77

    (66) OpUno -> NEG Base .
    (69) OpUno -> Base . ?

  ! shift/reduce conflict for ? resolved as shift
    POW             reduce using rule 66 (OpUno -> NEG Base .)
    MUL             reduce using rule 66 (OpUno -> NEG Base .)
    DIV             reduce using rule 66 (OpUno -> NEG Base .)
    ADD             reduce using rule 66 (OpUno -> NEG Base .)
    SUB             reduce using rule 66 (OpUno -> NEG Base .)
    AND             reduce using rule 66 (OpUno -> NEG Base .)
    OR              reduce using rule 66 (OpUno -> NEG Base .)
    LESSER          reduce using rule 66 (OpUno -> NEG Base .)
    GREATER         reduce using rule 66 (OpUno -> NEG Base .)
    LEQ             reduce using rule 66 (OpUno -> NEG Base .)
    GEQ             reduce using rule 66 (OpUno -> NEG Base .)
    EQUAL           reduce using rule 66 (OpUno -> NEG Base .)
    ;               reduce using rule 66 (OpUno -> NEG Base .)
    RARROW          reduce using rule 66 (OpUno -> NEG Base .)
    )               reduce using rule 66 (OpUno -> NEG Base .)
    {               reduce using rule 66 (OpUno -> NEG Base .)
    ID              reduce using rule 66 (OpUno -> NEG Base .)
    IF              reduce using rule 66 (OpUno -> NEG Base .)
    WHILE           reduce using rule 66 (OpUno -> NEG Base .)
    SWITCH          reduce using rule 66 (OpUno -> NEG Base .)
    (               reduce using rule 66 (OpUno -> NEG Base .)
    NUM             reduce using rule 66 (OpUno -> NEG Base .)
    ¿               reduce using rule 66 (OpUno -> NEG Base .)
    NEG             reduce using rule 66 (OpUno -> NEG Base .)
    ,               reduce using rule 66 (OpUno -> NEG Base .)
    ]               reduce using rule 66 (OpUno -> NEG Base .)
    ?               shift and go to state 76

  ! ?               [ reduce using rule 66 (OpUno -> NEG Base .) ]


state 78

    (81) Base -> ID .
    (85) FunCall -> ID . ( FunArg )
    (70) AccessArray -> ID . ArraySize
    (54) ArraySize -> . ArraySize [ AtribOp ]
    (55) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    ?               reduce using rule 81 (Base -> ID .)
    POW             reduce using rule 81 (Base -> ID .)
    MUL             reduce using rule 81 (Base -> ID .)
    DIV             reduce using rule 81 (Base -> ID .)
    ADD             reduce using rule 81 (Base -> ID .)
    SUB             reduce using rule 81 (Base -> ID .)
    AND             reduce using rule 81 (Base -> ID .)
    OR              reduce using rule 81 (Base -> ID .)
    LESSER          reduce using rule 81 (Base -> ID .)
    GREATER         reduce using rule 81 (Base -> ID .)
    LEQ             reduce using rule 81 (Base -> ID .)
    GEQ             reduce using rule 81 (Base -> ID .)
    EQUAL           reduce using rule 81 (Base -> ID .)
    ;               reduce using rule 81 (Base -> ID .)
    RARROW          reduce using rule 81 (Base -> ID .)
    )               reduce using rule 81 (Base -> ID .)
    {               reduce using rule 81 (Base -> ID .)
    ID              reduce using rule 81 (Base -> ID .)
    IF              reduce using rule 81 (Base -> ID .)
    WHILE           reduce using rule 81 (Base -> ID .)
    SWITCH          reduce using rule 81 (Base -> ID .)
    NUM             reduce using rule 81 (Base -> ID .)
    ¿               reduce using rule 81 (Base -> ID .)
    NEG             reduce using rule 81 (Base -> ID .)
    ,               reduce using rule 81 (Base -> ID .)
    ]               reduce using rule 81 (Base -> ID .)
    (               shift and go to state 42
    [               shift and go to state 47

  ! (               [ reduce using rule 81 (Base -> ID .) ]

    ArraySize                      shift and go to state 112

state 79

    (68) OpUno -> SUB Base .
    (69) OpUno -> Base . ?

  ! shift/reduce conflict for ? resolved as shift
    POW             reduce using rule 68 (OpUno -> SUB Base .)
    MUL             reduce using rule 68 (OpUno -> SUB Base .)
    DIV             reduce using rule 68 (OpUno -> SUB Base .)
    ADD             reduce using rule 68 (OpUno -> SUB Base .)
    SUB             reduce using rule 68 (OpUno -> SUB Base .)
    AND             reduce using rule 68 (OpUno -> SUB Base .)
    OR              reduce using rule 68 (OpUno -> SUB Base .)
    LESSER          reduce using rule 68 (OpUno -> SUB Base .)
    GREATER         reduce using rule 68 (OpUno -> SUB Base .)
    LEQ             reduce using rule 68 (OpUno -> SUB Base .)
    GEQ             reduce using rule 68 (OpUno -> SUB Base .)
    EQUAL           reduce using rule 68 (OpUno -> SUB Base .)
    ;               reduce using rule 68 (OpUno -> SUB Base .)
    RARROW          reduce using rule 68 (OpUno -> SUB Base .)
    )               reduce using rule 68 (OpUno -> SUB Base .)
    {               reduce using rule 68 (OpUno -> SUB Base .)
    ID              reduce using rule 68 (OpUno -> SUB Base .)
    IF              reduce using rule 68 (OpUno -> SUB Base .)
    WHILE           reduce using rule 68 (OpUno -> SUB Base .)
    SWITCH          reduce using rule 68 (OpUno -> SUB Base .)
    (               reduce using rule 68 (OpUno -> SUB Base .)
    NUM             reduce using rule 68 (OpUno -> SUB Base .)
    ¿               reduce using rule 68 (OpUno -> SUB Base .)
    NEG             reduce using rule 68 (OpUno -> SUB Base .)
    ,               reduce using rule 68 (OpUno -> SUB Base .)
    ]               reduce using rule 68 (OpUno -> SUB Base .)
    ?               shift and go to state 76

  ! ?               [ reduce using rule 68 (OpUno -> SUB Base .) ]


state 80

    (49) DeclArray -> ID ID DeclArraySize .
    (50) DeclArraySize -> DeclArraySize . [ NUM ]

    ;               reduce using rule 49 (DeclArray -> ID ID DeclArraySize .)
    [               shift and go to state 113


state 81

    (56) DeclAtrib -> ID ID LARROW . AtribOp
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 114
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 82

    (51) DeclArraySize -> [ . NUM ]

    NUM             shift and go to state 115


state 83

    (24) FunExtra -> ID .

    RARROW          reduce using rule 24 (FunExtra -> ID .)
    ,               reduce using rule 24 (FunExtra -> ID .)
    {               reduce using rule 24 (FunExtra -> ID .)
    ID              reduce using rule 24 (FunExtra -> ID .)
    IF              reduce using rule 24 (FunExtra -> ID .)
    WHILE           reduce using rule 24 (FunExtra -> ID .)
    SWITCH          reduce using rule 24 (FunExtra -> ID .)
    (               reduce using rule 24 (FunExtra -> ID .)
    NUM             reduce using rule 24 (FunExtra -> ID .)
    ¿               reduce using rule 24 (FunExtra -> ID .)
    NEG             reduce using rule 24 (FunExtra -> ID .)
    SUB             reduce using rule 24 (FunExtra -> ID .)


state 84

    (17) Function -> ID FunScope FunCases . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    {               shift and go to state 100
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Body                           shift and go to state 116
    Block                          shift and go to state 101
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 85

    (19) FunCases -> FunExtra . RARROW ID
    (21) FunCases -> FunExtra .
    (23) FunExtra -> FunExtra . , ID

    RARROW          shift and go to state 117
    {               reduce using rule 21 (FunCases -> FunExtra .)
    ID              reduce using rule 21 (FunCases -> FunExtra .)
    IF              reduce using rule 21 (FunCases -> FunExtra .)
    WHILE           reduce using rule 21 (FunCases -> FunExtra .)
    SWITCH          reduce using rule 21 (FunCases -> FunExtra .)
    (               reduce using rule 21 (FunCases -> FunExtra .)
    NUM             reduce using rule 21 (FunCases -> FunExtra .)
    ¿               reduce using rule 21 (FunCases -> FunExtra .)
    NEG             reduce using rule 21 (FunCases -> FunExtra .)
    SUB             reduce using rule 21 (FunCases -> FunExtra .)
    ,               shift and go to state 118


state 86

    (20) FunCases -> RARROW . ID

    ID              shift and go to state 119


state 87

    (85) FunCall -> ID ( FunArg . )

    )               shift and go to state 120


state 88

    (86) FunArg -> FunRec .
    (88) FunRec -> FunRec . , AtribOp

    )               reduce using rule 86 (FunArg -> FunRec .)
    ,               shift and go to state 121


state 89

    (89) FunRec -> AtribOp .
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 89 (FunRec -> AtribOp .)
    )               reduce using rule 89 (FunRec -> AtribOp .)
    RARROW          shift and go to state 96


state 90

    (61) Atrib -> ID LARROW AtribOp .
    (58) AtribNum -> ID LARROW AtribOp .
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 61 (Atrib -> ID LARROW AtribOp .)
    RARROW          shift and go to state 96

  ! RARROW          [ reduce using rule 58 (AtribNum -> ID LARROW AtribOp .) ]


state 91

    (63) Atrib -> ID SWAP ID .

    ;               reduce using rule 63 (Atrib -> ID SWAP ID .)


state 92

    (52) AtribArray -> ID ArraySize LARROW . AtribOp
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 122
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 93

    (54) ArraySize -> ArraySize [ . AtribOp ]
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 123
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 94

    (55) ArraySize -> [ AtribOp . ]
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 124
    RARROW          shift and go to state 96


state 95

    (80) Base -> ( AtribOp ) .

    ?               reduce using rule 80 (Base -> ( AtribOp ) .)
    POW             reduce using rule 80 (Base -> ( AtribOp ) .)
    MUL             reduce using rule 80 (Base -> ( AtribOp ) .)
    DIV             reduce using rule 80 (Base -> ( AtribOp ) .)
    ADD             reduce using rule 80 (Base -> ( AtribOp ) .)
    SUB             reduce using rule 80 (Base -> ( AtribOp ) .)
    AND             reduce using rule 80 (Base -> ( AtribOp ) .)
    OR              reduce using rule 80 (Base -> ( AtribOp ) .)
    LESSER          reduce using rule 80 (Base -> ( AtribOp ) .)
    GREATER         reduce using rule 80 (Base -> ( AtribOp ) .)
    LEQ             reduce using rule 80 (Base -> ( AtribOp ) .)
    GEQ             reduce using rule 80 (Base -> ( AtribOp ) .)
    EQUAL           reduce using rule 80 (Base -> ( AtribOp ) .)
    ;               reduce using rule 80 (Base -> ( AtribOp ) .)
    RARROW          reduce using rule 80 (Base -> ( AtribOp ) .)
    )               reduce using rule 80 (Base -> ( AtribOp ) .)
    {               reduce using rule 80 (Base -> ( AtribOp ) .)
    ID              reduce using rule 80 (Base -> ( AtribOp ) .)
    IF              reduce using rule 80 (Base -> ( AtribOp ) .)
    WHILE           reduce using rule 80 (Base -> ( AtribOp ) .)
    SWITCH          reduce using rule 80 (Base -> ( AtribOp ) .)
    (               reduce using rule 80 (Base -> ( AtribOp ) .)
    NUM             reduce using rule 80 (Base -> ( AtribOp ) .)
    ¿               reduce using rule 80 (Base -> ( AtribOp ) .)
    NEG             reduce using rule 80 (Base -> ( AtribOp ) .)
    ,               reduce using rule 80 (Base -> ( AtribOp ) .)
    ]               reduce using rule 80 (Base -> ( AtribOp ) .)


state 96

    (59) AtribNum -> AtribOp RARROW . ID
    (53) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 125


state 97

    (58) AtribNum -> ID LARROW . AtribOp
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 126
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 98

    (26) If -> IfScope AtribOp Body .
    (28) IfElse -> IfScope AtribOp Body . ElseScope Body
    (27) ElseScope -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 26 (If -> IfScope AtribOp Body .)
    IF              reduce using rule 26 (If -> IfScope AtribOp Body .)
    WHILE           reduce using rule 26 (If -> IfScope AtribOp Body .)
    SWITCH          reduce using rule 26 (If -> IfScope AtribOp Body .)
    (               reduce using rule 26 (If -> IfScope AtribOp Body .)
    NUM             reduce using rule 26 (If -> IfScope AtribOp Body .)
    ¿               reduce using rule 26 (If -> IfScope AtribOp Body .)
    NEG             reduce using rule 26 (If -> IfScope AtribOp Body .)
    SUB             reduce using rule 26 (If -> IfScope AtribOp Body .)
    $end            reduce using rule 26 (If -> IfScope AtribOp Body .)
    }               reduce using rule 26 (If -> IfScope AtribOp Body .)
    :               reduce using rule 26 (If -> IfScope AtribOp Body .)
    ELSE            shift and go to state 128

  ! ELSE            [ reduce using rule 26 (If -> IfScope AtribOp Body .) ]

    ElseScope                      shift and go to state 127

state 99

    (85) FunCall -> ID . ( FunArg )
    (61) Atrib -> ID . LARROW AtribOp
    (63) Atrib -> ID . SWAP ID
    (48) Decl -> ID . ID
    (49) DeclArray -> ID . ID DeclArraySize
    (56) DeclAtrib -> ID . ID LARROW AtribOp
    (52) AtribArray -> ID . ArraySize LARROW AtribOp
    (58) AtribNum -> ID . LARROW AtribOp
    (81) Base -> ID .
    (70) AccessArray -> ID . ArraySize
    (54) ArraySize -> . ArraySize [ AtribOp ]
    (55) ArraySize -> . [ AtribOp ]

    (               shift and go to state 42
    LARROW          shift and go to state 43
    SWAP            shift and go to state 44
    ID              shift and go to state 40
    ?               reduce using rule 81 (Base -> ID .)
    POW             reduce using rule 81 (Base -> ID .)
    MUL             reduce using rule 81 (Base -> ID .)
    DIV             reduce using rule 81 (Base -> ID .)
    ADD             reduce using rule 81 (Base -> ID .)
    SUB             reduce using rule 81 (Base -> ID .)
    AND             reduce using rule 81 (Base -> ID .)
    OR              reduce using rule 81 (Base -> ID .)
    LESSER          reduce using rule 81 (Base -> ID .)
    GREATER         reduce using rule 81 (Base -> ID .)
    LEQ             reduce using rule 81 (Base -> ID .)
    GEQ             reduce using rule 81 (Base -> ID .)
    EQUAL           reduce using rule 81 (Base -> ID .)
    ;               reduce using rule 81 (Base -> ID .)
    RARROW          reduce using rule 81 (Base -> ID .)
    [               shift and go to state 47

    ArraySize                      shift and go to state 45

state 100

    (14) Body -> { . }
    (16) Body -> { . Code }
    (6) Code -> . Code Block
    (7) Code -> . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    }               shift and go to state 129
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Code                           shift and go to state 130
    Block                          shift and go to state 131
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 101

    (15) Body -> Block .

    ELSE            reduce using rule 15 (Body -> Block .)
    ID              reduce using rule 15 (Body -> Block .)
    IF              reduce using rule 15 (Body -> Block .)
    WHILE           reduce using rule 15 (Body -> Block .)
    SWITCH          reduce using rule 15 (Body -> Block .)
    (               reduce using rule 15 (Body -> Block .)
    NUM             reduce using rule 15 (Body -> Block .)
    ¿               reduce using rule 15 (Body -> Block .)
    NEG             reduce using rule 15 (Body -> Block .)
    SUB             reduce using rule 15 (Body -> Block .)
    $end            reduce using rule 15 (Body -> Block .)
    }               reduce using rule 15 (Body -> Block .)
    :               reduce using rule 15 (Body -> Block .)


state 102

    (62) Atrib -> AtribOp RARROW ID .
    (57) DeclAtrib -> AtribOp RARROW ID . ID
    (53) AtribArray -> AtribOp RARROW ID . ArraySize
    (59) AtribNum -> AtribOp RARROW ID .
    (54) ArraySize -> . ArraySize [ AtribOp ]
    (55) ArraySize -> . [ AtribOp ]

    ;               reduce using rule 62 (Atrib -> AtribOp RARROW ID .)
    ID              shift and go to state 132
    RARROW          reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 47

    ArraySize                      shift and go to state 133

state 103

    (30) While -> WhileScope ( AtribOp . ) Body
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 134
    RARROW          shift and go to state 96


state 104

    (32) Switch -> SwitchScope Conds { . Cases }
    (37) Cases -> . Cases Case
    (38) Cases -> . Case
    (39) Case -> . ID : Body
    (40) Case -> . : Body

    ID              shift and go to state 137
    :               shift and go to state 138

    Cases                          shift and go to state 135
    Case                           shift and go to state 136

state 105

    (33) Conds -> Conds , . Cond
    (35) Cond -> . ID ( AtribOp )
    (36) Cond -> . ( AtribOp )

    ID              shift and go to state 58
    (               shift and go to state 59

    Cond                           shift and go to state 139

state 106

    (35) Cond -> ID ( . AtribOp )
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 140
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 107

    (36) Cond -> ( AtribOp . )
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 141
    RARROW          shift and go to state 96


state 108

    (71) OpBin -> OpBin OpLogico TermPlus .
    (73) TermPlus -> TermPlus . OpPlus TermMult
    (97) OpPlus -> . ADD
    (98) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    OR              reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    LESSER          reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    GREATER         reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    LEQ             reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    GEQ             reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    EQUAL           reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    ;               reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    RARROW          reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    )               reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    {               reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    ID              reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    IF              reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    WHILE           reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCH          reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    (               reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    NUM             reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    ¿               reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    NEG             reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    ,               reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    ]               reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .)
    ADD             shift and go to state 69
    SUB             shift and go to state 70

  ! SUB             [ reduce using rule 71 (OpBin -> OpBin OpLogico TermPlus .) ]

    OpPlus                         shift and go to state 68

state 109

    (73) TermPlus -> TermPlus OpPlus TermMult .
    (75) TermMult -> TermMult . OpMult TermPow
    (99) OpMult -> . MUL
    (100) OpMult -> . DIV

    ADD             reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    SUB             reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    AND             reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    OR              reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    LESSER          reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    GREATER         reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    LEQ             reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    GEQ             reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    EQUAL           reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    ;               reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    RARROW          reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    )               reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    {               reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    ID              reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    IF              reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    WHILE           reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCH          reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    (               reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    NUM             reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    ¿               reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    NEG             reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    ,               reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    ]               reduce using rule 73 (TermPlus -> TermPlus OpPlus TermMult .)
    MUL             shift and go to state 72
    DIV             shift and go to state 73

    OpMult                         shift and go to state 71

state 110

    (75) TermMult -> TermMult OpMult TermPow .
    (77) TermPow -> TermPow . OpPow Base
    (101) OpPow -> . POW

    MUL             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    DIV             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    ADD             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    SUB             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    AND             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    OR              reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    LESSER          reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    GREATER         reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    LEQ             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    GEQ             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    EQUAL           reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    ;               reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    RARROW          reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    )               reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    {               reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    ID              reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    IF              reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    WHILE           reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    SWITCH          reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    (               reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    NUM             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    ¿               reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    NEG             reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    ,               reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    ]               reduce using rule 75 (TermMult -> TermMult OpMult TermPow .)
    POW             shift and go to state 75

    OpPow                          shift and go to state 74

state 111

    (77) TermPow -> TermPow OpPow Base .
    (69) OpUno -> Base . ?

    POW             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    MUL             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    DIV             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    ADD             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    SUB             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    AND             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    OR              reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    LESSER          reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    GREATER         reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    LEQ             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    GEQ             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    EQUAL           reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    ;               reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    RARROW          reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    )               reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    {               reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    ID              reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    IF              reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    WHILE           reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    SWITCH          reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    (               reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    NUM             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    ¿               reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    NEG             reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    ,               reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    ]               reduce using rule 77 (TermPow -> TermPow OpPow Base .)
    ?               shift and go to state 76


state 112

    (70) AccessArray -> ID ArraySize .
    (54) ArraySize -> ArraySize . [ AtribOp ]

    ?               reduce using rule 70 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 70 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 70 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 70 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 70 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 70 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 70 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 70 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 70 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 70 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 70 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 70 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 70 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 70 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 70 (AccessArray -> ID ArraySize .)
    )               reduce using rule 70 (AccessArray -> ID ArraySize .)
    {               reduce using rule 70 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 70 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 70 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 70 (AccessArray -> ID ArraySize .)
    SWITCH          reduce using rule 70 (AccessArray -> ID ArraySize .)
    (               reduce using rule 70 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 70 (AccessArray -> ID ArraySize .)
    ¿               reduce using rule 70 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 70 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 70 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 70 (AccessArray -> ID ArraySize .)
    [               shift and go to state 93


state 113

    (50) DeclArraySize -> DeclArraySize [ . NUM ]

    NUM             shift and go to state 142


state 114

    (56) DeclAtrib -> ID ID LARROW AtribOp .
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    ;               reduce using rule 56 (DeclAtrib -> ID ID LARROW AtribOp .)
    RARROW          shift and go to state 96


state 115

    (51) DeclArraySize -> [ NUM . ]

    ]               shift and go to state 143


state 116

    (17) Function -> ID FunScope FunCases Body .

    ID              reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    IF              reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    WHILE           reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SWITCH          reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    (               reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    NUM             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    ¿               reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    NEG             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SUB             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    $end            reduce using rule 17 (Function -> ID FunScope FunCases Body .)


state 117

    (19) FunCases -> FunExtra RARROW . ID

    ID              shift and go to state 144


state 118

    (23) FunExtra -> FunExtra , . ID

    ID              shift and go to state 145


state 119

    (20) FunCases -> RARROW ID .

    {               reduce using rule 20 (FunCases -> RARROW ID .)
    ID              reduce using rule 20 (FunCases -> RARROW ID .)
    IF              reduce using rule 20 (FunCases -> RARROW ID .)
    WHILE           reduce using rule 20 (FunCases -> RARROW ID .)
    SWITCH          reduce using rule 20 (FunCases -> RARROW ID .)
    (               reduce using rule 20 (FunCases -> RARROW ID .)
    NUM             reduce using rule 20 (FunCases -> RARROW ID .)
    ¿               reduce using rule 20 (FunCases -> RARROW ID .)
    NEG             reduce using rule 20 (FunCases -> RARROW ID .)
    SUB             reduce using rule 20 (FunCases -> RARROW ID .)


state 120

    (85) FunCall -> ID ( FunArg ) .

    ;               reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    ?               reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    POW             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    MUL             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    DIV             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    ADD             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    SUB             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    AND             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    OR              reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    LESSER          reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    GREATER         reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    LEQ             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    GEQ             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    EQUAL           reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    RARROW          reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    )               reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    {               reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    ID              reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    IF              reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    WHILE           reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    SWITCH          reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    (               reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    NUM             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    ¿               reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    NEG             reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    ,               reduce using rule 85 (FunCall -> ID ( FunArg ) .)
    ]               reduce using rule 85 (FunCall -> ID ( FunArg ) .)


state 121

    (88) FunRec -> FunRec , . AtribOp
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (65) Op -> . OpBin
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (85) FunCall -> . ID ( FunArg )
    (70) AccessArray -> . ID ArraySize

    ID              shift and go to state 50
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    AtribOp                        shift and go to state 146
    AtribNum                       shift and go to state 27
    Op                             shift and go to state 49
    AtribArray                     shift and go to state 51
    OpBin                          shift and go to state 23
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    FunCall                        shift and go to state 52
    AccessArray                    shift and go to state 36

state 122

    (52) AtribArray -> ID ArraySize LARROW AtribOp .
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    )               reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    {               reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ID              reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    IF              reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    WHILE           reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCH          reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    (               reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NUM             reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ¿               reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NEG             reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SUB             reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ,               reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ]               reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .)
    RARROW          shift and go to state 96

  ! RARROW          [ reduce using rule 52 (AtribArray -> ID ArraySize LARROW AtribOp .) ]


state 123

    (54) ArraySize -> ArraySize [ AtribOp . ]
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 147
    RARROW          shift and go to state 96


state 124

    (55) ArraySize -> [ AtribOp ] .

    LARROW          reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    [               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    ?               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    POW             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    MUL             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    DIV             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    ADD             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    SUB             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    AND             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    OR              reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    LESSER          reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    GREATER         reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    LEQ             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    GEQ             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    EQUAL           reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    ;               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    RARROW          reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    )               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    {               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    ID              reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    IF              reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    WHILE           reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    SWITCH          reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    (               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    NUM             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    ¿               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    NEG             reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    ,               reduce using rule 55 (ArraySize -> [ AtribOp ] .)
    ]               reduce using rule 55 (ArraySize -> [ AtribOp ] .)


state 125

    (59) AtribNum -> AtribOp RARROW ID .
    (53) AtribArray -> AtribOp RARROW ID . ArraySize
    (54) ArraySize -> . ArraySize [ AtribOp ]
    (55) ArraySize -> . [ AtribOp ]

    )               reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    RARROW          reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    {               reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    ID              reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    IF              reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    WHILE           reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    SWITCH          reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    (               reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    NUM             reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    ¿               reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    NEG             reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    SUB             reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    ,               reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    ;               reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    ]               reduce using rule 59 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 47

    ArraySize                      shift and go to state 133

state 126

    (58) AtribNum -> ID LARROW AtribOp .
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    )               reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    {               reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    ID              reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    IF              reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    WHILE           reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    SWITCH          reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    (               reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    NUM             reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    ¿               reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    NEG             reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    SUB             reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    ,               reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    ;               reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    ]               reduce using rule 58 (AtribNum -> ID LARROW AtribOp .)
    RARROW          shift and go to state 96

  ! RARROW          [ reduce using rule 58 (AtribNum -> ID LARROW AtribOp .) ]


state 127

    (28) IfElse -> IfScope AtribOp Body ElseScope . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    {               shift and go to state 100
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    Body                           shift and go to state 148
    Block                          shift and go to state 101
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 128

    (27) ElseScope -> ELSE .

    {               reduce using rule 27 (ElseScope -> ELSE .)
    ID              reduce using rule 27 (ElseScope -> ELSE .)
    IF              reduce using rule 27 (ElseScope -> ELSE .)
    WHILE           reduce using rule 27 (ElseScope -> ELSE .)
    SWITCH          reduce using rule 27 (ElseScope -> ELSE .)
    (               reduce using rule 27 (ElseScope -> ELSE .)
    NUM             reduce using rule 27 (ElseScope -> ELSE .)
    ¿               reduce using rule 27 (ElseScope -> ELSE .)
    NEG             reduce using rule 27 (ElseScope -> ELSE .)
    SUB             reduce using rule 27 (ElseScope -> ELSE .)


state 129

    (14) Body -> { } .

    ELSE            reduce using rule 14 (Body -> { } .)
    ID              reduce using rule 14 (Body -> { } .)
    IF              reduce using rule 14 (Body -> { } .)
    WHILE           reduce using rule 14 (Body -> { } .)
    SWITCH          reduce using rule 14 (Body -> { } .)
    (               reduce using rule 14 (Body -> { } .)
    NUM             reduce using rule 14 (Body -> { } .)
    ¿               reduce using rule 14 (Body -> { } .)
    NEG             reduce using rule 14 (Body -> { } .)
    SUB             reduce using rule 14 (Body -> { } .)
    $end            reduce using rule 14 (Body -> { } .)
    }               reduce using rule 14 (Body -> { } .)
    :               reduce using rule 14 (Body -> { } .)


state 130

    (16) Body -> { Code . }
    (6) Code -> Code . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    }               shift and go to state 149
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Block                          shift and go to state 150
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 131

    (7) Code -> Block .

    }               reduce using rule 7 (Code -> Block .)
    ID              reduce using rule 7 (Code -> Block .)
    IF              reduce using rule 7 (Code -> Block .)
    WHILE           reduce using rule 7 (Code -> Block .)
    SWITCH          reduce using rule 7 (Code -> Block .)
    (               reduce using rule 7 (Code -> Block .)
    NUM             reduce using rule 7 (Code -> Block .)
    ¿               reduce using rule 7 (Code -> Block .)
    NEG             reduce using rule 7 (Code -> Block .)
    SUB             reduce using rule 7 (Code -> Block .)


state 132

    (57) DeclAtrib -> AtribOp RARROW ID ID .

    ;               reduce using rule 57 (DeclAtrib -> AtribOp RARROW ID ID .)


state 133

    (53) AtribArray -> AtribOp RARROW ID ArraySize .
    (54) ArraySize -> ArraySize . [ AtribOp ]

    ;               reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    RARROW          reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    )               reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    {               reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ID              reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    IF              reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    WHILE           reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCH          reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    (               reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NUM             reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ¿               reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NEG             reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SUB             reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ,               reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ]               reduce using rule 53 (AtribArray -> AtribOp RARROW ID ArraySize .)
    [               shift and go to state 93


state 134

    (30) While -> WhileScope ( AtribOp ) . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    {               shift and go to state 100
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    WhileScope                     shift and go to state 20
    AtribOp                        shift and go to state 19
    Body                           shift and go to state 151
    Block                          shift and go to state 101
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 135

    (32) Switch -> SwitchScope Conds { Cases . }
    (37) Cases -> Cases . Case
    (39) Case -> . ID : Body
    (40) Case -> . : Body

    }               shift and go to state 152
    ID              shift and go to state 137
    :               shift and go to state 138

    Case                           shift and go to state 153

state 136

    (38) Cases -> Case .

    }               reduce using rule 38 (Cases -> Case .)
    ID              reduce using rule 38 (Cases -> Case .)
    :               reduce using rule 38 (Cases -> Case .)


state 137

    (39) Case -> ID . : Body

    :               shift and go to state 154


state 138

    (40) Case -> : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    {               shift and go to state 100
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Body                           shift and go to state 155
    Block                          shift and go to state 101
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 139

    (33) Conds -> Conds , Cond .

    {               reduce using rule 33 (Conds -> Conds , Cond .)
    ,               reduce using rule 33 (Conds -> Conds , Cond .)


state 140

    (35) Cond -> ID ( AtribOp . )
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 156
    RARROW          shift and go to state 96


state 141

    (36) Cond -> ( AtribOp ) .

    {               reduce using rule 36 (Cond -> ( AtribOp ) .)
    ,               reduce using rule 36 (Cond -> ( AtribOp ) .)


state 142

    (50) DeclArraySize -> DeclArraySize [ NUM . ]

    ]               shift and go to state 157


state 143

    (51) DeclArraySize -> [ NUM ] .

    [               reduce using rule 51 (DeclArraySize -> [ NUM ] .)
    ;               reduce using rule 51 (DeclArraySize -> [ NUM ] .)


state 144

    (19) FunCases -> FunExtra RARROW ID .

    {               reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    ID              reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    IF              reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    WHILE           reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SWITCH          reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    (               reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    NUM             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    ¿               reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    NEG             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SUB             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)


state 145

    (23) FunExtra -> FunExtra , ID .

    RARROW          reduce using rule 23 (FunExtra -> FunExtra , ID .)
    ,               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    {               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    ID              reduce using rule 23 (FunExtra -> FunExtra , ID .)
    IF              reduce using rule 23 (FunExtra -> FunExtra , ID .)
    WHILE           reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SWITCH          reduce using rule 23 (FunExtra -> FunExtra , ID .)
    (               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    NUM             reduce using rule 23 (FunExtra -> FunExtra , ID .)
    ¿               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    NEG             reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SUB             reduce using rule 23 (FunExtra -> FunExtra , ID .)


state 146

    (88) FunRec -> FunRec , AtribOp .
    (59) AtribNum -> AtribOp . RARROW ID
    (53) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 88 (FunRec -> FunRec , AtribOp .)
    )               reduce using rule 88 (FunRec -> FunRec , AtribOp .)
    RARROW          shift and go to state 96


state 147

    (54) ArraySize -> ArraySize [ AtribOp ] .

    LARROW          reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    [               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    ?               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    POW             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    MUL             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    DIV             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    ADD             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    SUB             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    AND             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    OR              reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    LESSER          reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    GREATER         reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    LEQ             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    GEQ             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    EQUAL           reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    ;               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    RARROW          reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    )               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    {               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    ID              reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    IF              reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    WHILE           reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCH          reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    (               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    NUM             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    ¿               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    NEG             reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    ,               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)
    ]               reduce using rule 54 (ArraySize -> ArraySize [ AtribOp ] .)


state 148

    (28) IfElse -> IfScope AtribOp Body ElseScope Body .

    ID              reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    IF              reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    WHILE           reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCH          reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    (               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NUM             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ¿               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NEG             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SUB             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    $end            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ELSE            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    }               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    :               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)


state 149

    (16) Body -> { Code } .

    ELSE            reduce using rule 16 (Body -> { Code } .)
    ID              reduce using rule 16 (Body -> { Code } .)
    IF              reduce using rule 16 (Body -> { Code } .)
    WHILE           reduce using rule 16 (Body -> { Code } .)
    SWITCH          reduce using rule 16 (Body -> { Code } .)
    (               reduce using rule 16 (Body -> { Code } .)
    NUM             reduce using rule 16 (Body -> { Code } .)
    ¿               reduce using rule 16 (Body -> { Code } .)
    NEG             reduce using rule 16 (Body -> { Code } .)
    SUB             reduce using rule 16 (Body -> { Code } .)
    $end            reduce using rule 16 (Body -> { Code } .)
    }               reduce using rule 16 (Body -> { Code } .)
    :               reduce using rule 16 (Body -> { Code } .)


state 150

    (6) Code -> Code Block .

    }               reduce using rule 6 (Code -> Code Block .)
    ID              reduce using rule 6 (Code -> Code Block .)
    IF              reduce using rule 6 (Code -> Code Block .)
    WHILE           reduce using rule 6 (Code -> Code Block .)
    SWITCH          reduce using rule 6 (Code -> Code Block .)
    (               reduce using rule 6 (Code -> Code Block .)
    NUM             reduce using rule 6 (Code -> Code Block .)
    ¿               reduce using rule 6 (Code -> Code Block .)
    NEG             reduce using rule 6 (Code -> Code Block .)
    SUB             reduce using rule 6 (Code -> Code Block .)


state 151

    (30) While -> WhileScope ( AtribOp ) Body .

    ID              reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    IF              reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    WHILE           reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SWITCH          reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    (               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    NUM             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    ¿               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    NEG             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SUB             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    $end            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    ELSE            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    }               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    :               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)


state 152

    (32) Switch -> SwitchScope Conds { Cases } .

    ID              reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    IF              reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    WHILE           reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    SWITCH          reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    (               reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    NUM             reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    ¿               reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    NEG             reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    SUB             reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    $end            reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    ELSE            reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    }               reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)
    :               reduce using rule 32 (Switch -> SwitchScope Conds { Cases } .)


state 153

    (37) Cases -> Cases Case .

    }               reduce using rule 37 (Cases -> Cases Case .)
    ID              reduce using rule 37 (Cases -> Cases Case .)
    :               reduce using rule 37 (Cases -> Cases Case .)


state 154

    (39) Case -> ID : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (85) FunCall -> . ID ( FunArg )
    (41) Exp -> . Atrib
    (42) Exp -> . Op
    (43) Exp -> . Decl
    (44) Exp -> . DeclArray
    (45) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (32) Switch -> . SwitchScope Conds { Cases }
    (61) Atrib -> . ID LARROW AtribOp
    (62) Atrib -> . AtribOp RARROW ID
    (63) Atrib -> . ID SWAP ID
    (64) Atrib -> . AtribArray
    (65) Op -> . OpBin
    (48) Decl -> . ID ID
    (49) DeclArray -> . ID ID DeclArraySize
    (56) DeclAtrib -> . ID ID LARROW AtribOp
    (57) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCH
    (46) AtribOp -> . AtribNum
    (47) AtribOp -> . Op
    (52) AtribArray -> . ID ArraySize LARROW AtribOp
    (53) AtribArray -> . AtribOp RARROW ID ArraySize
    (71) OpBin -> . OpBin OpLogico TermPlus
    (72) OpBin -> . TermPlus
    (58) AtribNum -> . ID LARROW AtribOp
    (59) AtribNum -> . AtribOp RARROW ID
    (60) AtribNum -> . AtribArray
    (73) TermPlus -> . TermPlus OpPlus TermMult
    (74) TermPlus -> . TermMult
    (75) TermMult -> . TermMult OpMult TermPow
    (76) TermMult -> . TermPow
    (77) TermPow -> . TermPow OpPow Base
    (78) TermPow -> . Base
    (79) Base -> . OpUno
    (80) Base -> . ( AtribOp )
    (81) Base -> . ID
    (82) Base -> . NUM
    (83) Base -> . FunCall
    (84) Base -> . ¿
    (66) OpUno -> . NEG Base
    (67) OpUno -> . AccessArray
    (68) OpUno -> . SUB Base
    (69) OpUno -> . Base ?
    (70) AccessArray -> . ID ArraySize

    {               shift and go to state 100
    ID              shift and go to state 99
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    SWITCH          shift and go to state 26
    (               shift and go to state 12
    NUM             shift and go to state 33
    ¿               shift and go to state 34
    NEG             shift and go to state 35
    SUB             shift and go to state 37

    Body                           shift and go to state 158
    Block                          shift and go to state 101
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 13
    Op                             shift and go to state 14
    Decl                           shift and go to state 15
    DeclArray                      shift and go to state 16
    DeclAtrib                      shift and go to state 17
    IfScope                        shift and go to state 18
    AtribOp                        shift and go to state 19
    WhileScope                     shift and go to state 20
    SwitchScope                    shift and go to state 21
    AtribArray                     shift and go to state 22
    OpBin                          shift and go to state 23
    AtribNum                       shift and go to state 27
    TermPlus                       shift and go to state 28
    TermMult                       shift and go to state 29
    TermPow                        shift and go to state 30
    Base                           shift and go to state 31
    OpUno                          shift and go to state 32
    AccessArray                    shift and go to state 36

state 155

    (40) Case -> : Body .

    }               reduce using rule 40 (Case -> : Body .)
    ID              reduce using rule 40 (Case -> : Body .)
    :               reduce using rule 40 (Case -> : Body .)


state 156

    (35) Cond -> ID ( AtribOp ) .

    {               reduce using rule 35 (Cond -> ID ( AtribOp ) .)
    ,               reduce using rule 35 (Cond -> ID ( AtribOp ) .)


state 157

    (50) DeclArraySize -> DeclArraySize [ NUM ] .

    [               reduce using rule 50 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ;               reduce using rule 50 (DeclArraySize -> DeclArraySize [ NUM ] .)


state 158

    (39) Case -> ID : Body .

    }               reduce using rule 39 (Case -> ID : Body .)
    ID              reduce using rule 39 (Case -> ID : Body .)
    :               reduce using rule 39 (Case -> ID : Body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 5 resolved as shift
WARNING: shift/reduce conflict for SUB in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for ( in state 50 resolved as shift
WARNING: shift/reduce conflict for ? in state 77 resolved as shift
WARNING: shift/reduce conflict for ( in state 78 resolved as shift
WARNING: shift/reduce conflict for ? in state 79 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 90 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 98 resolved as shift
WARNING: shift/reduce conflict for SUB in state 108 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 122 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 126 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (Start -> <empty>)
WARNING: rejected rule (Axiom -> <empty>) in state 0

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Start
Rule 1     Start -> Axiom
Rule 2     Start -> <empty>
Rule 3     Axiom -> Axiom Block
Rule 4     Axiom -> Axiom Function
Rule 5     Axiom -> <empty>
Rule 6     Code -> Code Block
Rule 7     Code -> Block
Rule 8     Block -> FunCall ;
Rule 9     Block -> Exp ;
Rule 10    Block -> If
Rule 11    Block -> IfElse
Rule 12    Block -> While
Rule 13    Block -> Switch
Rule 14    Body -> { }
Rule 15    Body -> Block
Rule 16    Body -> { Code }
Rule 17    Function -> ID FunScope FunCases Body
Rule 18    FunScope -> :
Rule 19    FunCases -> FunExtra RARROW ID
Rule 20    FunCases -> RARROW ID
Rule 21    FunCases -> FunExtra
Rule 22    FunCases -> <empty>
Rule 23    FunExtra -> FunExtra , ID
Rule 24    FunExtra -> ID
Rule 25    IfScope -> IF
Rule 26    If -> IfScope AtribOp Body
Rule 27    ElseScope -> ELSE
Rule 28    IfElse -> IfScope AtribOp Body ElseScope Body
Rule 29    WhileScope -> WHILE
Rule 30    While -> WhileScope ( AtribOp ) Body
Rule 31    SwitchScope -> SWITCHCOND
Rule 32    SwitchScope -> SWITCHCASE
Rule 33    Switch -> SwitchScope Conds { Cases }
Rule 34    Conds -> Conds , Cond
Rule 35    Conds -> Cond
Rule 36    Cond -> ID ( AtribOp )
Rule 37    Cond -> ( AtribOp )
Rule 38    Cases -> Cases Case
Rule 39    Cases -> Case
Rule 40    Case -> ID : Body
Rule 41    Case -> : Body
Rule 42    Exp -> STRING PRINT
Rule 43    Exp -> Atrib
Rule 44    Exp -> Op
Rule 45    Exp -> Decl
Rule 46    Exp -> DeclArray
Rule 47    Exp -> DeclAtrib
Rule 48    AtribOp -> AtribNum
Rule 49    AtribOp -> Op
Rule 50    Decl -> ID ID
Rule 51    DeclArray -> ID ID DeclArraySize
Rule 52    DeclArraySize -> DeclArraySize [ NUM ]
Rule 53    DeclArraySize -> [ NUM ]
Rule 54    AtribArray -> ID ArraySize LARROW AtribOp
Rule 55    AtribArray -> AtribOp RARROW ID ArraySize
Rule 56    ArraySize -> ArraySize [ AtribOp ]
Rule 57    ArraySize -> [ AtribOp ]
Rule 58    DeclAtrib -> ID ID LARROW AtribOp
Rule 59    DeclAtrib -> AtribOp RARROW ID ID
Rule 60    AtribNum -> ID LARROW AtribOp
Rule 61    AtribNum -> AtribOp RARROW ID
Rule 62    AtribNum -> AtribArray
Rule 63    Atrib -> ID LARROW AtribOp
Rule 64    Atrib -> AtribOp RARROW ID
Rule 65    Atrib -> ID SWAP ID
Rule 66    Atrib -> AtribArray
Rule 67    Op -> OpBin
Rule 68    OpUno -> NEG Base
Rule 69    OpUno -> AccessArray
Rule 70    OpUno -> SUB Base
Rule 71    OpUno -> Base PRINT
Rule 72    AccessArray -> ID ArraySize
Rule 73    OpBin -> OpBin OpLogico TermPlus
Rule 74    OpBin -> TermPlus
Rule 75    TermPlus -> TermPlus OpPlus TermMult
Rule 76    TermPlus -> TermMult
Rule 77    TermMult -> TermMult OpMult TermPow
Rule 78    TermMult -> TermPow
Rule 79    TermPow -> TermPow OpPow Base
Rule 80    TermPow -> Base
Rule 81    Base -> OpUno
Rule 82    Base -> ( AtribOp )
Rule 83    Base -> ID
Rule 84    Base -> NUM
Rule 85    Base -> FunCall
Rule 86    Base -> READ
Rule 87    FunCall -> ID ( FunArg )
Rule 88    FunArg -> FunRec
Rule 89    FunArg -> <empty>
Rule 90    FunRec -> FunRec , AtribOp
Rule 91    FunRec -> AtribOp
Rule 92    OpLogico -> AND
Rule 93    OpLogico -> OR
Rule 94    OpLogico -> LESSER
Rule 95    OpLogico -> GREATER
Rule 96    OpLogico -> LEQ
Rule 97    OpLogico -> GEQ
Rule 98    OpLogico -> EQUAL
Rule 99    OpPlus -> ADD
Rule 100   OpPlus -> SUB
Rule 101   OpMult -> MUL
Rule 102   OpMult -> DIV
Rule 103   OpPow -> POW

Terminals, with rules where they appear

(                    : 30 36 37 82 87
)                    : 30 36 37 82 87
,                    : 23 34 90
:                    : 18 40 41
;                    : 8 9
ADD                  : 99
AND                  : 92
DIV                  : 102
ELSE                 : 27
EQUAL                : 98
GEQ                  : 97
GREATER              : 95
ID                   : 17 19 20 23 24 36 40 50 50 51 51 54 55 58 58 59 59 60 61 63 64 65 65 72 83 87
IF                   : 25
LARROW               : 54 58 60 63
LEQ                  : 96
LESSER               : 94
MUL                  : 101
NEG                  : 68
NUM                  : 52 53 84
OR                   : 93
POW                  : 103
PRINT                : 42 71
RARROW               : 19 20 55 59 61 64
READ                 : 86
STRING               : 42
SUB                  : 70 100
SWAP                 : 65
SWITCHCASE           : 32
SWITCHCOND           : 31
WHILE                : 29
[                    : 52 53 56 57
]                    : 52 53 56 57
error                : 
{                    : 14 16 33
}                    : 14 16 33

Nonterminals, with rules where they appear

AccessArray          : 69
ArraySize            : 54 55 56 72
Atrib                : 43
AtribArray           : 62 66
AtribNum             : 48
AtribOp              : 26 28 30 36 37 54 55 56 57 58 59 60 61 63 64 82 90 91
Axiom                : 1 3 4
Base                 : 68 70 71 79 80
Block                : 3 6 7 15
Body                 : 17 26 28 28 30 40 41
Case                 : 38 39
Cases                : 33 38
Code                 : 6 16
Cond                 : 34 35
Conds                : 33 34
Decl                 : 45
DeclArray            : 46
DeclArraySize        : 51 52
DeclAtrib            : 47
ElseScope            : 28
Exp                  : 9
FunArg               : 87
FunCall              : 8 85
FunCases             : 17
FunExtra             : 19 21 23
FunRec               : 88 90
FunScope             : 17
Function             : 4
If                   : 10
IfElse               : 11
IfScope              : 26 28
Op                   : 44 49
OpBin                : 67 73
OpLogico             : 73
OpMult               : 77
OpPlus               : 75
OpPow                : 79
OpUno                : 81
Start                : 0
Switch               : 13
SwitchScope          : 33
TermMult             : 75 76 77
TermPlus             : 73 74 75
TermPow              : 77 78 79
While                : 12
WhileScope           : 30

Parsing method: LALR

state 0

    (0) S' -> . Start
    (1) Start -> . Axiom
    (2) Start -> .
    (3) Axiom -> . Axiom Block
    (4) Axiom -> . Axiom Function
    (5) Axiom -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (Start -> .)
    $end            reduce using rule 2 (Start -> .)
    ID              reduce using rule 5 (Axiom -> .)
    STRING          reduce using rule 5 (Axiom -> .)
    IF              reduce using rule 5 (Axiom -> .)
    WHILE           reduce using rule 5 (Axiom -> .)
    SWITCHCOND      reduce using rule 5 (Axiom -> .)
    SWITCHCASE      reduce using rule 5 (Axiom -> .)
    (               reduce using rule 5 (Axiom -> .)
    NUM             reduce using rule 5 (Axiom -> .)
    READ            reduce using rule 5 (Axiom -> .)
    NEG             reduce using rule 5 (Axiom -> .)
    SUB             reduce using rule 5 (Axiom -> .)

  ! $end            [ reduce using rule 5 (Axiom -> .) ]

    Start                          shift and go to state 1
    Axiom                          shift and go to state 2

state 1

    (0) S' -> Start .



state 2

    (1) Start -> Axiom .
    (3) Axiom -> Axiom . Block
    (4) Axiom -> Axiom . Function
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (17) Function -> . ID FunScope FunCases Body
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    $end            reduce using rule 1 (Start -> Axiom .)
    ID              shift and go to state 11
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Block                          shift and go to state 3
    Function                       shift and go to state 4
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 3

    (3) Axiom -> Axiom Block .

    ID              reduce using rule 3 (Axiom -> Axiom Block .)
    STRING          reduce using rule 3 (Axiom -> Axiom Block .)
    IF              reduce using rule 3 (Axiom -> Axiom Block .)
    WHILE           reduce using rule 3 (Axiom -> Axiom Block .)
    SWITCHCOND      reduce using rule 3 (Axiom -> Axiom Block .)
    SWITCHCASE      reduce using rule 3 (Axiom -> Axiom Block .)
    (               reduce using rule 3 (Axiom -> Axiom Block .)
    NUM             reduce using rule 3 (Axiom -> Axiom Block .)
    READ            reduce using rule 3 (Axiom -> Axiom Block .)
    NEG             reduce using rule 3 (Axiom -> Axiom Block .)
    SUB             reduce using rule 3 (Axiom -> Axiom Block .)
    $end            reduce using rule 3 (Axiom -> Axiom Block .)


state 4

    (4) Axiom -> Axiom Function .

    ID              reduce using rule 4 (Axiom -> Axiom Function .)
    STRING          reduce using rule 4 (Axiom -> Axiom Function .)
    IF              reduce using rule 4 (Axiom -> Axiom Function .)
    WHILE           reduce using rule 4 (Axiom -> Axiom Function .)
    SWITCHCOND      reduce using rule 4 (Axiom -> Axiom Function .)
    SWITCHCASE      reduce using rule 4 (Axiom -> Axiom Function .)
    (               reduce using rule 4 (Axiom -> Axiom Function .)
    NUM             reduce using rule 4 (Axiom -> Axiom Function .)
    READ            reduce using rule 4 (Axiom -> Axiom Function .)
    NEG             reduce using rule 4 (Axiom -> Axiom Function .)
    SUB             reduce using rule 4 (Axiom -> Axiom Function .)
    $end            reduce using rule 4 (Axiom -> Axiom Function .)


state 5

    (8) Block -> FunCall . ;
    (85) Base -> FunCall .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 40
    PRINT           reduce using rule 85 (Base -> FunCall .)
    POW             reduce using rule 85 (Base -> FunCall .)
    MUL             reduce using rule 85 (Base -> FunCall .)
    DIV             reduce using rule 85 (Base -> FunCall .)
    ADD             reduce using rule 85 (Base -> FunCall .)
    SUB             reduce using rule 85 (Base -> FunCall .)
    AND             reduce using rule 85 (Base -> FunCall .)
    OR              reduce using rule 85 (Base -> FunCall .)
    LESSER          reduce using rule 85 (Base -> FunCall .)
    GREATER         reduce using rule 85 (Base -> FunCall .)
    LEQ             reduce using rule 85 (Base -> FunCall .)
    GEQ             reduce using rule 85 (Base -> FunCall .)
    EQUAL           reduce using rule 85 (Base -> FunCall .)
    RARROW          reduce using rule 85 (Base -> FunCall .)

  ! ;               [ reduce using rule 85 (Base -> FunCall .) ]


state 6

    (9) Block -> Exp . ;

    ;               shift and go to state 41


state 7

    (10) Block -> If .

    ID              reduce using rule 10 (Block -> If .)
    STRING          reduce using rule 10 (Block -> If .)
    IF              reduce using rule 10 (Block -> If .)
    WHILE           reduce using rule 10 (Block -> If .)
    SWITCHCOND      reduce using rule 10 (Block -> If .)
    SWITCHCASE      reduce using rule 10 (Block -> If .)
    (               reduce using rule 10 (Block -> If .)
    NUM             reduce using rule 10 (Block -> If .)
    READ            reduce using rule 10 (Block -> If .)
    NEG             reduce using rule 10 (Block -> If .)
    SUB             reduce using rule 10 (Block -> If .)
    $end            reduce using rule 10 (Block -> If .)
    ELSE            reduce using rule 10 (Block -> If .)
    }               reduce using rule 10 (Block -> If .)
    :               reduce using rule 10 (Block -> If .)


state 8

    (11) Block -> IfElse .

    ID              reduce using rule 11 (Block -> IfElse .)
    STRING          reduce using rule 11 (Block -> IfElse .)
    IF              reduce using rule 11 (Block -> IfElse .)
    WHILE           reduce using rule 11 (Block -> IfElse .)
    SWITCHCOND      reduce using rule 11 (Block -> IfElse .)
    SWITCHCASE      reduce using rule 11 (Block -> IfElse .)
    (               reduce using rule 11 (Block -> IfElse .)
    NUM             reduce using rule 11 (Block -> IfElse .)
    READ            reduce using rule 11 (Block -> IfElse .)
    NEG             reduce using rule 11 (Block -> IfElse .)
    SUB             reduce using rule 11 (Block -> IfElse .)
    $end            reduce using rule 11 (Block -> IfElse .)
    ELSE            reduce using rule 11 (Block -> IfElse .)
    }               reduce using rule 11 (Block -> IfElse .)
    :               reduce using rule 11 (Block -> IfElse .)


state 9

    (12) Block -> While .

    ID              reduce using rule 12 (Block -> While .)
    STRING          reduce using rule 12 (Block -> While .)
    IF              reduce using rule 12 (Block -> While .)
    WHILE           reduce using rule 12 (Block -> While .)
    SWITCHCOND      reduce using rule 12 (Block -> While .)
    SWITCHCASE      reduce using rule 12 (Block -> While .)
    (               reduce using rule 12 (Block -> While .)
    NUM             reduce using rule 12 (Block -> While .)
    READ            reduce using rule 12 (Block -> While .)
    NEG             reduce using rule 12 (Block -> While .)
    SUB             reduce using rule 12 (Block -> While .)
    $end            reduce using rule 12 (Block -> While .)
    ELSE            reduce using rule 12 (Block -> While .)
    }               reduce using rule 12 (Block -> While .)
    :               reduce using rule 12 (Block -> While .)


state 10

    (13) Block -> Switch .

    ID              reduce using rule 13 (Block -> Switch .)
    STRING          reduce using rule 13 (Block -> Switch .)
    IF              reduce using rule 13 (Block -> Switch .)
    WHILE           reduce using rule 13 (Block -> Switch .)
    SWITCHCOND      reduce using rule 13 (Block -> Switch .)
    SWITCHCASE      reduce using rule 13 (Block -> Switch .)
    (               reduce using rule 13 (Block -> Switch .)
    NUM             reduce using rule 13 (Block -> Switch .)
    READ            reduce using rule 13 (Block -> Switch .)
    NEG             reduce using rule 13 (Block -> Switch .)
    SUB             reduce using rule 13 (Block -> Switch .)
    $end            reduce using rule 13 (Block -> Switch .)
    ELSE            reduce using rule 13 (Block -> Switch .)
    }               reduce using rule 13 (Block -> Switch .)
    :               reduce using rule 13 (Block -> Switch .)


state 11

    (17) Function -> ID . FunScope FunCases Body
    (87) FunCall -> ID . ( FunArg )
    (63) Atrib -> ID . LARROW AtribOp
    (65) Atrib -> ID . SWAP ID
    (50) Decl -> ID . ID
    (51) DeclArray -> ID . ID DeclArraySize
    (58) DeclAtrib -> ID . ID LARROW AtribOp
    (54) AtribArray -> ID . ArraySize LARROW AtribOp
    (60) AtribNum -> ID . LARROW AtribOp
    (83) Base -> ID .
    (72) AccessArray -> ID . ArraySize
    (18) FunScope -> . :
    (56) ArraySize -> . ArraySize [ AtribOp ]
    (57) ArraySize -> . [ AtribOp ]

    (               shift and go to state 44
    LARROW          shift and go to state 45
    SWAP            shift and go to state 46
    ID              shift and go to state 42
    PRINT           reduce using rule 83 (Base -> ID .)
    POW             reduce using rule 83 (Base -> ID .)
    MUL             reduce using rule 83 (Base -> ID .)
    DIV             reduce using rule 83 (Base -> ID .)
    ADD             reduce using rule 83 (Base -> ID .)
    SUB             reduce using rule 83 (Base -> ID .)
    AND             reduce using rule 83 (Base -> ID .)
    OR              reduce using rule 83 (Base -> ID .)
    LESSER          reduce using rule 83 (Base -> ID .)
    GREATER         reduce using rule 83 (Base -> ID .)
    LEQ             reduce using rule 83 (Base -> ID .)
    GEQ             reduce using rule 83 (Base -> ID .)
    EQUAL           reduce using rule 83 (Base -> ID .)
    ;               reduce using rule 83 (Base -> ID .)
    RARROW          reduce using rule 83 (Base -> ID .)
    :               shift and go to state 48
    [               shift and go to state 49

    FunScope                       shift and go to state 43
    ArraySize                      shift and go to state 47

state 12

    (82) Base -> ( . AtribOp )
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 50
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 13

    (42) Exp -> STRING . PRINT

    PRINT           shift and go to state 55


state 14

    (43) Exp -> Atrib .

    ;               reduce using rule 43 (Exp -> Atrib .)


state 15

    (44) Exp -> Op .
    (49) AtribOp -> Op .

    ;               reduce using rule 44 (Exp -> Op .)
    RARROW          reduce using rule 49 (AtribOp -> Op .)


state 16

    (45) Exp -> Decl .

    ;               reduce using rule 45 (Exp -> Decl .)


state 17

    (46) Exp -> DeclArray .

    ;               reduce using rule 46 (Exp -> DeclArray .)


state 18

    (47) Exp -> DeclAtrib .

    ;               reduce using rule 47 (Exp -> DeclAtrib .)


state 19

    (26) If -> IfScope . AtribOp Body
    (28) IfElse -> IfScope . AtribOp Body ElseScope Body
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 56
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 20

    (64) Atrib -> AtribOp . RARROW ID
    (59) DeclAtrib -> AtribOp . RARROW ID ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize
    (61) AtribNum -> AtribOp . RARROW ID

    RARROW          shift and go to state 57


state 21

    (30) While -> WhileScope . ( AtribOp ) Body

    (               shift and go to state 58


state 22

    (33) Switch -> SwitchScope . Conds { Cases }
    (34) Conds -> . Conds , Cond
    (35) Conds -> . Cond
    (36) Cond -> . ID ( AtribOp )
    (37) Cond -> . ( AtribOp )

    ID              shift and go to state 61
    (               shift and go to state 62

    Conds                          shift and go to state 59
    Cond                           shift and go to state 60

state 23

    (66) Atrib -> AtribArray .
    (62) AtribNum -> AtribArray .

    ;               reduce using rule 66 (Atrib -> AtribArray .)
    RARROW          reduce using rule 62 (AtribNum -> AtribArray .)


state 24

    (67) Op -> OpBin .
    (73) OpBin -> OpBin . OpLogico TermPlus
    (92) OpLogico -> . AND
    (93) OpLogico -> . OR
    (94) OpLogico -> . LESSER
    (95) OpLogico -> . GREATER
    (96) OpLogico -> . LEQ
    (97) OpLogico -> . GEQ
    (98) OpLogico -> . EQUAL

    ;               reduce using rule 67 (Op -> OpBin .)
    RARROW          reduce using rule 67 (Op -> OpBin .)
    )               reduce using rule 67 (Op -> OpBin .)
    {               reduce using rule 67 (Op -> OpBin .)
    ID              reduce using rule 67 (Op -> OpBin .)
    STRING          reduce using rule 67 (Op -> OpBin .)
    IF              reduce using rule 67 (Op -> OpBin .)
    WHILE           reduce using rule 67 (Op -> OpBin .)
    SWITCHCOND      reduce using rule 67 (Op -> OpBin .)
    SWITCHCASE      reduce using rule 67 (Op -> OpBin .)
    (               reduce using rule 67 (Op -> OpBin .)
    NUM             reduce using rule 67 (Op -> OpBin .)
    READ            reduce using rule 67 (Op -> OpBin .)
    NEG             reduce using rule 67 (Op -> OpBin .)
    SUB             reduce using rule 67 (Op -> OpBin .)
    ,               reduce using rule 67 (Op -> OpBin .)
    ]               reduce using rule 67 (Op -> OpBin .)
    AND             shift and go to state 64
    OR              shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    LEQ             shift and go to state 68
    GEQ             shift and go to state 69
    EQUAL           shift and go to state 70

    OpLogico                       shift and go to state 63

state 25

    (25) IfScope -> IF .

    ID              reduce using rule 25 (IfScope -> IF .)
    (               reduce using rule 25 (IfScope -> IF .)
    NUM             reduce using rule 25 (IfScope -> IF .)
    READ            reduce using rule 25 (IfScope -> IF .)
    NEG             reduce using rule 25 (IfScope -> IF .)
    SUB             reduce using rule 25 (IfScope -> IF .)


state 26

    (29) WhileScope -> WHILE .

    (               reduce using rule 29 (WhileScope -> WHILE .)


state 27

    (31) SwitchScope -> SWITCHCOND .

    ID              reduce using rule 31 (SwitchScope -> SWITCHCOND .)
    (               reduce using rule 31 (SwitchScope -> SWITCHCOND .)


state 28

    (32) SwitchScope -> SWITCHCASE .

    ID              reduce using rule 32 (SwitchScope -> SWITCHCASE .)
    (               reduce using rule 32 (SwitchScope -> SWITCHCASE .)


state 29

    (48) AtribOp -> AtribNum .

    RARROW          reduce using rule 48 (AtribOp -> AtribNum .)
    )               reduce using rule 48 (AtribOp -> AtribNum .)
    {               reduce using rule 48 (AtribOp -> AtribNum .)
    ID              reduce using rule 48 (AtribOp -> AtribNum .)
    STRING          reduce using rule 48 (AtribOp -> AtribNum .)
    IF              reduce using rule 48 (AtribOp -> AtribNum .)
    WHILE           reduce using rule 48 (AtribOp -> AtribNum .)
    SWITCHCOND      reduce using rule 48 (AtribOp -> AtribNum .)
    SWITCHCASE      reduce using rule 48 (AtribOp -> AtribNum .)
    (               reduce using rule 48 (AtribOp -> AtribNum .)
    NUM             reduce using rule 48 (AtribOp -> AtribNum .)
    READ            reduce using rule 48 (AtribOp -> AtribNum .)
    NEG             reduce using rule 48 (AtribOp -> AtribNum .)
    SUB             reduce using rule 48 (AtribOp -> AtribNum .)
    ,               reduce using rule 48 (AtribOp -> AtribNum .)
    ;               reduce using rule 48 (AtribOp -> AtribNum .)
    ]               reduce using rule 48 (AtribOp -> AtribNum .)


state 30

    (74) OpBin -> TermPlus .
    (75) TermPlus -> TermPlus . OpPlus TermMult
    (99) OpPlus -> . ADD
    (100) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 74 (OpBin -> TermPlus .)
    OR              reduce using rule 74 (OpBin -> TermPlus .)
    LESSER          reduce using rule 74 (OpBin -> TermPlus .)
    GREATER         reduce using rule 74 (OpBin -> TermPlus .)
    LEQ             reduce using rule 74 (OpBin -> TermPlus .)
    GEQ             reduce using rule 74 (OpBin -> TermPlus .)
    EQUAL           reduce using rule 74 (OpBin -> TermPlus .)
    ;               reduce using rule 74 (OpBin -> TermPlus .)
    RARROW          reduce using rule 74 (OpBin -> TermPlus .)
    )               reduce using rule 74 (OpBin -> TermPlus .)
    {               reduce using rule 74 (OpBin -> TermPlus .)
    ID              reduce using rule 74 (OpBin -> TermPlus .)
    STRING          reduce using rule 74 (OpBin -> TermPlus .)
    IF              reduce using rule 74 (OpBin -> TermPlus .)
    WHILE           reduce using rule 74 (OpBin -> TermPlus .)
    SWITCHCOND      reduce using rule 74 (OpBin -> TermPlus .)
    SWITCHCASE      reduce using rule 74 (OpBin -> TermPlus .)
    (               reduce using rule 74 (OpBin -> TermPlus .)
    NUM             reduce using rule 74 (OpBin -> TermPlus .)
    READ            reduce using rule 74 (OpBin -> TermPlus .)
    NEG             reduce using rule 74 (OpBin -> TermPlus .)
    ,               reduce using rule 74 (OpBin -> TermPlus .)
    ]               reduce using rule 74 (OpBin -> TermPlus .)
    ADD             shift and go to state 72
    SUB             shift and go to state 73

  ! SUB             [ reduce using rule 74 (OpBin -> TermPlus .) ]

    OpPlus                         shift and go to state 71

state 31

    (76) TermPlus -> TermMult .
    (77) TermMult -> TermMult . OpMult TermPow
    (101) OpMult -> . MUL
    (102) OpMult -> . DIV

    ADD             reduce using rule 76 (TermPlus -> TermMult .)
    SUB             reduce using rule 76 (TermPlus -> TermMult .)
    AND             reduce using rule 76 (TermPlus -> TermMult .)
    OR              reduce using rule 76 (TermPlus -> TermMult .)
    LESSER          reduce using rule 76 (TermPlus -> TermMult .)
    GREATER         reduce using rule 76 (TermPlus -> TermMult .)
    LEQ             reduce using rule 76 (TermPlus -> TermMult .)
    GEQ             reduce using rule 76 (TermPlus -> TermMult .)
    EQUAL           reduce using rule 76 (TermPlus -> TermMult .)
    ;               reduce using rule 76 (TermPlus -> TermMult .)
    RARROW          reduce using rule 76 (TermPlus -> TermMult .)
    )               reduce using rule 76 (TermPlus -> TermMult .)
    {               reduce using rule 76 (TermPlus -> TermMult .)
    ID              reduce using rule 76 (TermPlus -> TermMult .)
    STRING          reduce using rule 76 (TermPlus -> TermMult .)
    IF              reduce using rule 76 (TermPlus -> TermMult .)
    WHILE           reduce using rule 76 (TermPlus -> TermMult .)
    SWITCHCOND      reduce using rule 76 (TermPlus -> TermMult .)
    SWITCHCASE      reduce using rule 76 (TermPlus -> TermMult .)
    (               reduce using rule 76 (TermPlus -> TermMult .)
    NUM             reduce using rule 76 (TermPlus -> TermMult .)
    READ            reduce using rule 76 (TermPlus -> TermMult .)
    NEG             reduce using rule 76 (TermPlus -> TermMult .)
    ,               reduce using rule 76 (TermPlus -> TermMult .)
    ]               reduce using rule 76 (TermPlus -> TermMult .)
    MUL             shift and go to state 75
    DIV             shift and go to state 76

    OpMult                         shift and go to state 74

state 32

    (78) TermMult -> TermPow .
    (79) TermPow -> TermPow . OpPow Base
    (103) OpPow -> . POW

    MUL             reduce using rule 78 (TermMult -> TermPow .)
    DIV             reduce using rule 78 (TermMult -> TermPow .)
    ADD             reduce using rule 78 (TermMult -> TermPow .)
    SUB             reduce using rule 78 (TermMult -> TermPow .)
    AND             reduce using rule 78 (TermMult -> TermPow .)
    OR              reduce using rule 78 (TermMult -> TermPow .)
    LESSER          reduce using rule 78 (TermMult -> TermPow .)
    GREATER         reduce using rule 78 (TermMult -> TermPow .)
    LEQ             reduce using rule 78 (TermMult -> TermPow .)
    GEQ             reduce using rule 78 (TermMult -> TermPow .)
    EQUAL           reduce using rule 78 (TermMult -> TermPow .)
    ;               reduce using rule 78 (TermMult -> TermPow .)
    RARROW          reduce using rule 78 (TermMult -> TermPow .)
    )               reduce using rule 78 (TermMult -> TermPow .)
    {               reduce using rule 78 (TermMult -> TermPow .)
    ID              reduce using rule 78 (TermMult -> TermPow .)
    STRING          reduce using rule 78 (TermMult -> TermPow .)
    IF              reduce using rule 78 (TermMult -> TermPow .)
    WHILE           reduce using rule 78 (TermMult -> TermPow .)
    SWITCHCOND      reduce using rule 78 (TermMult -> TermPow .)
    SWITCHCASE      reduce using rule 78 (TermMult -> TermPow .)
    (               reduce using rule 78 (TermMult -> TermPow .)
    NUM             reduce using rule 78 (TermMult -> TermPow .)
    READ            reduce using rule 78 (TermMult -> TermPow .)
    NEG             reduce using rule 78 (TermMult -> TermPow .)
    ,               reduce using rule 78 (TermMult -> TermPow .)
    ]               reduce using rule 78 (TermMult -> TermPow .)
    POW             shift and go to state 78

    OpPow                          shift and go to state 77

state 33

    (80) TermPow -> Base .
    (71) OpUno -> Base . PRINT

    POW             reduce using rule 80 (TermPow -> Base .)
    MUL             reduce using rule 80 (TermPow -> Base .)
    DIV             reduce using rule 80 (TermPow -> Base .)
    ADD             reduce using rule 80 (TermPow -> Base .)
    SUB             reduce using rule 80 (TermPow -> Base .)
    AND             reduce using rule 80 (TermPow -> Base .)
    OR              reduce using rule 80 (TermPow -> Base .)
    LESSER          reduce using rule 80 (TermPow -> Base .)
    GREATER         reduce using rule 80 (TermPow -> Base .)
    LEQ             reduce using rule 80 (TermPow -> Base .)
    GEQ             reduce using rule 80 (TermPow -> Base .)
    EQUAL           reduce using rule 80 (TermPow -> Base .)
    ;               reduce using rule 80 (TermPow -> Base .)
    RARROW          reduce using rule 80 (TermPow -> Base .)
    )               reduce using rule 80 (TermPow -> Base .)
    {               reduce using rule 80 (TermPow -> Base .)
    ID              reduce using rule 80 (TermPow -> Base .)
    STRING          reduce using rule 80 (TermPow -> Base .)
    IF              reduce using rule 80 (TermPow -> Base .)
    WHILE           reduce using rule 80 (TermPow -> Base .)
    SWITCHCOND      reduce using rule 80 (TermPow -> Base .)
    SWITCHCASE      reduce using rule 80 (TermPow -> Base .)
    (               reduce using rule 80 (TermPow -> Base .)
    NUM             reduce using rule 80 (TermPow -> Base .)
    READ            reduce using rule 80 (TermPow -> Base .)
    NEG             reduce using rule 80 (TermPow -> Base .)
    ,               reduce using rule 80 (TermPow -> Base .)
    ]               reduce using rule 80 (TermPow -> Base .)
    PRINT           shift and go to state 79


state 34

    (81) Base -> OpUno .

    PRINT           reduce using rule 81 (Base -> OpUno .)
    POW             reduce using rule 81 (Base -> OpUno .)
    MUL             reduce using rule 81 (Base -> OpUno .)
    DIV             reduce using rule 81 (Base -> OpUno .)
    ADD             reduce using rule 81 (Base -> OpUno .)
    SUB             reduce using rule 81 (Base -> OpUno .)
    AND             reduce using rule 81 (Base -> OpUno .)
    OR              reduce using rule 81 (Base -> OpUno .)
    LESSER          reduce using rule 81 (Base -> OpUno .)
    GREATER         reduce using rule 81 (Base -> OpUno .)
    LEQ             reduce using rule 81 (Base -> OpUno .)
    GEQ             reduce using rule 81 (Base -> OpUno .)
    EQUAL           reduce using rule 81 (Base -> OpUno .)
    ;               reduce using rule 81 (Base -> OpUno .)
    RARROW          reduce using rule 81 (Base -> OpUno .)
    )               reduce using rule 81 (Base -> OpUno .)
    {               reduce using rule 81 (Base -> OpUno .)
    ID              reduce using rule 81 (Base -> OpUno .)
    STRING          reduce using rule 81 (Base -> OpUno .)
    IF              reduce using rule 81 (Base -> OpUno .)
    WHILE           reduce using rule 81 (Base -> OpUno .)
    SWITCHCOND      reduce using rule 81 (Base -> OpUno .)
    SWITCHCASE      reduce using rule 81 (Base -> OpUno .)
    (               reduce using rule 81 (Base -> OpUno .)
    NUM             reduce using rule 81 (Base -> OpUno .)
    READ            reduce using rule 81 (Base -> OpUno .)
    NEG             reduce using rule 81 (Base -> OpUno .)
    ,               reduce using rule 81 (Base -> OpUno .)
    ]               reduce using rule 81 (Base -> OpUno .)


state 35

    (84) Base -> NUM .

    PRINT           reduce using rule 84 (Base -> NUM .)
    POW             reduce using rule 84 (Base -> NUM .)
    MUL             reduce using rule 84 (Base -> NUM .)
    DIV             reduce using rule 84 (Base -> NUM .)
    ADD             reduce using rule 84 (Base -> NUM .)
    SUB             reduce using rule 84 (Base -> NUM .)
    AND             reduce using rule 84 (Base -> NUM .)
    OR              reduce using rule 84 (Base -> NUM .)
    LESSER          reduce using rule 84 (Base -> NUM .)
    GREATER         reduce using rule 84 (Base -> NUM .)
    LEQ             reduce using rule 84 (Base -> NUM .)
    GEQ             reduce using rule 84 (Base -> NUM .)
    EQUAL           reduce using rule 84 (Base -> NUM .)
    ;               reduce using rule 84 (Base -> NUM .)
    RARROW          reduce using rule 84 (Base -> NUM .)
    )               reduce using rule 84 (Base -> NUM .)
    {               reduce using rule 84 (Base -> NUM .)
    ID              reduce using rule 84 (Base -> NUM .)
    STRING          reduce using rule 84 (Base -> NUM .)
    IF              reduce using rule 84 (Base -> NUM .)
    WHILE           reduce using rule 84 (Base -> NUM .)
    SWITCHCOND      reduce using rule 84 (Base -> NUM .)
    SWITCHCASE      reduce using rule 84 (Base -> NUM .)
    (               reduce using rule 84 (Base -> NUM .)
    NUM             reduce using rule 84 (Base -> NUM .)
    READ            reduce using rule 84 (Base -> NUM .)
    NEG             reduce using rule 84 (Base -> NUM .)
    ,               reduce using rule 84 (Base -> NUM .)
    ]               reduce using rule 84 (Base -> NUM .)


state 36

    (86) Base -> READ .

    PRINT           reduce using rule 86 (Base -> READ .)
    POW             reduce using rule 86 (Base -> READ .)
    MUL             reduce using rule 86 (Base -> READ .)
    DIV             reduce using rule 86 (Base -> READ .)
    ADD             reduce using rule 86 (Base -> READ .)
    SUB             reduce using rule 86 (Base -> READ .)
    AND             reduce using rule 86 (Base -> READ .)
    OR              reduce using rule 86 (Base -> READ .)
    LESSER          reduce using rule 86 (Base -> READ .)
    GREATER         reduce using rule 86 (Base -> READ .)
    LEQ             reduce using rule 86 (Base -> READ .)
    GEQ             reduce using rule 86 (Base -> READ .)
    EQUAL           reduce using rule 86 (Base -> READ .)
    ;               reduce using rule 86 (Base -> READ .)
    RARROW          reduce using rule 86 (Base -> READ .)
    )               reduce using rule 86 (Base -> READ .)
    {               reduce using rule 86 (Base -> READ .)
    ID              reduce using rule 86 (Base -> READ .)
    STRING          reduce using rule 86 (Base -> READ .)
    IF              reduce using rule 86 (Base -> READ .)
    WHILE           reduce using rule 86 (Base -> READ .)
    SWITCHCOND      reduce using rule 86 (Base -> READ .)
    SWITCHCASE      reduce using rule 86 (Base -> READ .)
    (               reduce using rule 86 (Base -> READ .)
    NUM             reduce using rule 86 (Base -> READ .)
    READ            reduce using rule 86 (Base -> READ .)
    NEG             reduce using rule 86 (Base -> READ .)
    ,               reduce using rule 86 (Base -> READ .)
    ]               reduce using rule 86 (Base -> READ .)


state 37

    (68) OpUno -> NEG . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 81
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Base                           shift and go to state 80
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 38

    (69) OpUno -> AccessArray .

    PRINT           reduce using rule 69 (OpUno -> AccessArray .)
    POW             reduce using rule 69 (OpUno -> AccessArray .)
    MUL             reduce using rule 69 (OpUno -> AccessArray .)
    DIV             reduce using rule 69 (OpUno -> AccessArray .)
    ADD             reduce using rule 69 (OpUno -> AccessArray .)
    SUB             reduce using rule 69 (OpUno -> AccessArray .)
    AND             reduce using rule 69 (OpUno -> AccessArray .)
    OR              reduce using rule 69 (OpUno -> AccessArray .)
    LESSER          reduce using rule 69 (OpUno -> AccessArray .)
    GREATER         reduce using rule 69 (OpUno -> AccessArray .)
    LEQ             reduce using rule 69 (OpUno -> AccessArray .)
    GEQ             reduce using rule 69 (OpUno -> AccessArray .)
    EQUAL           reduce using rule 69 (OpUno -> AccessArray .)
    ;               reduce using rule 69 (OpUno -> AccessArray .)
    RARROW          reduce using rule 69 (OpUno -> AccessArray .)
    )               reduce using rule 69 (OpUno -> AccessArray .)
    {               reduce using rule 69 (OpUno -> AccessArray .)
    ID              reduce using rule 69 (OpUno -> AccessArray .)
    STRING          reduce using rule 69 (OpUno -> AccessArray .)
    IF              reduce using rule 69 (OpUno -> AccessArray .)
    WHILE           reduce using rule 69 (OpUno -> AccessArray .)
    SWITCHCOND      reduce using rule 69 (OpUno -> AccessArray .)
    SWITCHCASE      reduce using rule 69 (OpUno -> AccessArray .)
    (               reduce using rule 69 (OpUno -> AccessArray .)
    NUM             reduce using rule 69 (OpUno -> AccessArray .)
    READ            reduce using rule 69 (OpUno -> AccessArray .)
    NEG             reduce using rule 69 (OpUno -> AccessArray .)
    ,               reduce using rule 69 (OpUno -> AccessArray .)
    ]               reduce using rule 69 (OpUno -> AccessArray .)


state 39

    (70) OpUno -> SUB . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 81
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Base                           shift and go to state 82
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 40

    (8) Block -> FunCall ; .

    ID              reduce using rule 8 (Block -> FunCall ; .)
    STRING          reduce using rule 8 (Block -> FunCall ; .)
    IF              reduce using rule 8 (Block -> FunCall ; .)
    WHILE           reduce using rule 8 (Block -> FunCall ; .)
    SWITCHCOND      reduce using rule 8 (Block -> FunCall ; .)
    SWITCHCASE      reduce using rule 8 (Block -> FunCall ; .)
    (               reduce using rule 8 (Block -> FunCall ; .)
    NUM             reduce using rule 8 (Block -> FunCall ; .)
    READ            reduce using rule 8 (Block -> FunCall ; .)
    NEG             reduce using rule 8 (Block -> FunCall ; .)
    SUB             reduce using rule 8 (Block -> FunCall ; .)
    $end            reduce using rule 8 (Block -> FunCall ; .)
    ELSE            reduce using rule 8 (Block -> FunCall ; .)
    }               reduce using rule 8 (Block -> FunCall ; .)
    :               reduce using rule 8 (Block -> FunCall ; .)


state 41

    (9) Block -> Exp ; .

    ID              reduce using rule 9 (Block -> Exp ; .)
    STRING          reduce using rule 9 (Block -> Exp ; .)
    IF              reduce using rule 9 (Block -> Exp ; .)
    WHILE           reduce using rule 9 (Block -> Exp ; .)
    SWITCHCOND      reduce using rule 9 (Block -> Exp ; .)
    SWITCHCASE      reduce using rule 9 (Block -> Exp ; .)
    (               reduce using rule 9 (Block -> Exp ; .)
    NUM             reduce using rule 9 (Block -> Exp ; .)
    READ            reduce using rule 9 (Block -> Exp ; .)
    NEG             reduce using rule 9 (Block -> Exp ; .)
    SUB             reduce using rule 9 (Block -> Exp ; .)
    $end            reduce using rule 9 (Block -> Exp ; .)
    ELSE            reduce using rule 9 (Block -> Exp ; .)
    }               reduce using rule 9 (Block -> Exp ; .)
    :               reduce using rule 9 (Block -> Exp ; .)


state 42

    (50) Decl -> ID ID .
    (51) DeclArray -> ID ID . DeclArraySize
    (58) DeclAtrib -> ID ID . LARROW AtribOp
    (52) DeclArraySize -> . DeclArraySize [ NUM ]
    (53) DeclArraySize -> . [ NUM ]

    ;               reduce using rule 50 (Decl -> ID ID .)
    LARROW          shift and go to state 84
    [               shift and go to state 85

    DeclArraySize                  shift and go to state 83

state 43

    (17) Function -> ID FunScope . FunCases Body
    (19) FunCases -> . FunExtra RARROW ID
    (20) FunCases -> . RARROW ID
    (21) FunCases -> . FunExtra
    (22) FunCases -> .
    (23) FunExtra -> . FunExtra , ID
    (24) FunExtra -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RARROW          shift and go to state 89
    {               reduce using rule 22 (FunCases -> .)
    STRING          reduce using rule 22 (FunCases -> .)
    IF              reduce using rule 22 (FunCases -> .)
    WHILE           reduce using rule 22 (FunCases -> .)
    SWITCHCOND      reduce using rule 22 (FunCases -> .)
    SWITCHCASE      reduce using rule 22 (FunCases -> .)
    (               reduce using rule 22 (FunCases -> .)
    NUM             reduce using rule 22 (FunCases -> .)
    READ            reduce using rule 22 (FunCases -> .)
    NEG             reduce using rule 22 (FunCases -> .)
    SUB             reduce using rule 22 (FunCases -> .)
    ID              shift and go to state 86

  ! ID              [ reduce using rule 22 (FunCases -> .) ]

    FunCases                       shift and go to state 87
    FunExtra                       shift and go to state 88

state 44

    (87) FunCall -> ID ( . FunArg )
    (88) FunArg -> . FunRec
    (89) FunArg -> .
    (90) FunRec -> . FunRec , AtribOp
    (91) FunRec -> . AtribOp
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    )               reduce using rule 89 (FunArg -> .)
    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    FunArg                         shift and go to state 90
    FunRec                         shift and go to state 91
    AtribOp                        shift and go to state 92
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 45

    (63) Atrib -> ID LARROW . AtribOp
    (60) AtribNum -> ID LARROW . AtribOp
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 93
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 46

    (65) Atrib -> ID SWAP . ID

    ID              shift and go to state 94


state 47

    (54) AtribArray -> ID ArraySize . LARROW AtribOp
    (72) AccessArray -> ID ArraySize .
    (56) ArraySize -> ArraySize . [ AtribOp ]

    LARROW          shift and go to state 95
    PRINT           reduce using rule 72 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 72 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 72 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 72 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 72 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 72 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 72 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 72 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 72 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 72 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 72 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 72 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 72 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 72 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 72 (AccessArray -> ID ArraySize .)
    )               reduce using rule 72 (AccessArray -> ID ArraySize .)
    {               reduce using rule 72 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 72 (AccessArray -> ID ArraySize .)
    STRING          reduce using rule 72 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 72 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 72 (AccessArray -> ID ArraySize .)
    SWITCHCOND      reduce using rule 72 (AccessArray -> ID ArraySize .)
    SWITCHCASE      reduce using rule 72 (AccessArray -> ID ArraySize .)
    (               reduce using rule 72 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 72 (AccessArray -> ID ArraySize .)
    READ            reduce using rule 72 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 72 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 72 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 72 (AccessArray -> ID ArraySize .)
    [               shift and go to state 96


state 48

    (18) FunScope -> : .

    RARROW          reduce using rule 18 (FunScope -> : .)
    ID              reduce using rule 18 (FunScope -> : .)
    {               reduce using rule 18 (FunScope -> : .)
    STRING          reduce using rule 18 (FunScope -> : .)
    IF              reduce using rule 18 (FunScope -> : .)
    WHILE           reduce using rule 18 (FunScope -> : .)
    SWITCHCOND      reduce using rule 18 (FunScope -> : .)
    SWITCHCASE      reduce using rule 18 (FunScope -> : .)
    (               reduce using rule 18 (FunScope -> : .)
    NUM             reduce using rule 18 (FunScope -> : .)
    READ            reduce using rule 18 (FunScope -> : .)
    NEG             reduce using rule 18 (FunScope -> : .)
    SUB             reduce using rule 18 (FunScope -> : .)


state 49

    (57) ArraySize -> [ . AtribOp ]
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 97
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 50

    (82) Base -> ( AtribOp . )
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 98
    RARROW          shift and go to state 99


state 51

    (49) AtribOp -> Op .

    )               reduce using rule 49 (AtribOp -> Op .)
    RARROW          reduce using rule 49 (AtribOp -> Op .)
    {               reduce using rule 49 (AtribOp -> Op .)
    ID              reduce using rule 49 (AtribOp -> Op .)
    STRING          reduce using rule 49 (AtribOp -> Op .)
    IF              reduce using rule 49 (AtribOp -> Op .)
    WHILE           reduce using rule 49 (AtribOp -> Op .)
    SWITCHCOND      reduce using rule 49 (AtribOp -> Op .)
    SWITCHCASE      reduce using rule 49 (AtribOp -> Op .)
    (               reduce using rule 49 (AtribOp -> Op .)
    NUM             reduce using rule 49 (AtribOp -> Op .)
    READ            reduce using rule 49 (AtribOp -> Op .)
    NEG             reduce using rule 49 (AtribOp -> Op .)
    SUB             reduce using rule 49 (AtribOp -> Op .)
    ,               reduce using rule 49 (AtribOp -> Op .)
    ;               reduce using rule 49 (AtribOp -> Op .)
    ]               reduce using rule 49 (AtribOp -> Op .)


state 52

    (60) AtribNum -> ID . LARROW AtribOp
    (54) AtribArray -> ID . ArraySize LARROW AtribOp
    (83) Base -> ID .
    (87) FunCall -> ID . ( FunArg )
    (72) AccessArray -> ID . ArraySize
    (56) ArraySize -> . ArraySize [ AtribOp ]
    (57) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    LARROW          shift and go to state 100
    PRINT           reduce using rule 83 (Base -> ID .)
    POW             reduce using rule 83 (Base -> ID .)
    MUL             reduce using rule 83 (Base -> ID .)
    DIV             reduce using rule 83 (Base -> ID .)
    ADD             reduce using rule 83 (Base -> ID .)
    SUB             reduce using rule 83 (Base -> ID .)
    AND             reduce using rule 83 (Base -> ID .)
    OR              reduce using rule 83 (Base -> ID .)
    LESSER          reduce using rule 83 (Base -> ID .)
    GREATER         reduce using rule 83 (Base -> ID .)
    LEQ             reduce using rule 83 (Base -> ID .)
    GEQ             reduce using rule 83 (Base -> ID .)
    EQUAL           reduce using rule 83 (Base -> ID .)
    )               reduce using rule 83 (Base -> ID .)
    RARROW          reduce using rule 83 (Base -> ID .)
    {               reduce using rule 83 (Base -> ID .)
    ID              reduce using rule 83 (Base -> ID .)
    STRING          reduce using rule 83 (Base -> ID .)
    IF              reduce using rule 83 (Base -> ID .)
    WHILE           reduce using rule 83 (Base -> ID .)
    SWITCHCOND      reduce using rule 83 (Base -> ID .)
    SWITCHCASE      reduce using rule 83 (Base -> ID .)
    NUM             reduce using rule 83 (Base -> ID .)
    READ            reduce using rule 83 (Base -> ID .)
    NEG             reduce using rule 83 (Base -> ID .)
    ,               reduce using rule 83 (Base -> ID .)
    ;               reduce using rule 83 (Base -> ID .)
    ]               reduce using rule 83 (Base -> ID .)
    (               shift and go to state 44
    [               shift and go to state 49

  ! (               [ reduce using rule 83 (Base -> ID .) ]

    ArraySize                      shift and go to state 47

state 53

    (62) AtribNum -> AtribArray .

    )               reduce using rule 62 (AtribNum -> AtribArray .)
    RARROW          reduce using rule 62 (AtribNum -> AtribArray .)
    {               reduce using rule 62 (AtribNum -> AtribArray .)
    ID              reduce using rule 62 (AtribNum -> AtribArray .)
    STRING          reduce using rule 62 (AtribNum -> AtribArray .)
    IF              reduce using rule 62 (AtribNum -> AtribArray .)
    WHILE           reduce using rule 62 (AtribNum -> AtribArray .)
    SWITCHCOND      reduce using rule 62 (AtribNum -> AtribArray .)
    SWITCHCASE      reduce using rule 62 (AtribNum -> AtribArray .)
    (               reduce using rule 62 (AtribNum -> AtribArray .)
    NUM             reduce using rule 62 (AtribNum -> AtribArray .)
    READ            reduce using rule 62 (AtribNum -> AtribArray .)
    NEG             reduce using rule 62 (AtribNum -> AtribArray .)
    SUB             reduce using rule 62 (AtribNum -> AtribArray .)
    ,               reduce using rule 62 (AtribNum -> AtribArray .)
    ;               reduce using rule 62 (AtribNum -> AtribArray .)
    ]               reduce using rule 62 (AtribNum -> AtribArray .)


state 54

    (85) Base -> FunCall .

    PRINT           reduce using rule 85 (Base -> FunCall .)
    POW             reduce using rule 85 (Base -> FunCall .)
    MUL             reduce using rule 85 (Base -> FunCall .)
    DIV             reduce using rule 85 (Base -> FunCall .)
    ADD             reduce using rule 85 (Base -> FunCall .)
    SUB             reduce using rule 85 (Base -> FunCall .)
    AND             reduce using rule 85 (Base -> FunCall .)
    OR              reduce using rule 85 (Base -> FunCall .)
    LESSER          reduce using rule 85 (Base -> FunCall .)
    GREATER         reduce using rule 85 (Base -> FunCall .)
    LEQ             reduce using rule 85 (Base -> FunCall .)
    GEQ             reduce using rule 85 (Base -> FunCall .)
    EQUAL           reduce using rule 85 (Base -> FunCall .)
    )               reduce using rule 85 (Base -> FunCall .)
    RARROW          reduce using rule 85 (Base -> FunCall .)
    {               reduce using rule 85 (Base -> FunCall .)
    ID              reduce using rule 85 (Base -> FunCall .)
    STRING          reduce using rule 85 (Base -> FunCall .)
    IF              reduce using rule 85 (Base -> FunCall .)
    WHILE           reduce using rule 85 (Base -> FunCall .)
    SWITCHCOND      reduce using rule 85 (Base -> FunCall .)
    SWITCHCASE      reduce using rule 85 (Base -> FunCall .)
    (               reduce using rule 85 (Base -> FunCall .)
    NUM             reduce using rule 85 (Base -> FunCall .)
    READ            reduce using rule 85 (Base -> FunCall .)
    NEG             reduce using rule 85 (Base -> FunCall .)
    ;               reduce using rule 85 (Base -> FunCall .)
    ,               reduce using rule 85 (Base -> FunCall .)
    ]               reduce using rule 85 (Base -> FunCall .)


state 55

    (42) Exp -> STRING PRINT .

    ;               reduce using rule 42 (Exp -> STRING PRINT .)


state 56

    (26) If -> IfScope AtribOp . Body
    (28) IfElse -> IfScope AtribOp . Body ElseScope Body
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    RARROW          shift and go to state 99
    {               shift and go to state 103
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    Body                           shift and go to state 101
    Block                          shift and go to state 104
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 57

    (64) Atrib -> AtribOp RARROW . ID
    (59) DeclAtrib -> AtribOp RARROW . ID ID
    (55) AtribArray -> AtribOp RARROW . ID ArraySize
    (61) AtribNum -> AtribOp RARROW . ID

    ID              shift and go to state 105


state 58

    (30) While -> WhileScope ( . AtribOp ) Body
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 106
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 59

    (33) Switch -> SwitchScope Conds . { Cases }
    (34) Conds -> Conds . , Cond

    {               shift and go to state 107
    ,               shift and go to state 108


state 60

    (35) Conds -> Cond .

    {               reduce using rule 35 (Conds -> Cond .)
    ,               reduce using rule 35 (Conds -> Cond .)


state 61

    (36) Cond -> ID . ( AtribOp )

    (               shift and go to state 109


state 62

    (37) Cond -> ( . AtribOp )
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 110
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 63

    (73) OpBin -> OpBin OpLogico . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 81
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    TermPlus                       shift and go to state 111
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 64

    (92) OpLogico -> AND .

    (               reduce using rule 92 (OpLogico -> AND .)
    ID              reduce using rule 92 (OpLogico -> AND .)
    NUM             reduce using rule 92 (OpLogico -> AND .)
    READ            reduce using rule 92 (OpLogico -> AND .)
    NEG             reduce using rule 92 (OpLogico -> AND .)
    SUB             reduce using rule 92 (OpLogico -> AND .)


state 65

    (93) OpLogico -> OR .

    (               reduce using rule 93 (OpLogico -> OR .)
    ID              reduce using rule 93 (OpLogico -> OR .)
    NUM             reduce using rule 93 (OpLogico -> OR .)
    READ            reduce using rule 93 (OpLogico -> OR .)
    NEG             reduce using rule 93 (OpLogico -> OR .)
    SUB             reduce using rule 93 (OpLogico -> OR .)


state 66

    (94) OpLogico -> LESSER .

    (               reduce using rule 94 (OpLogico -> LESSER .)
    ID              reduce using rule 94 (OpLogico -> LESSER .)
    NUM             reduce using rule 94 (OpLogico -> LESSER .)
    READ            reduce using rule 94 (OpLogico -> LESSER .)
    NEG             reduce using rule 94 (OpLogico -> LESSER .)
    SUB             reduce using rule 94 (OpLogico -> LESSER .)


state 67

    (95) OpLogico -> GREATER .

    (               reduce using rule 95 (OpLogico -> GREATER .)
    ID              reduce using rule 95 (OpLogico -> GREATER .)
    NUM             reduce using rule 95 (OpLogico -> GREATER .)
    READ            reduce using rule 95 (OpLogico -> GREATER .)
    NEG             reduce using rule 95 (OpLogico -> GREATER .)
    SUB             reduce using rule 95 (OpLogico -> GREATER .)


state 68

    (96) OpLogico -> LEQ .

    (               reduce using rule 96 (OpLogico -> LEQ .)
    ID              reduce using rule 96 (OpLogico -> LEQ .)
    NUM             reduce using rule 96 (OpLogico -> LEQ .)
    READ            reduce using rule 96 (OpLogico -> LEQ .)
    NEG             reduce using rule 96 (OpLogico -> LEQ .)
    SUB             reduce using rule 96 (OpLogico -> LEQ .)


state 69

    (97) OpLogico -> GEQ .

    (               reduce using rule 97 (OpLogico -> GEQ .)
    ID              reduce using rule 97 (OpLogico -> GEQ .)
    NUM             reduce using rule 97 (OpLogico -> GEQ .)
    READ            reduce using rule 97 (OpLogico -> GEQ .)
    NEG             reduce using rule 97 (OpLogico -> GEQ .)
    SUB             reduce using rule 97 (OpLogico -> GEQ .)


state 70

    (98) OpLogico -> EQUAL .

    (               reduce using rule 98 (OpLogico -> EQUAL .)
    ID              reduce using rule 98 (OpLogico -> EQUAL .)
    NUM             reduce using rule 98 (OpLogico -> EQUAL .)
    READ            reduce using rule 98 (OpLogico -> EQUAL .)
    NEG             reduce using rule 98 (OpLogico -> EQUAL .)
    SUB             reduce using rule 98 (OpLogico -> EQUAL .)


state 71

    (75) TermPlus -> TermPlus OpPlus . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 81
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    TermMult                       shift and go to state 112
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 72

    (99) OpPlus -> ADD .

    (               reduce using rule 99 (OpPlus -> ADD .)
    ID              reduce using rule 99 (OpPlus -> ADD .)
    NUM             reduce using rule 99 (OpPlus -> ADD .)
    READ            reduce using rule 99 (OpPlus -> ADD .)
    NEG             reduce using rule 99 (OpPlus -> ADD .)
    SUB             reduce using rule 99 (OpPlus -> ADD .)


state 73

    (100) OpPlus -> SUB .

    (               reduce using rule 100 (OpPlus -> SUB .)
    ID              reduce using rule 100 (OpPlus -> SUB .)
    NUM             reduce using rule 100 (OpPlus -> SUB .)
    READ            reduce using rule 100 (OpPlus -> SUB .)
    NEG             reduce using rule 100 (OpPlus -> SUB .)
    SUB             reduce using rule 100 (OpPlus -> SUB .)


state 74

    (77) TermMult -> TermMult OpMult . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 81
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    TermPow                        shift and go to state 113
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 75

    (101) OpMult -> MUL .

    (               reduce using rule 101 (OpMult -> MUL .)
    ID              reduce using rule 101 (OpMult -> MUL .)
    NUM             reduce using rule 101 (OpMult -> MUL .)
    READ            reduce using rule 101 (OpMult -> MUL .)
    NEG             reduce using rule 101 (OpMult -> MUL .)
    SUB             reduce using rule 101 (OpMult -> MUL .)


state 76

    (102) OpMult -> DIV .

    (               reduce using rule 102 (OpMult -> DIV .)
    ID              reduce using rule 102 (OpMult -> DIV .)
    NUM             reduce using rule 102 (OpMult -> DIV .)
    READ            reduce using rule 102 (OpMult -> DIV .)
    NEG             reduce using rule 102 (OpMult -> DIV .)
    SUB             reduce using rule 102 (OpMult -> DIV .)


state 77

    (79) TermPow -> TermPow OpPow . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    (               shift and go to state 12
    ID              shift and go to state 81
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Base                           shift and go to state 114
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 78

    (103) OpPow -> POW .

    (               reduce using rule 103 (OpPow -> POW .)
    ID              reduce using rule 103 (OpPow -> POW .)
    NUM             reduce using rule 103 (OpPow -> POW .)
    READ            reduce using rule 103 (OpPow -> POW .)
    NEG             reduce using rule 103 (OpPow -> POW .)
    SUB             reduce using rule 103 (OpPow -> POW .)


state 79

    (71) OpUno -> Base PRINT .

    PRINT           reduce using rule 71 (OpUno -> Base PRINT .)
    POW             reduce using rule 71 (OpUno -> Base PRINT .)
    MUL             reduce using rule 71 (OpUno -> Base PRINT .)
    DIV             reduce using rule 71 (OpUno -> Base PRINT .)
    ADD             reduce using rule 71 (OpUno -> Base PRINT .)
    SUB             reduce using rule 71 (OpUno -> Base PRINT .)
    AND             reduce using rule 71 (OpUno -> Base PRINT .)
    OR              reduce using rule 71 (OpUno -> Base PRINT .)
    LESSER          reduce using rule 71 (OpUno -> Base PRINT .)
    GREATER         reduce using rule 71 (OpUno -> Base PRINT .)
    LEQ             reduce using rule 71 (OpUno -> Base PRINT .)
    GEQ             reduce using rule 71 (OpUno -> Base PRINT .)
    EQUAL           reduce using rule 71 (OpUno -> Base PRINT .)
    ;               reduce using rule 71 (OpUno -> Base PRINT .)
    RARROW          reduce using rule 71 (OpUno -> Base PRINT .)
    )               reduce using rule 71 (OpUno -> Base PRINT .)
    {               reduce using rule 71 (OpUno -> Base PRINT .)
    ID              reduce using rule 71 (OpUno -> Base PRINT .)
    STRING          reduce using rule 71 (OpUno -> Base PRINT .)
    IF              reduce using rule 71 (OpUno -> Base PRINT .)
    WHILE           reduce using rule 71 (OpUno -> Base PRINT .)
    SWITCHCOND      reduce using rule 71 (OpUno -> Base PRINT .)
    SWITCHCASE      reduce using rule 71 (OpUno -> Base PRINT .)
    (               reduce using rule 71 (OpUno -> Base PRINT .)
    NUM             reduce using rule 71 (OpUno -> Base PRINT .)
    READ            reduce using rule 71 (OpUno -> Base PRINT .)
    NEG             reduce using rule 71 (OpUno -> Base PRINT .)
    ,               reduce using rule 71 (OpUno -> Base PRINT .)
    ]               reduce using rule 71 (OpUno -> Base PRINT .)


state 80

    (68) OpUno -> NEG Base .
    (71) OpUno -> Base . PRINT

  ! shift/reduce conflict for PRINT resolved as shift
    POW             reduce using rule 68 (OpUno -> NEG Base .)
    MUL             reduce using rule 68 (OpUno -> NEG Base .)
    DIV             reduce using rule 68 (OpUno -> NEG Base .)
    ADD             reduce using rule 68 (OpUno -> NEG Base .)
    SUB             reduce using rule 68 (OpUno -> NEG Base .)
    AND             reduce using rule 68 (OpUno -> NEG Base .)
    OR              reduce using rule 68 (OpUno -> NEG Base .)
    LESSER          reduce using rule 68 (OpUno -> NEG Base .)
    GREATER         reduce using rule 68 (OpUno -> NEG Base .)
    LEQ             reduce using rule 68 (OpUno -> NEG Base .)
    GEQ             reduce using rule 68 (OpUno -> NEG Base .)
    EQUAL           reduce using rule 68 (OpUno -> NEG Base .)
    ;               reduce using rule 68 (OpUno -> NEG Base .)
    RARROW          reduce using rule 68 (OpUno -> NEG Base .)
    )               reduce using rule 68 (OpUno -> NEG Base .)
    {               reduce using rule 68 (OpUno -> NEG Base .)
    ID              reduce using rule 68 (OpUno -> NEG Base .)
    STRING          reduce using rule 68 (OpUno -> NEG Base .)
    IF              reduce using rule 68 (OpUno -> NEG Base .)
    WHILE           reduce using rule 68 (OpUno -> NEG Base .)
    SWITCHCOND      reduce using rule 68 (OpUno -> NEG Base .)
    SWITCHCASE      reduce using rule 68 (OpUno -> NEG Base .)
    (               reduce using rule 68 (OpUno -> NEG Base .)
    NUM             reduce using rule 68 (OpUno -> NEG Base .)
    READ            reduce using rule 68 (OpUno -> NEG Base .)
    NEG             reduce using rule 68 (OpUno -> NEG Base .)
    ,               reduce using rule 68 (OpUno -> NEG Base .)
    ]               reduce using rule 68 (OpUno -> NEG Base .)
    PRINT           shift and go to state 79

  ! PRINT           [ reduce using rule 68 (OpUno -> NEG Base .) ]


state 81

    (83) Base -> ID .
    (87) FunCall -> ID . ( FunArg )
    (72) AccessArray -> ID . ArraySize
    (56) ArraySize -> . ArraySize [ AtribOp ]
    (57) ArraySize -> . [ AtribOp ]

  ! shift/reduce conflict for ( resolved as shift
    PRINT           reduce using rule 83 (Base -> ID .)
    POW             reduce using rule 83 (Base -> ID .)
    MUL             reduce using rule 83 (Base -> ID .)
    DIV             reduce using rule 83 (Base -> ID .)
    ADD             reduce using rule 83 (Base -> ID .)
    SUB             reduce using rule 83 (Base -> ID .)
    AND             reduce using rule 83 (Base -> ID .)
    OR              reduce using rule 83 (Base -> ID .)
    LESSER          reduce using rule 83 (Base -> ID .)
    GREATER         reduce using rule 83 (Base -> ID .)
    LEQ             reduce using rule 83 (Base -> ID .)
    GEQ             reduce using rule 83 (Base -> ID .)
    EQUAL           reduce using rule 83 (Base -> ID .)
    ;               reduce using rule 83 (Base -> ID .)
    RARROW          reduce using rule 83 (Base -> ID .)
    )               reduce using rule 83 (Base -> ID .)
    {               reduce using rule 83 (Base -> ID .)
    ID              reduce using rule 83 (Base -> ID .)
    STRING          reduce using rule 83 (Base -> ID .)
    IF              reduce using rule 83 (Base -> ID .)
    WHILE           reduce using rule 83 (Base -> ID .)
    SWITCHCOND      reduce using rule 83 (Base -> ID .)
    SWITCHCASE      reduce using rule 83 (Base -> ID .)
    NUM             reduce using rule 83 (Base -> ID .)
    READ            reduce using rule 83 (Base -> ID .)
    NEG             reduce using rule 83 (Base -> ID .)
    ,               reduce using rule 83 (Base -> ID .)
    ]               reduce using rule 83 (Base -> ID .)
    (               shift and go to state 44
    [               shift and go to state 49

  ! (               [ reduce using rule 83 (Base -> ID .) ]

    ArraySize                      shift and go to state 115

state 82

    (70) OpUno -> SUB Base .
    (71) OpUno -> Base . PRINT

  ! shift/reduce conflict for PRINT resolved as shift
    POW             reduce using rule 70 (OpUno -> SUB Base .)
    MUL             reduce using rule 70 (OpUno -> SUB Base .)
    DIV             reduce using rule 70 (OpUno -> SUB Base .)
    ADD             reduce using rule 70 (OpUno -> SUB Base .)
    SUB             reduce using rule 70 (OpUno -> SUB Base .)
    AND             reduce using rule 70 (OpUno -> SUB Base .)
    OR              reduce using rule 70 (OpUno -> SUB Base .)
    LESSER          reduce using rule 70 (OpUno -> SUB Base .)
    GREATER         reduce using rule 70 (OpUno -> SUB Base .)
    LEQ             reduce using rule 70 (OpUno -> SUB Base .)
    GEQ             reduce using rule 70 (OpUno -> SUB Base .)
    EQUAL           reduce using rule 70 (OpUno -> SUB Base .)
    ;               reduce using rule 70 (OpUno -> SUB Base .)
    RARROW          reduce using rule 70 (OpUno -> SUB Base .)
    )               reduce using rule 70 (OpUno -> SUB Base .)
    {               reduce using rule 70 (OpUno -> SUB Base .)
    ID              reduce using rule 70 (OpUno -> SUB Base .)
    STRING          reduce using rule 70 (OpUno -> SUB Base .)
    IF              reduce using rule 70 (OpUno -> SUB Base .)
    WHILE           reduce using rule 70 (OpUno -> SUB Base .)
    SWITCHCOND      reduce using rule 70 (OpUno -> SUB Base .)
    SWITCHCASE      reduce using rule 70 (OpUno -> SUB Base .)
    (               reduce using rule 70 (OpUno -> SUB Base .)
    NUM             reduce using rule 70 (OpUno -> SUB Base .)
    READ            reduce using rule 70 (OpUno -> SUB Base .)
    NEG             reduce using rule 70 (OpUno -> SUB Base .)
    ,               reduce using rule 70 (OpUno -> SUB Base .)
    ]               reduce using rule 70 (OpUno -> SUB Base .)
    PRINT           shift and go to state 79

  ! PRINT           [ reduce using rule 70 (OpUno -> SUB Base .) ]


state 83

    (51) DeclArray -> ID ID DeclArraySize .
    (52) DeclArraySize -> DeclArraySize . [ NUM ]

    ;               reduce using rule 51 (DeclArray -> ID ID DeclArraySize .)
    [               shift and go to state 116


state 84

    (58) DeclAtrib -> ID ID LARROW . AtribOp
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 117
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 85

    (53) DeclArraySize -> [ . NUM ]

    NUM             shift and go to state 118


state 86

    (24) FunExtra -> ID .

    RARROW          reduce using rule 24 (FunExtra -> ID .)
    ,               reduce using rule 24 (FunExtra -> ID .)
    {               reduce using rule 24 (FunExtra -> ID .)
    ID              reduce using rule 24 (FunExtra -> ID .)
    STRING          reduce using rule 24 (FunExtra -> ID .)
    IF              reduce using rule 24 (FunExtra -> ID .)
    WHILE           reduce using rule 24 (FunExtra -> ID .)
    SWITCHCOND      reduce using rule 24 (FunExtra -> ID .)
    SWITCHCASE      reduce using rule 24 (FunExtra -> ID .)
    (               reduce using rule 24 (FunExtra -> ID .)
    NUM             reduce using rule 24 (FunExtra -> ID .)
    READ            reduce using rule 24 (FunExtra -> ID .)
    NEG             reduce using rule 24 (FunExtra -> ID .)
    SUB             reduce using rule 24 (FunExtra -> ID .)


state 87

    (17) Function -> ID FunScope FunCases . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    {               shift and go to state 103
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Body                           shift and go to state 119
    Block                          shift and go to state 104
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 88

    (19) FunCases -> FunExtra . RARROW ID
    (21) FunCases -> FunExtra .
    (23) FunExtra -> FunExtra . , ID

    RARROW          shift and go to state 120
    {               reduce using rule 21 (FunCases -> FunExtra .)
    ID              reduce using rule 21 (FunCases -> FunExtra .)
    STRING          reduce using rule 21 (FunCases -> FunExtra .)
    IF              reduce using rule 21 (FunCases -> FunExtra .)
    WHILE           reduce using rule 21 (FunCases -> FunExtra .)
    SWITCHCOND      reduce using rule 21 (FunCases -> FunExtra .)
    SWITCHCASE      reduce using rule 21 (FunCases -> FunExtra .)
    (               reduce using rule 21 (FunCases -> FunExtra .)
    NUM             reduce using rule 21 (FunCases -> FunExtra .)
    READ            reduce using rule 21 (FunCases -> FunExtra .)
    NEG             reduce using rule 21 (FunCases -> FunExtra .)
    SUB             reduce using rule 21 (FunCases -> FunExtra .)
    ,               shift and go to state 121


state 89

    (20) FunCases -> RARROW . ID

    ID              shift and go to state 122


state 90

    (87) FunCall -> ID ( FunArg . )

    )               shift and go to state 123


state 91

    (88) FunArg -> FunRec .
    (90) FunRec -> FunRec . , AtribOp

    )               reduce using rule 88 (FunArg -> FunRec .)
    ,               shift and go to state 124


state 92

    (91) FunRec -> AtribOp .
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 91 (FunRec -> AtribOp .)
    )               reduce using rule 91 (FunRec -> AtribOp .)
    RARROW          shift and go to state 99


state 93

    (63) Atrib -> ID LARROW AtribOp .
    (60) AtribNum -> ID LARROW AtribOp .
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 63 (Atrib -> ID LARROW AtribOp .)
    RARROW          shift and go to state 99

  ! RARROW          [ reduce using rule 60 (AtribNum -> ID LARROW AtribOp .) ]


state 94

    (65) Atrib -> ID SWAP ID .

    ;               reduce using rule 65 (Atrib -> ID SWAP ID .)


state 95

    (54) AtribArray -> ID ArraySize LARROW . AtribOp
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 125
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 96

    (56) ArraySize -> ArraySize [ . AtribOp ]
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 126
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 97

    (57) ArraySize -> [ AtribOp . ]
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 127
    RARROW          shift and go to state 99


state 98

    (82) Base -> ( AtribOp ) .

    PRINT           reduce using rule 82 (Base -> ( AtribOp ) .)
    POW             reduce using rule 82 (Base -> ( AtribOp ) .)
    MUL             reduce using rule 82 (Base -> ( AtribOp ) .)
    DIV             reduce using rule 82 (Base -> ( AtribOp ) .)
    ADD             reduce using rule 82 (Base -> ( AtribOp ) .)
    SUB             reduce using rule 82 (Base -> ( AtribOp ) .)
    AND             reduce using rule 82 (Base -> ( AtribOp ) .)
    OR              reduce using rule 82 (Base -> ( AtribOp ) .)
    LESSER          reduce using rule 82 (Base -> ( AtribOp ) .)
    GREATER         reduce using rule 82 (Base -> ( AtribOp ) .)
    LEQ             reduce using rule 82 (Base -> ( AtribOp ) .)
    GEQ             reduce using rule 82 (Base -> ( AtribOp ) .)
    EQUAL           reduce using rule 82 (Base -> ( AtribOp ) .)
    ;               reduce using rule 82 (Base -> ( AtribOp ) .)
    RARROW          reduce using rule 82 (Base -> ( AtribOp ) .)
    )               reduce using rule 82 (Base -> ( AtribOp ) .)
    {               reduce using rule 82 (Base -> ( AtribOp ) .)
    ID              reduce using rule 82 (Base -> ( AtribOp ) .)
    STRING          reduce using rule 82 (Base -> ( AtribOp ) .)
    IF              reduce using rule 82 (Base -> ( AtribOp ) .)
    WHILE           reduce using rule 82 (Base -> ( AtribOp ) .)
    SWITCHCOND      reduce using rule 82 (Base -> ( AtribOp ) .)
    SWITCHCASE      reduce using rule 82 (Base -> ( AtribOp ) .)
    (               reduce using rule 82 (Base -> ( AtribOp ) .)
    NUM             reduce using rule 82 (Base -> ( AtribOp ) .)
    READ            reduce using rule 82 (Base -> ( AtribOp ) .)
    NEG             reduce using rule 82 (Base -> ( AtribOp ) .)
    ,               reduce using rule 82 (Base -> ( AtribOp ) .)
    ]               reduce using rule 82 (Base -> ( AtribOp ) .)


state 99

    (61) AtribNum -> AtribOp RARROW . ID
    (55) AtribArray -> AtribOp RARROW . ID ArraySize

    ID              shift and go to state 128


state 100

    (60) AtribNum -> ID LARROW . AtribOp
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 129
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 101

    (26) If -> IfScope AtribOp Body .
    (28) IfElse -> IfScope AtribOp Body . ElseScope Body
    (27) ElseScope -> . ELSE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 26 (If -> IfScope AtribOp Body .)
    STRING          reduce using rule 26 (If -> IfScope AtribOp Body .)
    IF              reduce using rule 26 (If -> IfScope AtribOp Body .)
    WHILE           reduce using rule 26 (If -> IfScope AtribOp Body .)
    SWITCHCOND      reduce using rule 26 (If -> IfScope AtribOp Body .)
    SWITCHCASE      reduce using rule 26 (If -> IfScope AtribOp Body .)
    (               reduce using rule 26 (If -> IfScope AtribOp Body .)
    NUM             reduce using rule 26 (If -> IfScope AtribOp Body .)
    READ            reduce using rule 26 (If -> IfScope AtribOp Body .)
    NEG             reduce using rule 26 (If -> IfScope AtribOp Body .)
    SUB             reduce using rule 26 (If -> IfScope AtribOp Body .)
    $end            reduce using rule 26 (If -> IfScope AtribOp Body .)
    }               reduce using rule 26 (If -> IfScope AtribOp Body .)
    :               reduce using rule 26 (If -> IfScope AtribOp Body .)
    ELSE            shift and go to state 131

  ! ELSE            [ reduce using rule 26 (If -> IfScope AtribOp Body .) ]

    ElseScope                      shift and go to state 130

state 102

    (87) FunCall -> ID . ( FunArg )
    (63) Atrib -> ID . LARROW AtribOp
    (65) Atrib -> ID . SWAP ID
    (50) Decl -> ID . ID
    (51) DeclArray -> ID . ID DeclArraySize
    (58) DeclAtrib -> ID . ID LARROW AtribOp
    (54) AtribArray -> ID . ArraySize LARROW AtribOp
    (60) AtribNum -> ID . LARROW AtribOp
    (83) Base -> ID .
    (72) AccessArray -> ID . ArraySize
    (56) ArraySize -> . ArraySize [ AtribOp ]
    (57) ArraySize -> . [ AtribOp ]

    (               shift and go to state 44
    LARROW          shift and go to state 45
    SWAP            shift and go to state 46
    ID              shift and go to state 42
    PRINT           reduce using rule 83 (Base -> ID .)
    POW             reduce using rule 83 (Base -> ID .)
    MUL             reduce using rule 83 (Base -> ID .)
    DIV             reduce using rule 83 (Base -> ID .)
    ADD             reduce using rule 83 (Base -> ID .)
    SUB             reduce using rule 83 (Base -> ID .)
    AND             reduce using rule 83 (Base -> ID .)
    OR              reduce using rule 83 (Base -> ID .)
    LESSER          reduce using rule 83 (Base -> ID .)
    GREATER         reduce using rule 83 (Base -> ID .)
    LEQ             reduce using rule 83 (Base -> ID .)
    GEQ             reduce using rule 83 (Base -> ID .)
    EQUAL           reduce using rule 83 (Base -> ID .)
    ;               reduce using rule 83 (Base -> ID .)
    RARROW          reduce using rule 83 (Base -> ID .)
    [               shift and go to state 49

    ArraySize                      shift and go to state 47

state 103

    (14) Body -> { . }
    (16) Body -> { . Code }
    (6) Code -> . Code Block
    (7) Code -> . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    }               shift and go to state 132
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Code                           shift and go to state 133
    Block                          shift and go to state 134
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 104

    (15) Body -> Block .

    ELSE            reduce using rule 15 (Body -> Block .)
    ID              reduce using rule 15 (Body -> Block .)
    STRING          reduce using rule 15 (Body -> Block .)
    IF              reduce using rule 15 (Body -> Block .)
    WHILE           reduce using rule 15 (Body -> Block .)
    SWITCHCOND      reduce using rule 15 (Body -> Block .)
    SWITCHCASE      reduce using rule 15 (Body -> Block .)
    (               reduce using rule 15 (Body -> Block .)
    NUM             reduce using rule 15 (Body -> Block .)
    READ            reduce using rule 15 (Body -> Block .)
    NEG             reduce using rule 15 (Body -> Block .)
    SUB             reduce using rule 15 (Body -> Block .)
    $end            reduce using rule 15 (Body -> Block .)
    }               reduce using rule 15 (Body -> Block .)
    :               reduce using rule 15 (Body -> Block .)


state 105

    (64) Atrib -> AtribOp RARROW ID .
    (59) DeclAtrib -> AtribOp RARROW ID . ID
    (55) AtribArray -> AtribOp RARROW ID . ArraySize
    (61) AtribNum -> AtribOp RARROW ID .
    (56) ArraySize -> . ArraySize [ AtribOp ]
    (57) ArraySize -> . [ AtribOp ]

    ;               reduce using rule 64 (Atrib -> AtribOp RARROW ID .)
    ID              shift and go to state 135
    RARROW          reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 49

    ArraySize                      shift and go to state 136

state 106

    (30) While -> WhileScope ( AtribOp . ) Body
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 137
    RARROW          shift and go to state 99


state 107

    (33) Switch -> SwitchScope Conds { . Cases }
    (38) Cases -> . Cases Case
    (39) Cases -> . Case
    (40) Case -> . ID : Body
    (41) Case -> . : Body

    ID              shift and go to state 140
    :               shift and go to state 141

    Cases                          shift and go to state 138
    Case                           shift and go to state 139

state 108

    (34) Conds -> Conds , . Cond
    (36) Cond -> . ID ( AtribOp )
    (37) Cond -> . ( AtribOp )

    ID              shift and go to state 61
    (               shift and go to state 62

    Cond                           shift and go to state 142

state 109

    (36) Cond -> ID ( . AtribOp )
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 143
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 110

    (37) Cond -> ( AtribOp . )
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 144
    RARROW          shift and go to state 99


state 111

    (73) OpBin -> OpBin OpLogico TermPlus .
    (75) TermPlus -> TermPlus . OpPlus TermMult
    (99) OpPlus -> . ADD
    (100) OpPlus -> . SUB

  ! shift/reduce conflict for SUB resolved as shift
    AND             reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    OR              reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    LESSER          reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    GREATER         reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    LEQ             reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    GEQ             reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    EQUAL           reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    ;               reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    RARROW          reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    )               reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    {               reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    ID              reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    STRING          reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    IF              reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    WHILE           reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCHCOND      reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    SWITCHCASE      reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    (               reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    NUM             reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    READ            reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    NEG             reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    ,               reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    ]               reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .)
    ADD             shift and go to state 72
    SUB             shift and go to state 73

  ! SUB             [ reduce using rule 73 (OpBin -> OpBin OpLogico TermPlus .) ]

    OpPlus                         shift and go to state 71

state 112

    (75) TermPlus -> TermPlus OpPlus TermMult .
    (77) TermMult -> TermMult . OpMult TermPow
    (101) OpMult -> . MUL
    (102) OpMult -> . DIV

    ADD             reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    SUB             reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    AND             reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    OR              reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    LESSER          reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    GREATER         reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    LEQ             reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    GEQ             reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    EQUAL           reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    ;               reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    RARROW          reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    )               reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    {               reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    ID              reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    STRING          reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    IF              reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    WHILE           reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCHCOND      reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    SWITCHCASE      reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    (               reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    NUM             reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    READ            reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    NEG             reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    ,               reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    ]               reduce using rule 75 (TermPlus -> TermPlus OpPlus TermMult .)
    MUL             shift and go to state 75
    DIV             shift and go to state 76

    OpMult                         shift and go to state 74

state 113

    (77) TermMult -> TermMult OpMult TermPow .
    (79) TermPow -> TermPow . OpPow Base
    (103) OpPow -> . POW

    MUL             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    DIV             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    ADD             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    SUB             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    AND             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    OR              reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    LESSER          reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    GREATER         reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    LEQ             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    GEQ             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    EQUAL           reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    ;               reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    RARROW          reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    )               reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    {               reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    ID              reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    STRING          reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    IF              reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    WHILE           reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    SWITCHCOND      reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    SWITCHCASE      reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    (               reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    NUM             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    READ            reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    NEG             reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    ,               reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    ]               reduce using rule 77 (TermMult -> TermMult OpMult TermPow .)
    POW             shift and go to state 78

    OpPow                          shift and go to state 77

state 114

    (79) TermPow -> TermPow OpPow Base .
    (71) OpUno -> Base . PRINT

    POW             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    MUL             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    DIV             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    ADD             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    SUB             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    AND             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    OR              reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    LESSER          reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    GREATER         reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    LEQ             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    GEQ             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    EQUAL           reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    ;               reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    RARROW          reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    )               reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    {               reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    ID              reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    STRING          reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    IF              reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    WHILE           reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    SWITCHCOND      reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    SWITCHCASE      reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    (               reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    NUM             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    READ            reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    NEG             reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    ,               reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    ]               reduce using rule 79 (TermPow -> TermPow OpPow Base .)
    PRINT           shift and go to state 79


state 115

    (72) AccessArray -> ID ArraySize .
    (56) ArraySize -> ArraySize . [ AtribOp ]

    PRINT           reduce using rule 72 (AccessArray -> ID ArraySize .)
    POW             reduce using rule 72 (AccessArray -> ID ArraySize .)
    MUL             reduce using rule 72 (AccessArray -> ID ArraySize .)
    DIV             reduce using rule 72 (AccessArray -> ID ArraySize .)
    ADD             reduce using rule 72 (AccessArray -> ID ArraySize .)
    SUB             reduce using rule 72 (AccessArray -> ID ArraySize .)
    AND             reduce using rule 72 (AccessArray -> ID ArraySize .)
    OR              reduce using rule 72 (AccessArray -> ID ArraySize .)
    LESSER          reduce using rule 72 (AccessArray -> ID ArraySize .)
    GREATER         reduce using rule 72 (AccessArray -> ID ArraySize .)
    LEQ             reduce using rule 72 (AccessArray -> ID ArraySize .)
    GEQ             reduce using rule 72 (AccessArray -> ID ArraySize .)
    EQUAL           reduce using rule 72 (AccessArray -> ID ArraySize .)
    ;               reduce using rule 72 (AccessArray -> ID ArraySize .)
    RARROW          reduce using rule 72 (AccessArray -> ID ArraySize .)
    )               reduce using rule 72 (AccessArray -> ID ArraySize .)
    {               reduce using rule 72 (AccessArray -> ID ArraySize .)
    ID              reduce using rule 72 (AccessArray -> ID ArraySize .)
    STRING          reduce using rule 72 (AccessArray -> ID ArraySize .)
    IF              reduce using rule 72 (AccessArray -> ID ArraySize .)
    WHILE           reduce using rule 72 (AccessArray -> ID ArraySize .)
    SWITCHCOND      reduce using rule 72 (AccessArray -> ID ArraySize .)
    SWITCHCASE      reduce using rule 72 (AccessArray -> ID ArraySize .)
    (               reduce using rule 72 (AccessArray -> ID ArraySize .)
    NUM             reduce using rule 72 (AccessArray -> ID ArraySize .)
    READ            reduce using rule 72 (AccessArray -> ID ArraySize .)
    NEG             reduce using rule 72 (AccessArray -> ID ArraySize .)
    ,               reduce using rule 72 (AccessArray -> ID ArraySize .)
    ]               reduce using rule 72 (AccessArray -> ID ArraySize .)
    [               shift and go to state 96


state 116

    (52) DeclArraySize -> DeclArraySize [ . NUM ]

    NUM             shift and go to state 145


state 117

    (58) DeclAtrib -> ID ID LARROW AtribOp .
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    ;               reduce using rule 58 (DeclAtrib -> ID ID LARROW AtribOp .)
    RARROW          shift and go to state 99


state 118

    (53) DeclArraySize -> [ NUM . ]

    ]               shift and go to state 146


state 119

    (17) Function -> ID FunScope FunCases Body .

    ID              reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    STRING          reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    IF              reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    WHILE           reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SWITCHCOND      reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SWITCHCASE      reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    (               reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    NUM             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    READ            reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    NEG             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    SUB             reduce using rule 17 (Function -> ID FunScope FunCases Body .)
    $end            reduce using rule 17 (Function -> ID FunScope FunCases Body .)


state 120

    (19) FunCases -> FunExtra RARROW . ID

    ID              shift and go to state 147


state 121

    (23) FunExtra -> FunExtra , . ID

    ID              shift and go to state 148


state 122

    (20) FunCases -> RARROW ID .

    {               reduce using rule 20 (FunCases -> RARROW ID .)
    ID              reduce using rule 20 (FunCases -> RARROW ID .)
    STRING          reduce using rule 20 (FunCases -> RARROW ID .)
    IF              reduce using rule 20 (FunCases -> RARROW ID .)
    WHILE           reduce using rule 20 (FunCases -> RARROW ID .)
    SWITCHCOND      reduce using rule 20 (FunCases -> RARROW ID .)
    SWITCHCASE      reduce using rule 20 (FunCases -> RARROW ID .)
    (               reduce using rule 20 (FunCases -> RARROW ID .)
    NUM             reduce using rule 20 (FunCases -> RARROW ID .)
    READ            reduce using rule 20 (FunCases -> RARROW ID .)
    NEG             reduce using rule 20 (FunCases -> RARROW ID .)
    SUB             reduce using rule 20 (FunCases -> RARROW ID .)


state 123

    (87) FunCall -> ID ( FunArg ) .

    ;               reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    PRINT           reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    POW             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    MUL             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    DIV             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    ADD             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    SUB             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    AND             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    OR              reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    LESSER          reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    GREATER         reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    LEQ             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    GEQ             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    EQUAL           reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    RARROW          reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    )               reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    {               reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    ID              reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    STRING          reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    IF              reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    WHILE           reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    SWITCHCOND      reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    SWITCHCASE      reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    (               reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    NUM             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    READ            reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    NEG             reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    ,               reduce using rule 87 (FunCall -> ID ( FunArg ) .)
    ]               reduce using rule 87 (FunCall -> ID ( FunArg ) .)


state 124

    (90) FunRec -> FunRec , . AtribOp
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (67) Op -> . OpBin
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (87) FunCall -> . ID ( FunArg )
    (72) AccessArray -> . ID ArraySize

    ID              shift and go to state 52
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    AtribOp                        shift and go to state 149
    AtribNum                       shift and go to state 29
    Op                             shift and go to state 51
    AtribArray                     shift and go to state 53
    OpBin                          shift and go to state 24
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    FunCall                        shift and go to state 54
    AccessArray                    shift and go to state 38

state 125

    (54) AtribArray -> ID ArraySize LARROW AtribOp .
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    ;               reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    )               reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    {               reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ID              reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    STRING          reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    IF              reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    WHILE           reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCHCOND      reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SWITCHCASE      reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    (               reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NUM             reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    READ            reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    NEG             reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    SUB             reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ,               reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    ]               reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .)
    RARROW          shift and go to state 99

  ! RARROW          [ reduce using rule 54 (AtribArray -> ID ArraySize LARROW AtribOp .) ]


state 126

    (56) ArraySize -> ArraySize [ AtribOp . ]
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    ]               shift and go to state 150
    RARROW          shift and go to state 99


state 127

    (57) ArraySize -> [ AtribOp ] .

    LARROW          reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    [               reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    PRINT           reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    POW             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    MUL             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    DIV             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    ADD             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    SUB             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    AND             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    OR              reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    LESSER          reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    GREATER         reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    LEQ             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    GEQ             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    EQUAL           reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    ;               reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    RARROW          reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    )               reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    {               reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    ID              reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    STRING          reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    IF              reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    WHILE           reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    SWITCHCOND      reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    SWITCHCASE      reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    (               reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    NUM             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    READ            reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    NEG             reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    ,               reduce using rule 57 (ArraySize -> [ AtribOp ] .)
    ]               reduce using rule 57 (ArraySize -> [ AtribOp ] .)


state 128

    (61) AtribNum -> AtribOp RARROW ID .
    (55) AtribArray -> AtribOp RARROW ID . ArraySize
    (56) ArraySize -> . ArraySize [ AtribOp ]
    (57) ArraySize -> . [ AtribOp ]

    )               reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    RARROW          reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    {               reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    ID              reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    STRING          reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    IF              reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    WHILE           reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    SWITCHCOND      reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    SWITCHCASE      reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    (               reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    NUM             reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    READ            reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    NEG             reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    SUB             reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    ,               reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    ;               reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    ]               reduce using rule 61 (AtribNum -> AtribOp RARROW ID .)
    [               shift and go to state 49

    ArraySize                      shift and go to state 136

state 129

    (60) AtribNum -> ID LARROW AtribOp .
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

  ! shift/reduce conflict for RARROW resolved as shift
    )               reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    {               reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    ID              reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    STRING          reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    IF              reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    WHILE           reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    SWITCHCOND      reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    SWITCHCASE      reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    (               reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    NUM             reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    READ            reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    NEG             reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    SUB             reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    ,               reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    ;               reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    ]               reduce using rule 60 (AtribNum -> ID LARROW AtribOp .)
    RARROW          shift and go to state 99

  ! RARROW          [ reduce using rule 60 (AtribNum -> ID LARROW AtribOp .) ]


state 130

    (28) IfElse -> IfScope AtribOp Body ElseScope . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    {               shift and go to state 103
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    Body                           shift and go to state 151
    Block                          shift and go to state 104
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 131

    (27) ElseScope -> ELSE .

    {               reduce using rule 27 (ElseScope -> ELSE .)
    ID              reduce using rule 27 (ElseScope -> ELSE .)
    STRING          reduce using rule 27 (ElseScope -> ELSE .)
    IF              reduce using rule 27 (ElseScope -> ELSE .)
    WHILE           reduce using rule 27 (ElseScope -> ELSE .)
    SWITCHCOND      reduce using rule 27 (ElseScope -> ELSE .)
    SWITCHCASE      reduce using rule 27 (ElseScope -> ELSE .)
    (               reduce using rule 27 (ElseScope -> ELSE .)
    NUM             reduce using rule 27 (ElseScope -> ELSE .)
    READ            reduce using rule 27 (ElseScope -> ELSE .)
    NEG             reduce using rule 27 (ElseScope -> ELSE .)
    SUB             reduce using rule 27 (ElseScope -> ELSE .)


state 132

    (14) Body -> { } .

    ELSE            reduce using rule 14 (Body -> { } .)
    ID              reduce using rule 14 (Body -> { } .)
    STRING          reduce using rule 14 (Body -> { } .)
    IF              reduce using rule 14 (Body -> { } .)
    WHILE           reduce using rule 14 (Body -> { } .)
    SWITCHCOND      reduce using rule 14 (Body -> { } .)
    SWITCHCASE      reduce using rule 14 (Body -> { } .)
    (               reduce using rule 14 (Body -> { } .)
    NUM             reduce using rule 14 (Body -> { } .)
    READ            reduce using rule 14 (Body -> { } .)
    NEG             reduce using rule 14 (Body -> { } .)
    SUB             reduce using rule 14 (Body -> { } .)
    $end            reduce using rule 14 (Body -> { } .)
    }               reduce using rule 14 (Body -> { } .)
    :               reduce using rule 14 (Body -> { } .)


state 133

    (16) Body -> { Code . }
    (6) Code -> Code . Block
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    }               shift and go to state 152
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Block                          shift and go to state 153
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 134

    (7) Code -> Block .

    }               reduce using rule 7 (Code -> Block .)
    ID              reduce using rule 7 (Code -> Block .)
    STRING          reduce using rule 7 (Code -> Block .)
    IF              reduce using rule 7 (Code -> Block .)
    WHILE           reduce using rule 7 (Code -> Block .)
    SWITCHCOND      reduce using rule 7 (Code -> Block .)
    SWITCHCASE      reduce using rule 7 (Code -> Block .)
    (               reduce using rule 7 (Code -> Block .)
    NUM             reduce using rule 7 (Code -> Block .)
    READ            reduce using rule 7 (Code -> Block .)
    NEG             reduce using rule 7 (Code -> Block .)
    SUB             reduce using rule 7 (Code -> Block .)


state 135

    (59) DeclAtrib -> AtribOp RARROW ID ID .

    ;               reduce using rule 59 (DeclAtrib -> AtribOp RARROW ID ID .)


state 136

    (55) AtribArray -> AtribOp RARROW ID ArraySize .
    (56) ArraySize -> ArraySize . [ AtribOp ]

    ;               reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    RARROW          reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    )               reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    {               reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ID              reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    STRING          reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    IF              reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    WHILE           reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCHCOND      reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SWITCHCASE      reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    (               reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NUM             reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    READ            reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    NEG             reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    SUB             reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ,               reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    ]               reduce using rule 55 (AtribArray -> AtribOp RARROW ID ArraySize .)
    [               shift and go to state 96


state 137

    (30) While -> WhileScope ( AtribOp ) . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    {               shift and go to state 103
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    WhileScope                     shift and go to state 21
    AtribOp                        shift and go to state 20
    Body                           shift and go to state 154
    Block                          shift and go to state 104
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    IfScope                        shift and go to state 19
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 138

    (33) Switch -> SwitchScope Conds { Cases . }
    (38) Cases -> Cases . Case
    (40) Case -> . ID : Body
    (41) Case -> . : Body

    }               shift and go to state 155
    ID              shift and go to state 140
    :               shift and go to state 141

    Case                           shift and go to state 156

state 139

    (39) Cases -> Case .

    }               reduce using rule 39 (Cases -> Case .)
    ID              reduce using rule 39 (Cases -> Case .)
    :               reduce using rule 39 (Cases -> Case .)


state 140

    (40) Case -> ID . : Body

    :               shift and go to state 157


state 141

    (41) Case -> : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    {               shift and go to state 103
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Body                           shift and go to state 158
    Block                          shift and go to state 104
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 142

    (34) Conds -> Conds , Cond .

    {               reduce using rule 34 (Conds -> Conds , Cond .)
    ,               reduce using rule 34 (Conds -> Conds , Cond .)


state 143

    (36) Cond -> ID ( AtribOp . )
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    )               shift and go to state 159
    RARROW          shift and go to state 99


state 144

    (37) Cond -> ( AtribOp ) .

    {               reduce using rule 37 (Cond -> ( AtribOp ) .)
    ,               reduce using rule 37 (Cond -> ( AtribOp ) .)


state 145

    (52) DeclArraySize -> DeclArraySize [ NUM . ]

    ]               shift and go to state 160


state 146

    (53) DeclArraySize -> [ NUM ] .

    [               reduce using rule 53 (DeclArraySize -> [ NUM ] .)
    ;               reduce using rule 53 (DeclArraySize -> [ NUM ] .)


state 147

    (19) FunCases -> FunExtra RARROW ID .

    {               reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    ID              reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    STRING          reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    IF              reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    WHILE           reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SWITCHCOND      reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SWITCHCASE      reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    (               reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    NUM             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    READ            reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    NEG             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)
    SUB             reduce using rule 19 (FunCases -> FunExtra RARROW ID .)


state 148

    (23) FunExtra -> FunExtra , ID .

    RARROW          reduce using rule 23 (FunExtra -> FunExtra , ID .)
    ,               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    {               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    ID              reduce using rule 23 (FunExtra -> FunExtra , ID .)
    STRING          reduce using rule 23 (FunExtra -> FunExtra , ID .)
    IF              reduce using rule 23 (FunExtra -> FunExtra , ID .)
    WHILE           reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SWITCHCOND      reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SWITCHCASE      reduce using rule 23 (FunExtra -> FunExtra , ID .)
    (               reduce using rule 23 (FunExtra -> FunExtra , ID .)
    NUM             reduce using rule 23 (FunExtra -> FunExtra , ID .)
    READ            reduce using rule 23 (FunExtra -> FunExtra , ID .)
    NEG             reduce using rule 23 (FunExtra -> FunExtra , ID .)
    SUB             reduce using rule 23 (FunExtra -> FunExtra , ID .)


state 149

    (90) FunRec -> FunRec , AtribOp .
    (61) AtribNum -> AtribOp . RARROW ID
    (55) AtribArray -> AtribOp . RARROW ID ArraySize

    ,               reduce using rule 90 (FunRec -> FunRec , AtribOp .)
    )               reduce using rule 90 (FunRec -> FunRec , AtribOp .)
    RARROW          shift and go to state 99


state 150

    (56) ArraySize -> ArraySize [ AtribOp ] .

    LARROW          reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    [               reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    PRINT           reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    POW             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    MUL             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    DIV             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    ADD             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    SUB             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    AND             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    OR              reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    LESSER          reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    GREATER         reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    LEQ             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    GEQ             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    EQUAL           reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    ;               reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    RARROW          reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    )               reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    {               reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    ID              reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    STRING          reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    IF              reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    WHILE           reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCHCOND      reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    SWITCHCASE      reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    (               reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    NUM             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    READ            reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    NEG             reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    ,               reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)
    ]               reduce using rule 56 (ArraySize -> ArraySize [ AtribOp ] .)


state 151

    (28) IfElse -> IfScope AtribOp Body ElseScope Body .

    ID              reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    STRING          reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    IF              reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    WHILE           reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCHCOND      reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SWITCHCASE      reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    (               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NUM             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    READ            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    NEG             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    SUB             reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    $end            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    ELSE            reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    }               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)
    :               reduce using rule 28 (IfElse -> IfScope AtribOp Body ElseScope Body .)


state 152

    (16) Body -> { Code } .

    ELSE            reduce using rule 16 (Body -> { Code } .)
    ID              reduce using rule 16 (Body -> { Code } .)
    STRING          reduce using rule 16 (Body -> { Code } .)
    IF              reduce using rule 16 (Body -> { Code } .)
    WHILE           reduce using rule 16 (Body -> { Code } .)
    SWITCHCOND      reduce using rule 16 (Body -> { Code } .)
    SWITCHCASE      reduce using rule 16 (Body -> { Code } .)
    (               reduce using rule 16 (Body -> { Code } .)
    NUM             reduce using rule 16 (Body -> { Code } .)
    READ            reduce using rule 16 (Body -> { Code } .)
    NEG             reduce using rule 16 (Body -> { Code } .)
    SUB             reduce using rule 16 (Body -> { Code } .)
    $end            reduce using rule 16 (Body -> { Code } .)
    }               reduce using rule 16 (Body -> { Code } .)
    :               reduce using rule 16 (Body -> { Code } .)


state 153

    (6) Code -> Code Block .

    }               reduce using rule 6 (Code -> Code Block .)
    ID              reduce using rule 6 (Code -> Code Block .)
    STRING          reduce using rule 6 (Code -> Code Block .)
    IF              reduce using rule 6 (Code -> Code Block .)
    WHILE           reduce using rule 6 (Code -> Code Block .)
    SWITCHCOND      reduce using rule 6 (Code -> Code Block .)
    SWITCHCASE      reduce using rule 6 (Code -> Code Block .)
    (               reduce using rule 6 (Code -> Code Block .)
    NUM             reduce using rule 6 (Code -> Code Block .)
    READ            reduce using rule 6 (Code -> Code Block .)
    NEG             reduce using rule 6 (Code -> Code Block .)
    SUB             reduce using rule 6 (Code -> Code Block .)


state 154

    (30) While -> WhileScope ( AtribOp ) Body .

    ID              reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    STRING          reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    IF              reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    WHILE           reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SWITCHCOND      reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SWITCHCASE      reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    (               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    NUM             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    READ            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    NEG             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    SUB             reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    $end            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    ELSE            reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    }               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)
    :               reduce using rule 30 (While -> WhileScope ( AtribOp ) Body .)


state 155

    (33) Switch -> SwitchScope Conds { Cases } .

    ID              reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    STRING          reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    IF              reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    WHILE           reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    SWITCHCOND      reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    SWITCHCASE      reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    (               reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    NUM             reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    READ            reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    NEG             reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    SUB             reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    $end            reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    ELSE            reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    }               reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)
    :               reduce using rule 33 (Switch -> SwitchScope Conds { Cases } .)


state 156

    (38) Cases -> Cases Case .

    }               reduce using rule 38 (Cases -> Cases Case .)
    ID              reduce using rule 38 (Cases -> Cases Case .)
    :               reduce using rule 38 (Cases -> Cases Case .)


state 157

    (40) Case -> ID : . Body
    (14) Body -> . { }
    (15) Body -> . Block
    (16) Body -> . { Code }
    (8) Block -> . FunCall ;
    (9) Block -> . Exp ;
    (10) Block -> . If
    (11) Block -> . IfElse
    (12) Block -> . While
    (13) Block -> . Switch
    (87) FunCall -> . ID ( FunArg )
    (42) Exp -> . STRING PRINT
    (43) Exp -> . Atrib
    (44) Exp -> . Op
    (45) Exp -> . Decl
    (46) Exp -> . DeclArray
    (47) Exp -> . DeclAtrib
    (26) If -> . IfScope AtribOp Body
    (28) IfElse -> . IfScope AtribOp Body ElseScope Body
    (30) While -> . WhileScope ( AtribOp ) Body
    (33) Switch -> . SwitchScope Conds { Cases }
    (63) Atrib -> . ID LARROW AtribOp
    (64) Atrib -> . AtribOp RARROW ID
    (65) Atrib -> . ID SWAP ID
    (66) Atrib -> . AtribArray
    (67) Op -> . OpBin
    (50) Decl -> . ID ID
    (51) DeclArray -> . ID ID DeclArraySize
    (58) DeclAtrib -> . ID ID LARROW AtribOp
    (59) DeclAtrib -> . AtribOp RARROW ID ID
    (25) IfScope -> . IF
    (29) WhileScope -> . WHILE
    (31) SwitchScope -> . SWITCHCOND
    (32) SwitchScope -> . SWITCHCASE
    (48) AtribOp -> . AtribNum
    (49) AtribOp -> . Op
    (54) AtribArray -> . ID ArraySize LARROW AtribOp
    (55) AtribArray -> . AtribOp RARROW ID ArraySize
    (73) OpBin -> . OpBin OpLogico TermPlus
    (74) OpBin -> . TermPlus
    (60) AtribNum -> . ID LARROW AtribOp
    (61) AtribNum -> . AtribOp RARROW ID
    (62) AtribNum -> . AtribArray
    (75) TermPlus -> . TermPlus OpPlus TermMult
    (76) TermPlus -> . TermMult
    (77) TermMult -> . TermMult OpMult TermPow
    (78) TermMult -> . TermPow
    (79) TermPow -> . TermPow OpPow Base
    (80) TermPow -> . Base
    (81) Base -> . OpUno
    (82) Base -> . ( AtribOp )
    (83) Base -> . ID
    (84) Base -> . NUM
    (85) Base -> . FunCall
    (86) Base -> . READ
    (68) OpUno -> . NEG Base
    (69) OpUno -> . AccessArray
    (70) OpUno -> . SUB Base
    (71) OpUno -> . Base PRINT
    (72) AccessArray -> . ID ArraySize

    {               shift and go to state 103
    ID              shift and go to state 102
    STRING          shift and go to state 13
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    SWITCHCOND      shift and go to state 27
    SWITCHCASE      shift and go to state 28
    (               shift and go to state 12
    NUM             shift and go to state 35
    READ            shift and go to state 36
    NEG             shift and go to state 37
    SUB             shift and go to state 39

    Body                           shift and go to state 161
    Block                          shift and go to state 104
    FunCall                        shift and go to state 5
    Exp                            shift and go to state 6
    If                             shift and go to state 7
    IfElse                         shift and go to state 8
    While                          shift and go to state 9
    Switch                         shift and go to state 10
    Atrib                          shift and go to state 14
    Op                             shift and go to state 15
    Decl                           shift and go to state 16
    DeclArray                      shift and go to state 17
    DeclAtrib                      shift and go to state 18
    IfScope                        shift and go to state 19
    AtribOp                        shift and go to state 20
    WhileScope                     shift and go to state 21
    SwitchScope                    shift and go to state 22
    AtribArray                     shift and go to state 23
    OpBin                          shift and go to state 24
    AtribNum                       shift and go to state 29
    TermPlus                       shift and go to state 30
    TermMult                       shift and go to state 31
    TermPow                        shift and go to state 32
    Base                           shift and go to state 33
    OpUno                          shift and go to state 34
    AccessArray                    shift and go to state 38

state 158

    (41) Case -> : Body .

    }               reduce using rule 41 (Case -> : Body .)
    ID              reduce using rule 41 (Case -> : Body .)
    :               reduce using rule 41 (Case -> : Body .)


state 159

    (36) Cond -> ID ( AtribOp ) .

    {               reduce using rule 36 (Cond -> ID ( AtribOp ) .)
    ,               reduce using rule 36 (Cond -> ID ( AtribOp ) .)


state 160

    (52) DeclArraySize -> DeclArraySize [ NUM ] .

    [               reduce using rule 52 (DeclArraySize -> DeclArraySize [ NUM ] .)
    ;               reduce using rule 52 (DeclArraySize -> DeclArraySize [ NUM ] .)


state 161

    (40) Case -> ID : Body .

    }               reduce using rule 40 (Case -> ID : Body .)
    ID              reduce using rule 40 (Case -> ID : Body .)
    :               reduce using rule 40 (Case -> ID : Body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 5 resolved as shift
WARNING: shift/reduce conflict for SUB in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for ( in state 52 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 80 resolved as shift
WARNING: shift/reduce conflict for ( in state 81 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 82 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 93 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 101 resolved as shift
WARNING: shift/reduce conflict for SUB in state 111 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 125 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 129 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (Start -> <empty>)
WARNING: rejected rule (Axiom -> <empty>) in state 0
